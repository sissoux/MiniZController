
MiniZController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006554  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080066dc  080066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006714  08006714  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006714  08006714  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006714  08006714  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006714  08006714  00016714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006718  08006718  00016718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800671c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000000c  08006728  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08006728  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d84  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002673  00000000  00000000  00033dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00036438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  000373d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c40f  00000000  00000000  00038290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131dd  00000000  00000000  0005469f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab838  00000000  00000000  0006787c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001130b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e8  00000000  00000000  00113108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080066c4 	.word	0x080066c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080066c4 	.word	0x080066c4

080001c8 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a11      	ldr	r2, [pc, #68]	; (8000218 <HAL_UART_RxCpltCallback+0x50>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d11a      	bne.n	800020e <HAL_UART_RxCpltCallback+0x46>
		{
			// Reset timeout
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 80001d8:	4b10      	ldr	r3, [pc, #64]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2200      	movs	r2, #0
 80001de:	625a      	str	r2, [r3, #36]	; 0x24

			// Add received byte to sbus FIFO
			SBUS_AddByte(gSBUSByte);
 80001e0:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <HAL_UART_RxCpltCallback+0x58>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 fc1f 	bl	8000a28 <SBUS_AddByte>

			// Available sbus frame ?
			if (SBUS_GetChannel(&gSBUSChannels) == FRAME_COMPLETE)
 80001ea:	480e      	ldr	r0, [pc, #56]	; (8000224 <HAL_UART_RxCpltCallback+0x5c>)
 80001ec:	f000 fc3c 	bl	8000a68 <SBUS_GetChannel>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d106      	bne.n	8000204 <HAL_UART_RxCpltCallback+0x3c>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000200:	f002 fb88 	bl	8002914 <HAL_GPIO_WritePin>
//				II = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_1, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
//				III = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_2, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
//				IV = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_3, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
			}
			// Restart IT
			HAL_UART_Receive_IT(huart, &gSBUSByte, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	4906      	ldr	r1, [pc, #24]	; (8000220 <HAL_UART_RxCpltCallback+0x58>)
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f005 f939 	bl	8005480 <HAL_UART_Receive_IT>
		}
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000208 	.word	0x20000208
 800021c:	20000290 	.word	0x20000290
 8000220:	20000080 	.word	0x20000080
 8000224:	200000d0 	.word	0x200000d0

08000228 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a08      	ldr	r2, [pc, #32]	; (8000254 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d108      	bne.n	800024a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		SBUS_TimeoutCallback();
 8000238:	f000 fc5a 	bl	8000af0 <SBUS_TimeoutCallback>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f002 fb65 	bl	8002914 <HAL_GPIO_WritePin>
	}

}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000290 	.word	0x20000290

08000258 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d106      	bne.n	8000276 <HAL_ADC_ConvCpltCallback+0x1e>
	{
		Servo_Feedback = HAL_ADC_GetValue(&hadc1);
 8000268:	480a      	ldr	r0, [pc, #40]	; (8000294 <HAL_ADC_ConvCpltCallback+0x3c>)
 800026a:	f001 f9b1 	bl	80015d0 <HAL_ADC_GetValue>
 800026e:	4603      	mov	r3, r0
 8000270:	4a09      	ldr	r2, [pc, #36]	; (8000298 <HAL_ADC_ConvCpltCallback+0x40>)
 8000272:	6013      	str	r3, [r2, #0]
	}
	else if(hadc == &hadc2)
	{
		Servo_Trim = HAL_ADC_GetValue(&hadc2);
	}
}
 8000274:	e009      	b.n	800028a <HAL_ADC_ConvCpltCallback+0x32>
	else if(hadc == &hadc2)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4a08      	ldr	r2, [pc, #32]	; (800029c <HAL_ADC_ConvCpltCallback+0x44>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d105      	bne.n	800028a <HAL_ADC_ConvCpltCallback+0x32>
		Servo_Trim = HAL_ADC_GetValue(&hadc2);
 800027e:	4807      	ldr	r0, [pc, #28]	; (800029c <HAL_ADC_ConvCpltCallback+0x44>)
 8000280:	f001 f9a6 	bl	80015d0 <HAL_ADC_GetValue>
 8000284:	4603      	mov	r3, r0
 8000286:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <HAL_ADC_ConvCpltCallback+0x48>)
 8000288:	6013      	str	r3, [r2, #0]
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	200000e8 	.word	0x200000e8
 8000298:	2000002c 	.word	0x2000002c
 800029c:	20000030 	.word	0x20000030
 80002a0:	2000028c 	.word	0x2000028c

080002a4 <SetSpeed>:
{
	return VBAT_GAIN*(float)RawValue;
}

void SetSpeed(uint32_t value, uint8_t dir)	//value is a per thousand value of max speed.
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	70fb      	strb	r3, [r7, #3]
	if (dir==0)
 80002b0:	78fb      	ldrb	r3, [r7, #3]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d118      	bne.n	80002e8 <SetSpeed+0x44>
	{
		uint32_t tmpccer;

		/* Get the TIMx CCER register value */
		tmpccer = htim1.Instance->CCER;
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <SetSpeed+0x7c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	6a1b      	ldr	r3, [r3, #32]
 80002bc:	60bb      	str	r3, [r7, #8]

		tmpccer &= ~TIM_CCER_CC2E;
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	f023 0310 	bic.w	r3, r3, #16
 80002c4:	60bb      	str	r3, [r7, #8]
		tmpccer |= TIM_CCER_CC2NE;
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002cc:	60bb      	str	r3, [r7, #8]

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80002ce:	2104      	movs	r1, #4
 80002d0:	4813      	ldr	r0, [pc, #76]	; (8000320 <SetSpeed+0x7c>)
 80002d2:	f003 fff1 	bl	80042b8 <HAL_TIM_PWM_Stop>
		htim1.Instance->CCER = tmpccer;
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <SetSpeed+0x7c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	68ba      	ldr	r2, [r7, #8]
 80002dc:	621a      	str	r2, [r3, #32]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80002de:	2104      	movs	r1, #4
 80002e0:	480f      	ldr	r0, [pc, #60]	; (8000320 <SetSpeed+0x7c>)
 80002e2:	f003 fefd 	bl	80040e0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
		htim1.Instance->CCER = tmpccer;
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	}

}
 80002e6:	e017      	b.n	8000318 <SetSpeed+0x74>
		tmpccer = htim1.Instance->CCER;
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <SetSpeed+0x7c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	6a1b      	ldr	r3, [r3, #32]
 80002ee:	60fb      	str	r3, [r7, #12]
		tmpccer &= ~TIM_CCER_CC2NE;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002f6:	60fb      	str	r3, [r7, #12]
		tmpccer |= TIM_CCER_CC2E;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	60fb      	str	r3, [r7, #12]
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000300:	2104      	movs	r1, #4
 8000302:	4807      	ldr	r0, [pc, #28]	; (8000320 <SetSpeed+0x7c>)
 8000304:	f003 ffd8 	bl	80042b8 <HAL_TIM_PWM_Stop>
		htim1.Instance->CCER = tmpccer;
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <SetSpeed+0x7c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	621a      	str	r2, [r3, #32]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000310:	2104      	movs	r1, #4
 8000312:	4803      	ldr	r0, [pc, #12]	; (8000320 <SetSpeed+0x7c>)
 8000314:	f003 fee4 	bl	80040e0 <HAL_TIM_PWM_Start>
}
 8000318:	bf00      	nop
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	200001bc 	.word	0x200001bc

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000328:	f000 fe66 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032c:	f000 f840 	bl	80003b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000330:	f000 fb34 	bl	800099c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000334:	f000 f89a 	bl	800046c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000338:	f000 f968 	bl	800060c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800033c:	f000 fabe 	bl	80008bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000340:	f000 faec 	bl	800091c <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000344:	f000 f904 	bl	8000550 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000348:	f000 fa1e 	bl	8000788 <MX_TIM3_Init>
  MX_TIM16_Init();
 800034c:	f000 fa90 	bl	8000870 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000350:	4811      	ldr	r0, [pc, #68]	; (8000398 <main+0x74>)
 8000352:	f001 f85d 	bl	8001410 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000356:	2100      	movs	r1, #0
 8000358:	4810      	ldr	r0, [pc, #64]	; (800039c <main+0x78>)
 800035a:	f003 fec1 	bl	80040e0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &gSBUSByte, 1);
 800035e:	2201      	movs	r2, #1
 8000360:	490f      	ldr	r1, [pc, #60]	; (80003a0 <main+0x7c>)
 8000362:	4810      	ldr	r0, [pc, #64]	; (80003a4 <main+0x80>)
 8000364:	f005 f88c 	bl	8005480 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000368:	480f      	ldr	r0, [pc, #60]	; (80003a8 <main+0x84>)
 800036a:	f003 fdfb 	bl	8003f64 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(Motor2_EN_GPIO_Port, Motor2_EN_Pin, 0);
 800036e:	2200      	movs	r2, #0
 8000370:	2140      	movs	r1, #64	; 0x40
 8000372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000376:	f002 facd 	bl	8002914 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2120      	movs	r1, #32
 800037e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000382:	f002 fac7 	bl	8002914 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim1);
 8000386:	4809      	ldr	r0, [pc, #36]	; (80003ac <main+0x88>)
 8000388:	f003 fd98 	bl	8003ebc <HAL_TIM_Base_Start>
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  SetSpeed(0,0);
 800038c:	2100      	movs	r1, #0
 800038e:	2000      	movs	r0, #0
 8000390:	f7ff ff88 	bl	80002a4 <SetSpeed>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000394:	e7fe      	b.n	8000394 <main+0x70>
 8000396:	bf00      	nop
 8000398:	200000e8 	.word	0x200000e8
 800039c:	20000084 	.word	0x20000084
 80003a0:	20000080 	.word	0x20000080
 80003a4:	20000208 	.word	0x20000208
 80003a8:	20000290 	.word	0x20000290
 80003ac:	200001bc 	.word	0x200001bc

080003b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b096      	sub	sp, #88	; 0x58
 80003b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ba:	2228      	movs	r2, #40	; 0x28
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f006 f978 	bl	80066b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c4:	f107 031c 	add.w	r3, r7, #28
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]
 80003e2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e4:	2302      	movs	r3, #2
 80003e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	2301      	movs	r3, #1
 80003ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ec:	2310      	movs	r3, #16
 80003ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f0:	2302      	movs	r3, #2
 80003f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003f4:	2300      	movs	r3, #0
 80003f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80003f8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80003fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000402:	4618      	mov	r0, r3
 8000404:	f002 fa9e 	bl	8002944 <HAL_RCC_OscConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800040e:	f000 fb05 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	230f      	movs	r3, #15
 8000414:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000416:	2302      	movs	r3, #2
 8000418:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041e:	2300      	movs	r3, #0
 8000420:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000426:	f107 031c 	add.w	r3, r7, #28
 800042a:	2101      	movs	r1, #1
 800042c:	4618      	mov	r0, r3
 800042e:	f003 f991 	bl	8003754 <HAL_RCC_ClockConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000438:	f000 faf0 	bl	8000a1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800043c:	f241 0381 	movw	r3, #4225	; 0x1081
 8000440:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800044a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	4618      	mov	r0, r3
 8000454:	f003 fbb4 	bl	8003bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800045e:	f000 fadd 	bl	8000a1c <Error_Handler>
  }
}
 8000462:	bf00      	nop
 8000464:	3758      	adds	r7, #88	; 0x58
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000472:	f107 031c 	add.w	r3, r7, #28
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
 800048c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800048e:	4b2f      	ldr	r3, [pc, #188]	; (800054c <MX_ADC1_Init+0xe0>)
 8000490:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000494:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000496:	4b2d      	ldr	r3, [pc, #180]	; (800054c <MX_ADC1_Init+0xe0>)
 8000498:	2200      	movs	r2, #0
 800049a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800049c:	4b2b      	ldr	r3, [pc, #172]	; (800054c <MX_ADC1_Init+0xe0>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a2:	4b2a      	ldr	r3, [pc, #168]	; (800054c <MX_ADC1_Init+0xe0>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004a8:	4b28      	ldr	r3, [pc, #160]	; (800054c <MX_ADC1_Init+0xe0>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ae:	4b27      	ldr	r3, [pc, #156]	; (800054c <MX_ADC1_Init+0xe0>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004b6:	4b25      	ldr	r3, [pc, #148]	; (800054c <MX_ADC1_Init+0xe0>)
 80004b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80004be:	4b23      	ldr	r3, [pc, #140]	; (800054c <MX_ADC1_Init+0xe0>)
 80004c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <MX_ADC1_Init+0xe0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80004cc:	4b1f      	ldr	r3, [pc, #124]	; (800054c <MX_ADC1_Init+0xe0>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004d2:	4b1e      	ldr	r3, [pc, #120]	; (800054c <MX_ADC1_Init+0xe0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004da:	4b1c      	ldr	r3, [pc, #112]	; (800054c <MX_ADC1_Init+0xe0>)
 80004dc:	2204      	movs	r2, #4
 80004de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004e0:	4b1a      	ldr	r3, [pc, #104]	; (800054c <MX_ADC1_Init+0xe0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004e6:	4b19      	ldr	r3, [pc, #100]	; (800054c <MX_ADC1_Init+0xe0>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004ec:	4817      	ldr	r0, [pc, #92]	; (800054c <MX_ADC1_Init+0xe0>)
 80004ee:	f000 fdfd 	bl	80010ec <HAL_ADC_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80004f8:	f000 fa90 	bl	8000a1c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000500:	f107 031c 	add.w	r3, r7, #28
 8000504:	4619      	mov	r1, r3
 8000506:	4811      	ldr	r0, [pc, #68]	; (800054c <MX_ADC1_Init+0xe0>)
 8000508:	f001 fd7a 	bl	8002000 <HAL_ADCEx_MultiModeConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000512:	f000 fa83 	bl	8000a1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000516:	2302      	movs	r3, #2
 8000518:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800051a:	2301      	movs	r3, #1
 800051c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000522:	2303      	movs	r3, #3
 8000524:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4619      	mov	r1, r3
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <MX_ADC1_Init+0xe0>)
 8000534:	f001 faa2 	bl	8001a7c <HAL_ADC_ConfigChannel>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800053e:	f000 fa6d 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000542:	bf00      	nop
 8000544:	3728      	adds	r7, #40	; 0x28
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	200000e8 	.word	0x200000e8

08000550 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000556:	463b      	mov	r3, r7
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
 8000564:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000566:	4b27      	ldr	r3, [pc, #156]	; (8000604 <MX_ADC2_Init+0xb4>)
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <MX_ADC2_Init+0xb8>)
 800056a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <MX_ADC2_Init+0xb4>)
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000572:	4b24      	ldr	r3, [pc, #144]	; (8000604 <MX_ADC2_Init+0xb4>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <MX_ADC2_Init+0xb4>)
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800057e:	4b21      	ldr	r3, [pc, #132]	; (8000604 <MX_ADC2_Init+0xb4>)
 8000580:	2200      	movs	r2, #0
 8000582:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <MX_ADC2_Init+0xb4>)
 8000586:	2200      	movs	r2, #0
 8000588:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <MX_ADC2_Init+0xb4>)
 800058e:	2200      	movs	r2, #0
 8000590:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <MX_ADC2_Init+0xb4>)
 8000594:	2201      	movs	r2, #1
 8000596:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_ADC2_Init+0xb4>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <MX_ADC2_Init+0xb4>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <MX_ADC2_Init+0xb4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_ADC2_Init+0xb4>)
 80005ae:	2204      	movs	r2, #4
 80005b0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_ADC2_Init+0xb4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_ADC2_Init+0xb4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005be:	4811      	ldr	r0, [pc, #68]	; (8000604 <MX_ADC2_Init+0xb4>)
 80005c0:	f000 fd94 	bl	80010ec <HAL_ADC_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80005ca:	f000 fa27 	bl	8000a1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <MX_ADC2_Init+0xb4>)
 80005ec:	f001 fa46 	bl	8001a7c <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80005f6:	f000 fa11 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000030 	.word	0x20000030
 8000608:	50000100 	.word	0x50000100

0800060c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b09a      	sub	sp, #104	; 0x68
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000612:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000620:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800062c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
 800063c:	615a      	str	r2, [r3, #20]
 800063e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	222c      	movs	r2, #44	; 0x2c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f006 f834 	bl	80066b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800064c:	4b4c      	ldr	r3, [pc, #304]	; (8000780 <MX_TIM1_Init+0x174>)
 800064e:	4a4d      	ldr	r2, [pc, #308]	; (8000784 <MX_TIM1_Init+0x178>)
 8000650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000652:	4b4b      	ldr	r3, [pc, #300]	; (8000780 <MX_TIM1_Init+0x174>)
 8000654:	2200      	movs	r2, #0
 8000656:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000658:	4b49      	ldr	r3, [pc, #292]	; (8000780 <MX_TIM1_Init+0x174>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800065e:	4b48      	ldr	r3, [pc, #288]	; (8000780 <MX_TIM1_Init+0x174>)
 8000660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000664:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000666:	4b46      	ldr	r3, [pc, #280]	; (8000780 <MX_TIM1_Init+0x174>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800066c:	4b44      	ldr	r3, [pc, #272]	; (8000780 <MX_TIM1_Init+0x174>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000672:	4b43      	ldr	r3, [pc, #268]	; (8000780 <MX_TIM1_Init+0x174>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000678:	4841      	ldr	r0, [pc, #260]	; (8000780 <MX_TIM1_Init+0x174>)
 800067a:	f003 fbc7 	bl	8003e0c <HAL_TIM_Base_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000684:	f000 f9ca 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800068e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000692:	4619      	mov	r1, r3
 8000694:	483a      	ldr	r0, [pc, #232]	; (8000780 <MX_TIM1_Init+0x174>)
 8000696:	f004 f8d1 	bl	800483c <HAL_TIM_ConfigClockSource>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006a0:	f000 f9bc 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006a4:	4836      	ldr	r0, [pc, #216]	; (8000780 <MX_TIM1_Init+0x174>)
 80006a6:	f003 fcb9 	bl	800401c <HAL_TIM_PWM_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006b0:	f000 f9b4 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006c4:	4619      	mov	r1, r3
 80006c6:	482e      	ldr	r0, [pc, #184]	; (8000780 <MX_TIM1_Init+0x174>)
 80006c8:	f004 fd88 	bl	80051dc <HAL_TIMEx_MasterConfigSynchronization>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006d2:	f000 f9a3 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d6:	2360      	movs	r3, #96	; 0x60
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006de:	2300      	movs	r3, #0
 80006e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006e2:	2300      	movs	r3, #0
 80006e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80006ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f8:	2200      	movs	r2, #0
 80006fa:	4619      	mov	r1, r3
 80006fc:	4820      	ldr	r0, [pc, #128]	; (8000780 <MX_TIM1_Init+0x174>)
 80006fe:	f003 ff89 	bl	8004614 <HAL_TIM_PWM_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000708:	f000 f988 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.Pulse = 250;
 800070c:	23fa      	movs	r3, #250	; 0xfa
 800070e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000710:	2300      	movs	r3, #0
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000718:	2204      	movs	r2, #4
 800071a:	4619      	mov	r1, r3
 800071c:	4818      	ldr	r0, [pc, #96]	; (8000780 <MX_TIM1_Init+0x174>)
 800071e:	f003 ff79 	bl	8004614 <HAL_TIM_PWM_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000728:	f000 f978 	bl	8000a1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000744:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800074e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4619      	mov	r1, r3
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <MX_TIM1_Init+0x174>)
 8000762:	f004 fda9 	bl	80052b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 800076c:	f000 f956 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <MX_TIM1_Init+0x174>)
 8000772:	f000 fad9 	bl	8000d28 <HAL_TIM_MspPostInit>

}
 8000776:	bf00      	nop
 8000778:	3768      	adds	r7, #104	; 0x68
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200001bc 	.word	0x200001bc
 8000784:	40012c00 	.word	0x40012c00

08000788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	; 0x38
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ba:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <MX_TIM3_Init+0xe0>)
 80007bc:	4a2b      	ldr	r2, [pc, #172]	; (800086c <MX_TIM3_Init+0xe4>)
 80007be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <MX_TIM3_Init+0xe0>)
 80007c2:	2210      	movs	r2, #16
 80007c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <MX_TIM3_Init+0xe0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_TIM3_Init+0xe0>)
 80007ce:	2232      	movs	r2, #50	; 0x32
 80007d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <MX_TIM3_Init+0xe0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_TIM3_Init+0xe0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007de:	4822      	ldr	r0, [pc, #136]	; (8000868 <MX_TIM3_Init+0xe0>)
 80007e0:	f003 fb14 	bl	8003e0c <HAL_TIM_Base_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80007ea:	f000 f917 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f8:	4619      	mov	r1, r3
 80007fa:	481b      	ldr	r0, [pc, #108]	; (8000868 <MX_TIM3_Init+0xe0>)
 80007fc:	f004 f81e 	bl	800483c <HAL_TIM_ConfigClockSource>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000806:	f000 f909 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800080a:	4817      	ldr	r0, [pc, #92]	; (8000868 <MX_TIM3_Init+0xe0>)
 800080c:	f003 fc06 	bl	800401c <HAL_TIM_PWM_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000816:	f000 f901 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800081a:	2320      	movs	r3, #32
 800081c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <MX_TIM3_Init+0xe0>)
 800082a:	f004 fcd7 	bl	80051dc <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000834:	f000 f8f2 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000838:	2360      	movs	r3, #96	; 0x60
 800083a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_TIM3_Init+0xe0>)
 8000850:	f003 fee0 	bl	8004614 <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800085a:	f000 f8df 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3738      	adds	r7, #56	; 0x38
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000084 	.word	0x20000084
 800086c:	40000400 	.word	0x40000400

08000870 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_TIM16_Init+0x44>)
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <MX_TIM16_Init+0x48>)
 8000878:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_TIM16_Init+0x44>)
 800087c:	221f      	movs	r2, #31
 800087e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_TIM16_Init+0x44>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_TIM16_Init+0x44>)
 8000888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800088c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_TIM16_Init+0x44>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_TIM16_Init+0x44>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_TIM16_Init+0x44>)
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_TIM16_Init+0x44>)
 80008a2:	f003 fab3 	bl	8003e0c <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80008ac:	f000 f8b6 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000290 	.word	0x20000290
 80008b8:	40014400 	.word	0x40014400

080008bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008c2:	4a15      	ldr	r2, [pc, #84]	; (8000918 <MX_USART1_UART_Init+0x5c>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008c8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USART1_UART_Init+0x58>)
 8000900:	f004 fd70 	bl	80053e4 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 f887 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000138 	.word	0x20000138
 8000918:	40013800 	.word	0x40013800

0800091c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_USART2_UART_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_USART2_UART_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_USART2_UART_Init+0x74>)
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <MX_USART2_UART_Init+0x7c>)
 800092a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_USART2_UART_Init+0x74>)
 800092e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_USART2_UART_Init+0x74>)
 8000936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_USART2_UART_Init+0x74>)
 800093e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_USART2_UART_Init+0x74>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART2_UART_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_USART2_UART_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART2_UART_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART2_UART_Init+0x74>)
 800095e:	2232      	movs	r2, #50	; 0x32
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
                              |UART_ADVFEATURE_DMADISABLEONERROR_INIT;
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART2_UART_Init+0x74>)
 8000964:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART2_UART_Init+0x74>)
 800096c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000970:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_USART2_UART_Init+0x74>)
 8000974:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000978:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART2_UART_Init+0x74>)
 800097c:	f004 fd32 	bl	80053e4 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 f849 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000208 	.word	0x20000208
 8000994:	40004400 	.word	0x40004400
 8000998:	000186a0 	.word	0x000186a0

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <MX_GPIO_Init+0x7c>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <MX_GPIO_Init+0x7c>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_GPIO_Init+0x7c>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_GPIO_Init+0x7c>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_GPIO_Init+0x7c>)
 80009d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d4:	6153      	str	r3, [r2, #20]
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_GPIO_Init+0x7c>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor1_EN_Pin|Motor2_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 6106 	mov.w	r1, #2144	; 0x860
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f001 ff92 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_EN_Pin Motor2_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = Motor1_EN_Pin|Motor2_EN_Pin|LED_Pin;
 80009f0:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80009f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f001 fe10 	bl	8002630 <HAL_GPIO_Init>

}
 8000a10:	bf00      	nop
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <SBUS_AddByte>:
	return 0;
}


uint32_t SBUS_AddByte(uint8_t Byte)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	if (gByteBufferIndex < SBUS_FRAME_SIZE)
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <SBUS_AddByte+0x38>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b18      	cmp	r3, #24
 8000a38:	d809      	bhi.n	8000a4e <SBUS_AddByte+0x26>
		gByteBuffer[gByteBufferIndex++] = Byte;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <SBUS_AddByte+0x38>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	b2d1      	uxtb	r1, r2
 8000a42:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <SBUS_AddByte+0x38>)
 8000a44:	7011      	strb	r1, [r2, #0]
 8000a46:	4619      	mov	r1, r3
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <SBUS_AddByte+0x3c>)
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	5453      	strb	r3, [r2, r1]

	return gByteBufferIndex;
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <SBUS_AddByte+0x38>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	200002dc 	.word	0x200002dc
 8000a64:	200002e0 	.word	0x200002e0

08000a68 <SBUS_GetChannel>:


uint32_t SBUS_GetChannel(struct sbuschannels *pChannels)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	if (NULL == pChannels)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <SBUS_GetChannel+0x12>
		return FRAME_PENDING;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e030      	b.n	8000adc <SBUS_GetChannel+0x74>

	// Enough byte received
	if (gByteBufferIndex == SBUS_FRAME_SIZE)
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <SBUS_GetChannel+0x7c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b19      	cmp	r3, #25
 8000a80:	d12b      	bne.n	8000ada <SBUS_GetChannel+0x72>
	{
		// Frame with Header and Footer?
		struct sbusframe *pFrame = (struct sbusframe *) gByteBuffer;
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <SBUS_GetChannel+0x80>)
 8000a84:	60bb      	str	r3, [r7, #8]

		if (pFrame->Header == SBUS_HEADER && pFrame->Footer == SBUS_FOOTER)
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	d125      	bne.n	8000ada <SBUS_GetChannel+0x72>
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	7e1b      	ldrb	r3, [r3, #24]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d121      	bne.n	8000ada <SBUS_GetChannel+0x72>
		{
			uint32_t ret = FRAME_COMPLETE;
 8000a96:	2301      	movs	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]

			// Return the frame
			memcpy(&pChannels[0], &gByteBuffer[1], sizeof(struct sbuschannels));
 8000a9a:	2217      	movs	r2, #23
 8000a9c:	4913      	ldr	r1, [pc, #76]	; (8000aec <SBUS_GetChannel+0x84>)
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f005 fdfa 	bl	8006698 <memcpy>

			// Check for frame errors
			if (pChannels->FrameLost)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7d9b      	ldrb	r3, [r3, #22]
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <SBUS_GetChannel+0x52>
				ret |= FRAME_DROPPED;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	60fb      	str	r3, [r7, #12]

			if (pChannels->FailSafe)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7d9b      	ldrb	r3, [r3, #22]
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <SBUS_GetChannel+0x68>
				ret |= FRAME_FAILSAFE;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	60fb      	str	r3, [r7, #12]
//					pChannels->FailSafe,
//					pChannels->FrameLost);
//			CDC_Transmit_FS((uint8_t *)Str, strlen(Str));

			// Reset byte buffer
			gByteBufferIndex = 0;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SBUS_GetChannel+0x7c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]

			return ret;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	e000      	b.n	8000adc <SBUS_GetChannel+0x74>
		}
	}

	return FRAME_PENDING;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200002dc 	.word	0x200002dc
 8000ae8:	200002e0 	.word	0x200002e0
 8000aec:	200002e1 	.word	0x200002e1

08000af0 <SBUS_TimeoutCallback>:

	return ((int32_t) ChannelValue * ScaleA + ScaleB) / ScaleD;
}

void SBUS_TimeoutCallback(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
	// Reset byte buffer
	gByteBufferIndex = 0;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <SBUS_TimeoutCallback+0x14>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	200002dc 	.word	0x200002dc

08000b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x44>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x44>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x44>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b70:	d136      	bne.n	8000be0 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b72:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <HAL_ADC_MspInit+0x110>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a39      	ldr	r2, [pc, #228]	; (8000c60 <HAL_ADC_MspInit+0x110>)
 8000b7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b7c:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <HAL_ADC_MspInit+0x110>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d10b      	bne.n	8000b9c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b84:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <HAL_ADC_MspInit+0x114>)
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	4a36      	ldr	r2, [pc, #216]	; (8000c64 <HAL_ADC_MspInit+0x114>)
 8000b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	6153      	str	r3, [r2, #20]
 8000b90:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <HAL_ADC_MspInit+0x114>)
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <HAL_ADC_MspInit+0x114>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	4a30      	ldr	r2, [pc, #192]	; (8000c64 <HAL_ADC_MspInit+0x114>)
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba6:	6153      	str	r3, [r2, #20]
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <HAL_ADC_MspInit+0x114>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Servo_FB_Pin|Vbat_Meas_Pin;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f001 fd31 	bl	8002630 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2012      	movs	r0, #18
 8000bd4:	f001 fc7f 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bd8:	2012      	movs	r0, #18
 8000bda:	f001 fc98 	bl	800250e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bde:	e03a      	b.n	8000c56 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a20      	ldr	r2, [pc, #128]	; (8000c68 <HAL_ADC_MspInit+0x118>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d135      	bne.n	8000c56 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <HAL_ADC_MspInit+0x110>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <HAL_ADC_MspInit+0x110>)
 8000bf2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <HAL_ADC_MspInit+0x110>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d10b      	bne.n	8000c14 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_ADC_MspInit+0x114>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <HAL_ADC_MspInit+0x114>)
 8000c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c06:	6153      	str	r3, [r2, #20]
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_ADC_MspInit+0x114>)
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <HAL_ADC_MspInit+0x114>)
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <HAL_ADC_MspInit+0x114>)
 8000c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1e:	6153      	str	r3, [r2, #20]
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_ADC_MspInit+0x114>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Trim_Pin;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c30:	2303      	movs	r3, #3
 8000c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo_Trim_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c42:	f001 fcf5 	bl	8002630 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2012      	movs	r0, #18
 8000c4c:	f001 fc43 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c50:	2012      	movs	r0, #18
 8000c52:	f001 fc5c 	bl	800250e <HAL_NVIC_EnableIRQ>
}
 8000c56:	bf00      	nop
 8000c58:	3730      	adds	r7, #48	; 0x30
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000028 	.word	0x20000028
 8000c64:	40021000 	.word	0x40021000
 8000c68:	50000100 	.word	0x50000100

08000c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a27      	ldr	r2, [pc, #156]	; (8000d18 <HAL_TIM_Base_MspInit+0xac>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d114      	bne.n	8000ca8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c7e:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <HAL_TIM_Base_MspInit+0xb0>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	4a26      	ldr	r2, [pc, #152]	; (8000d1c <HAL_TIM_Base_MspInit+0xb0>)
 8000c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c88:	6193      	str	r3, [r2, #24]
 8000c8a:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <HAL_TIM_Base_MspInit+0xb0>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2019      	movs	r0, #25
 8000c9c:	f001 fc1b 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ca0:	2019      	movs	r0, #25
 8000ca2:	f001 fc34 	bl	800250e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000ca6:	e032      	b.n	8000d0e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <HAL_TIM_Base_MspInit+0xb4>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d114      	bne.n	8000cdc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_TIM_Base_MspInit+0xb0>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_TIM_Base_MspInit+0xb0>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_TIM_Base_MspInit+0xb0>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	201d      	movs	r0, #29
 8000cd0:	f001 fc01 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cd4:	201d      	movs	r0, #29
 8000cd6:	f001 fc1a 	bl	800250e <HAL_NVIC_EnableIRQ>
}
 8000cda:	e018      	b.n	8000d0e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <HAL_TIM_Base_MspInit+0xb8>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d113      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_TIM_Base_MspInit+0xb0>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <HAL_TIM_Base_MspInit+0xb0>)
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_TIM_Base_MspInit+0xb0>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2019      	movs	r0, #25
 8000d04:	f001 fbe7 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d08:	2019      	movs	r0, #25
 8000d0a:	f001 fc00 	bl	800250e <HAL_NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40012c00 	.word	0x40012c00
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40000400 	.word	0x40000400
 8000d24:	40014400 	.word	0x40014400

08000d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <HAL_TIM_MspPostInit+0xa0>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d139      	bne.n	8000dbe <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <HAL_TIM_MspPostInit+0xa4>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	4a1f      	ldr	r2, [pc, #124]	; (8000dcc <HAL_TIM_MspPostInit+0xa4>)
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	6153      	str	r3, [r2, #20]
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_TIM_MspPostInit+0xa4>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_TIM_MspPostInit+0xa4>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <HAL_TIM_MspPostInit+0xa4>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6c:	6153      	str	r3, [r2, #20]
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_TIM_MspPostInit+0xa4>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor1_2_Pin|Motor1_1_Pin|GPIO_PIN_9;
 8000d7a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f001 fc49 	bl	8002630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000dae:	2306      	movs	r3, #6
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_TIM_MspPostInit+0xa8>)
 8000dba:	f001 fc39 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40012c00 	.word	0x40012c00
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000400 	.word	0x48000400

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	; 0x30
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a32      	ldr	r2, [pc, #200]	; (8000ebc <HAL_UART_MspInit+0xe8>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d128      	bne.n	8000e48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df6:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <HAL_UART_MspInit+0xec>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	4a31      	ldr	r2, [pc, #196]	; (8000ec0 <HAL_UART_MspInit+0xec>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6193      	str	r3, [r2, #24]
 8000e02:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <HAL_UART_MspInit+0xec>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <HAL_UART_MspInit+0xec>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	4a2b      	ldr	r2, [pc, #172]	; (8000ec0 <HAL_UART_MspInit+0xec>)
 8000e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e18:	6153      	str	r3, [r2, #20]
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <HAL_UART_MspInit+0xec>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e26:	23c0      	movs	r3, #192	; 0xc0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e36:	2307      	movs	r3, #7
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4820      	ldr	r0, [pc, #128]	; (8000ec4 <HAL_UART_MspInit+0xf0>)
 8000e42:	f001 fbf5 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e46:	e035      	b.n	8000eb4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <HAL_UART_MspInit+0xf4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d130      	bne.n	8000eb4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_UART_MspInit+0xec>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <HAL_UART_MspInit+0xec>)
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	61d3      	str	r3, [r2, #28]
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_UART_MspInit+0xec>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_UART_MspInit+0xec>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <HAL_UART_MspInit+0xec>)
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	6153      	str	r3, [r2, #20]
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_UART_MspInit+0xec>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e82:	230c      	movs	r3, #12
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e92:	2307      	movs	r3, #7
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f001 fbc6 	bl	8002630 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2026      	movs	r0, #38	; 0x26
 8000eaa:	f001 fb14 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eae:	2026      	movs	r0, #38	; 0x26
 8000eb0:	f001 fb2d 	bl	800250e <HAL_NVIC_EnableIRQ>
}
 8000eb4:	bf00      	nop
 8000eb6:	3730      	adds	r7, #48	; 0x30
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	40004400 	.word	0x40004400

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 f8b4 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <ADC1_2_IRQHandler+0x14>)
 8000f26:	f000 fb61 	bl	80015ec <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <ADC1_2_IRQHandler+0x18>)
 8000f2c:	f000 fb5e 	bl	80015ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200000e8 	.word	0x200000e8
 8000f38:	20000030 	.word	0x20000030

08000f3c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f40:	4803      	ldr	r0, [pc, #12]	; (8000f50 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000f42:	f003 fa47 	bl	80043d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000f48:	f003 fa44 	bl	80043d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200001bc 	.word	0x200001bc
 8000f54:	20000290 	.word	0x20000290

08000f58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <TIM3_IRQHandler+0x10>)
 8000f5e:	f003 fa39 	bl	80043d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000084 	.word	0x20000084

08000f6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <USART2_IRQHandler+0x10>)
 8000f72:	f004 fad3 	bl	800551c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000208 	.word	0x20000208

08000f80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fdc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000faa:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <LoopForever+0xe>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc0:	4c0b      	ldr	r4, [pc, #44]	; (8000ff0 <LoopForever+0x16>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fce:	f7ff ffd7 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f005 fb3d 	bl	8006650 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fd6:	f7ff f9a5 	bl	8000324 <main>

08000fda <LoopForever>:

LoopForever:
    b LoopForever
 8000fda:	e7fe      	b.n	8000fda <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fdc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fe8:	0800671c 	.word	0x0800671c
  ldr r2, =_sbss
 8000fec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ff0:	20000300 	.word	0x20000300

08000ff4 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <CAN_RX0_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_Init+0x28>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_Init+0x28>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f001 fa59 	bl	80024c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f808 	bl	8001024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fd78 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000

08001024 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x54>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x58>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fa71 	bl	800252a <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f001 fa39 	bl	80024d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_InitTick+0x5c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	20000008 	.word	0x20000008
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	200002fc 	.word	0x200002fc

080010ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200002fc 	.word	0x200002fc

080010c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b09a      	sub	sp, #104	; 0x68
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e172      	b.n	80013f2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	2b00      	cmp	r3, #0
 800111c:	d176      	bne.n	800120c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	2b00      	cmp	r3, #0
 8001124:	d152      	bne.n	80011cc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fd05 	bl	8000b50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d13b      	bne.n	80011cc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f001 f87d 	bl	8002254 <ADC_Disable>
 800115a:	4603      	mov	r3, r0
 800115c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	2b00      	cmp	r3, #0
 800116a:	d12f      	bne.n	80011cc <HAL_ADC_Init+0xe0>
 800116c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001170:	2b00      	cmp	r3, #0
 8001172:	d12b      	bne.n	80011cc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800117c:	f023 0302 	bic.w	r3, r3, #2
 8001180:	f043 0202 	orr.w	r2, r3, #2
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001196:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011a8:	4b94      	ldr	r3, [pc, #592]	; (80013fc <HAL_ADC_Init+0x310>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a94      	ldr	r2, [pc, #592]	; (8001400 <HAL_ADC_Init+0x314>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	0c9a      	lsrs	r2, r3, #18
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011be:	e002      	b.n	80011c6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f9      	bne.n	80011c0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011e8:	d110      	bne.n	800120c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f023 0312 	bic.w	r3, r3, #18
 80011f2:	f043 0210 	orr.w	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f043 0201 	orr.w	r2, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	2b00      	cmp	r3, #0
 8001216:	f040 80df 	bne.w	80013d8 <HAL_ADC_Init+0x2ec>
 800121a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800121e:	2b00      	cmp	r3, #0
 8001220:	f040 80da 	bne.w	80013d8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 80d2 	bne.w	80013d8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800123c:	f043 0202 	orr.w	r2, r3, #2
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001244:	4b6f      	ldr	r3, [pc, #444]	; (8001404 <HAL_ADC_Init+0x318>)
 8001246:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001250:	d102      	bne.n	8001258 <HAL_ADC_Init+0x16c>
 8001252:	4b6d      	ldr	r3, [pc, #436]	; (8001408 <HAL_ADC_Init+0x31c>)
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e002      	b.n	800125e <HAL_ADC_Init+0x172>
 8001258:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800125c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d108      	bne.n	800127e <HAL_ADC_Init+0x192>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b01      	cmp	r3, #1
 8001278:	d101      	bne.n	800127e <HAL_ADC_Init+0x192>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_ADC_Init+0x194>
 800127e:	2300      	movs	r3, #0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11c      	bne.n	80012be <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001284:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001286:	2b00      	cmp	r3, #0
 8001288:	d010      	beq.n	80012ac <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d107      	bne.n	80012a6 <HAL_ADC_Init+0x1ba>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_ADC_Init+0x1ba>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_ADC_Init+0x1bc>
 80012a6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d108      	bne.n	80012be <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80012ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	431a      	orrs	r2, r3
 80012ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012bc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7e5b      	ldrb	r3, [r3, #25]
 80012c2:	035b      	lsls	r3, r3, #13
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012c8:	2a01      	cmp	r2, #1
 80012ca:	d002      	beq.n	80012d2 <HAL_ADC_Init+0x1e6>
 80012cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012d0:	e000      	b.n	80012d4 <HAL_ADC_Init+0x1e8>
 80012d2:	2200      	movs	r2, #0
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012e4:	4313      	orrs	r3, r2
 80012e6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d11b      	bne.n	800132a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7e5b      	ldrb	r3, [r3, #25]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	3b01      	subs	r3, #1
 8001300:	045a      	lsls	r2, r3, #17
 8001302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001304:	4313      	orrs	r3, r2
 8001306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130a:	663b      	str	r3, [r7, #96]	; 0x60
 800130c:	e00d      	b.n	800132a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001316:	f043 0220 	orr.w	r2, r3, #32
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	2b01      	cmp	r3, #1
 8001330:	d007      	beq.n	8001342 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	4313      	orrs	r3, r2
 800133c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800133e:	4313      	orrs	r3, r2
 8001340:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b00      	cmp	r3, #0
 800134e:	d114      	bne.n	800137a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800135e:	f023 0302 	bic.w	r3, r3, #2
 8001362:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7e1b      	ldrb	r3, [r3, #24]
 8001368:	039a      	lsls	r2, r3, #14
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4313      	orrs	r3, r2
 8001374:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001376:	4313      	orrs	r3, r2
 8001378:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <HAL_ADC_Init+0x320>)
 8001382:	4013      	ands	r3, r2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800138a:	430b      	orrs	r3, r1
 800138c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d10c      	bne.n	80013b0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	f023 010f 	bic.w	r1, r3, #15
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
 80013ae:	e007      	b.n	80013c0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 020f 	bic.w	r2, r2, #15
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f023 0303 	bic.w	r3, r3, #3
 80013ce:	f043 0201 	orr.w	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40
 80013d6:	e00a      	b.n	80013ee <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f023 0312 	bic.w	r3, r3, #18
 80013e0:	f043 0210 	orr.w	r2, r3, #16
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80013e8:	2301      	movs	r3, #1
 80013ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80013ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3768      	adds	r7, #104	; 0x68
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000000 	.word	0x20000000
 8001400:	431bde83 	.word	0x431bde83
 8001404:	50000300 	.word	0x50000300
 8001408:	50000100 	.word	0x50000100
 800140c:	fff0c007 	.word	0xfff0c007

08001410 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 80c6 	bne.w	80015b8 <HAL_ADC_Start_IT+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_ADC_Start_IT+0x2a>
 8001436:	2302      	movs	r3, #2
 8001438:	e0c1      	b.n	80015be <HAL_ADC_Start_IT+0x1ae>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 fea2 	bl	800218c <ADC_Enable>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 80ad 	bne.w	80015ae <HAL_ADC_Start_IT+0x19e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800145c:	f023 0301 	bic.w	r3, r3, #1
 8001460:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001468:	4b57      	ldr	r3, [pc, #348]	; (80015c8 <HAL_ADC_Start_IT+0x1b8>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	2b00      	cmp	r3, #0
 8001472:	d004      	beq.n	800147e <HAL_ADC_Start_IT+0x6e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800147c:	d115      	bne.n	80014aa <HAL_ADC_Start_IT+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d027      	beq.n	80014e8 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014a8:	e01e      	b.n	80014e8 <HAL_ADC_Start_IT+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014be:	d004      	beq.n	80014ca <HAL_ADC_Start_IT+0xba>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a41      	ldr	r2, [pc, #260]	; (80015cc <HAL_ADC_Start_IT+0x1bc>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10e      	bne.n	80014e8 <HAL_ADC_Start_IT+0xd8>
 80014ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f4:	d106      	bne.n	8001504 <HAL_ADC_Start_IT+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f023 0206 	bic.w	r2, r3, #6
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	645a      	str	r2, [r3, #68]	; 0x44
 8001502:	e002      	b.n	800150a <HAL_ADC_Start_IT+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	221c      	movs	r2, #28
 8001518:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	2b08      	cmp	r3, #8
 8001520:	d110      	bne.n	8001544 <HAL_ADC_Start_IT+0x134>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0204 	bic.w	r2, r2, #4
 8001530:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0208 	orr.w	r2, r2, #8
 8001540:	605a      	str	r2, [r3, #4]
          break;
 8001542:	e008      	b.n	8001556 <HAL_ADC_Start_IT+0x146>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 020c 	orr.w	r2, r2, #12
 8001552:	605a      	str	r2, [r3, #4]
          break;
 8001554:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155a:	2b01      	cmp	r3, #1
 800155c:	d107      	bne.n	800156e <HAL_ADC_Start_IT+0x15e>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0210 	bic.w	r2, r2, #16
 800156c:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <HAL_ADC_Start_IT+0x1b8>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	2b00      	cmp	r3, #0
 8001578:	d010      	beq.n	800159c <HAL_ADC_Start_IT+0x18c>
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HAL_ADC_Start_IT+0x1b8>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 031f 	and.w	r3, r3, #31
 8001582:	2b05      	cmp	r3, #5
 8001584:	d00a      	beq.n	800159c <HAL_ADC_Start_IT+0x18c>
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_ADC_Start_IT+0x1b8>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	2b09      	cmp	r3, #9
 8001590:	d004      	beq.n	800159c <HAL_ADC_Start_IT+0x18c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800159a:	d10f      	bne.n	80015bc <HAL_ADC_Start_IT+0x1ac>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0204 	orr.w	r2, r2, #4
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	e006      	b.n	80015bc <HAL_ADC_Start_IT+0x1ac>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015b6:	e001      	b.n	80015bc <HAL_ADC_Start_IT+0x1ac>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015b8:	2302      	movs	r3, #2
 80015ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	50000300 	.word	0x50000300
 80015cc:	50000100 	.word	0x50000100

080015d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b04      	cmp	r3, #4
 800160c:	d106      	bne.n	800161c <HAL_ADC_IRQHandler+0x30>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b04      	cmp	r3, #4
 800161a:	d00d      	beq.n	8001638 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001626:	2b08      	cmp	r3, #8
 8001628:	d17a      	bne.n	8001720 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b08      	cmp	r3, #8
 8001636:	d173      	bne.n	8001720 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001650:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_ADC_IRQHandler+0x288>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	2b00      	cmp	r3, #0
 800165a:	d010      	beq.n	800167e <HAL_ADC_IRQHandler+0x92>
 800165c:	4b85      	ldr	r3, [pc, #532]	; (8001874 <HAL_ADC_IRQHandler+0x288>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	2b05      	cmp	r3, #5
 8001666:	d00a      	beq.n	800167e <HAL_ADC_IRQHandler+0x92>
 8001668:	4b82      	ldr	r3, [pc, #520]	; (8001874 <HAL_ADC_IRQHandler+0x288>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	2b09      	cmp	r3, #9
 8001672:	d004      	beq.n	800167e <HAL_ADC_IRQHandler+0x92>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800167c:	d104      	bne.n	8001688 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	e003      	b.n	8001690 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001688:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800169a:	2b00      	cmp	r3, #0
 800169c:	d139      	bne.n	8001712 <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d134      	bne.n	8001712 <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d12d      	bne.n	8001712 <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d11a      	bne.n	80016fa <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 020c 	bic.w	r2, r2, #12
 80016d2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d112      	bne.n	8001712 <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f043 0201 	orr.w	r2, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
 80016f8:	e00b      	b.n	8001712 <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f043 0210 	orr.w	r2, r3, #16
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7fe fda0 	bl	8000258 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	220c      	movs	r2, #12
 800171e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	2b20      	cmp	r3, #32
 800172c:	d106      	bne.n	800173c <HAL_ADC_IRQHandler+0x150>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0320 	and.w	r3, r3, #32
 8001738:	2b20      	cmp	r3, #32
 800173a:	d00f      	beq.n	800175c <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001746:	2b40      	cmp	r3, #64	; 0x40
 8001748:	f040 80a9 	bne.w	800189e <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001756:	2b40      	cmp	r3, #64	; 0x40
 8001758:	f040 80a1 	bne.w	800189e <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001768:	4b42      	ldr	r3, [pc, #264]	; (8001874 <HAL_ADC_IRQHandler+0x288>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2b00      	cmp	r3, #0
 8001772:	d010      	beq.n	8001796 <HAL_ADC_IRQHandler+0x1aa>
 8001774:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <HAL_ADC_IRQHandler+0x288>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	2b05      	cmp	r3, #5
 800177e:	d00a      	beq.n	8001796 <HAL_ADC_IRQHandler+0x1aa>
 8001780:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <HAL_ADC_IRQHandler+0x288>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	2b09      	cmp	r3, #9
 800178a:	d004      	beq.n	8001796 <HAL_ADC_IRQHandler+0x1aa>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001794:	d104      	bne.n	80017a0 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	e003      	b.n	80017a8 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80017a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d16c      	bne.n	8001890 <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00b      	beq.n	80017d8 <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d160      	bne.n	8001890 <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d15b      	bne.n	8001890 <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e2:	2b40      	cmp	r3, #64	; 0x40
 80017e4:	d154      	bne.n	8001890 <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80017e6:	4b23      	ldr	r3, [pc, #140]	; (8001874 <HAL_ADC_IRQHandler+0x288>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d010      	beq.n	8001814 <HAL_ADC_IRQHandler+0x228>
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_ADC_IRQHandler+0x288>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d00a      	beq.n	8001814 <HAL_ADC_IRQHandler+0x228>
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_ADC_IRQHandler+0x288>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2b07      	cmp	r3, #7
 8001808:	d004      	beq.n	8001814 <HAL_ADC_IRQHandler+0x228>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001812:	d104      	bne.n	800181e <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e003      	b.n	8001826 <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800181e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d12f      	bne.n	8001890 <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d11c      	bne.n	8001878 <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800184c:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d114      	bne.n	8001890 <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
 8001872:	e00d      	b.n	8001890 <HAL_ADC_IRQHandler+0x2a4>
 8001874:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f043 0210 	orr.w	r2, r3, #16
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001888:	f043 0201 	orr.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f8cb 	bl	8001a2c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2260      	movs	r2, #96	; 0x60
 800189c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a8:	2b80      	cmp	r3, #128	; 0x80
 80018aa:	d113      	bne.n	80018d4 <HAL_ADC_IRQHandler+0x2e8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	2b80      	cmp	r3, #128	; 0x80
 80018b8:	d10c      	bne.n	80018d4 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fbfc 	bl	80010c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018e2:	d115      	bne.n	8001910 <HAL_ADC_IRQHandler+0x324>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f2:	d10d      	bne.n	8001910 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f8a7 	bl	8001a54 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190e:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800191a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800191e:	d115      	bne.n	800194c <HAL_ADC_IRQHandler+0x360>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800192a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800192e:	d10d      	bne.n	800194c <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f893 	bl	8001a68 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b10      	cmp	r3, #16
 8001958:	d13d      	bne.n	80019d6 <HAL_ADC_IRQHandler+0x3ea>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	2b10      	cmp	r3, #16
 8001966:	d136      	bne.n	80019d6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196c:	2b01      	cmp	r3, #1
 800196e:	d102      	bne.n	8001976 <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 8001970:	2301      	movs	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	e019      	b.n	80019aa <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001976:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_ADC_IRQHandler+0x43c>)
 8001978:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d10a      	bne.n	80019aa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8001994:	2301      	movs	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e007      	b.n	80019aa <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80019a6:	2301      	movs	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d10e      	bne.n	80019ce <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	f043 0202 	orr.w	r2, r3, #2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fb85 	bl	80010d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2210      	movs	r2, #16
 80019d4:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e4:	d11b      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x432>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f4:	d113      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f043 0208 	orr.w	r2, r3, #8
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a16:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f811 	bl	8001a40 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	50000300 	.word	0x50000300

08001a2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b09b      	sub	sp, #108	; 0x6c
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x22>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e2a5      	b.n	8001fea <HAL_ADC_ConfigChannel+0x56e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f040 8289 	bne.w	8001fc8 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d81c      	bhi.n	8001af8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	231f      	movs	r3, #31
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	4019      	ands	r1, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa00 f203 	lsl.w	r2, r0, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
 8001af6:	e063      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	d81e      	bhi.n	8001b3e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	3b1e      	subs	r3, #30
 8001b14:	221f      	movs	r2, #31
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	4019      	ands	r1, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	3b1e      	subs	r3, #30
 8001b30:	fa00 f203 	lsl.w	r2, r0, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b3c:	e040      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b0e      	cmp	r3, #14
 8001b44:	d81e      	bhi.n	8001b84 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	3b3c      	subs	r3, #60	; 0x3c
 8001b5a:	221f      	movs	r2, #31
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	4019      	ands	r1, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	3b3c      	subs	r3, #60	; 0x3c
 8001b76:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	639a      	str	r2, [r3, #56]	; 0x38
 8001b82:	e01d      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	3b5a      	subs	r3, #90	; 0x5a
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	4019      	ands	r1, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	3b5a      	subs	r3, #90	; 0x5a
 8001bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 80e5 	bne.w	8001d9a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b09      	cmp	r3, #9
 8001bd6:	d91c      	bls.n	8001c12 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6999      	ldr	r1, [r3, #24]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	3b1e      	subs	r3, #30
 8001bea:	2207      	movs	r2, #7
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4019      	ands	r1, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6898      	ldr	r0, [r3, #8]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	3b1e      	subs	r3, #30
 8001c04:	fa00 f203 	lsl.w	r2, r0, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	619a      	str	r2, [r3, #24]
 8001c10:	e019      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6959      	ldr	r1, [r3, #20]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	2207      	movs	r2, #7
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	4019      	ands	r1, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	6898      	ldr	r0, [r3, #8]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	08db      	lsrs	r3, r3, #3
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d84f      	bhi.n	8001d08 <HAL_ADC_ConfigChannel+0x28c>
 8001c68:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <HAL_ADC_ConfigChannel+0x1f4>)
 8001c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6e:	bf00      	nop
 8001c70:	08001c81 	.word	0x08001c81
 8001c74:	08001ca3 	.word	0x08001ca3
 8001c78:	08001cc5 	.word	0x08001cc5
 8001c7c:	08001ce7 	.word	0x08001ce7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c86:	4b9e      	ldr	r3, [pc, #632]	; (8001f00 <HAL_ADC_ConfigChannel+0x484>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	0691      	lsls	r1, r2, #26
 8001c90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c92:	430a      	orrs	r2, r1
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c9e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ca0:	e07e      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ca8:	4b95      	ldr	r3, [pc, #596]	; (8001f00 <HAL_ADC_ConfigChannel+0x484>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	0691      	lsls	r1, r2, #26
 8001cb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cc0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cc2:	e06d      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cca:	4b8d      	ldr	r3, [pc, #564]	; (8001f00 <HAL_ADC_ConfigChannel+0x484>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	0691      	lsls	r1, r2, #26
 8001cd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ce2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ce4:	e05c      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cec:	4b84      	ldr	r3, [pc, #528]	; (8001f00 <HAL_ADC_ConfigChannel+0x484>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	0691      	lsls	r1, r2, #26
 8001cf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d04:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d06:	e04b      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	069b      	lsls	r3, r3, #26
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d107      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d2a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	069b      	lsls	r3, r3, #26
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d107      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d4e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	069b      	lsls	r3, r3, #26
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d107      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d72:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	069b      	lsls	r3, r3, #26
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d10a      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d96:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001d98:	e001      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001d9a:	bf00      	nop
 8001d9c:	e000      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001d9e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d108      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x344>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x344>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x346>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 810b 	bne.w	8001fde <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d00f      	beq.n	8001df0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	400a      	ands	r2, r1
 8001dea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001dee:	e049      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b09      	cmp	r3, #9
 8001e10:	d91c      	bls.n	8001e4c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6999      	ldr	r1, [r3, #24]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	3b1b      	subs	r3, #27
 8001e24:	2207      	movs	r2, #7
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	4019      	ands	r1, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6898      	ldr	r0, [r3, #8]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b1b      	subs	r3, #27
 8001e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	619a      	str	r2, [r3, #24]
 8001e4a:	e01b      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6959      	ldr	r1, [r3, #20]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	2207      	movs	r2, #7
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4019      	ands	r1, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6898      	ldr	r0, [r3, #8]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e84:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <HAL_ADC_ConfigChannel+0x488>)
 8001e86:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d015      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ea0:	2b11      	cmp	r3, #17
 8001ea2:	d105      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00b      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001eb4:	2b12      	cmp	r3, #18
 8001eb6:	f040 8092 	bne.w	8001fde <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f040 808b 	bne.w	8001fde <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ed0:	d102      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x45c>
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_ADC_ConfigChannel+0x48c>)
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	e002      	b.n	8001ede <HAL_ADC_ConfigChannel+0x462>
 8001ed8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001edc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d10f      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x490>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x490>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e007      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x492>
 8001efe:	bf00      	nop
 8001f00:	83fff000 	.word	0x83fff000
 8001f04:	50000300 	.word	0x50000300
 8001f08:	50000100 	.word	0x50000100
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d150      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f12:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d010      	beq.n	8001f3a <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d107      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x4b8>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x4b8>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x4ba>
 8001f34:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d13c      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b10      	cmp	r3, #16
 8001f40:	d11d      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x502>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f4a:	d118      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f56:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_ADC_ConfigChannel+0x57c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <HAL_ADC_ConfigChannel+0x580>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0c9a      	lsrs	r2, r3, #18
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f6e:	e002      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f9      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f7c:	e02e      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b11      	cmp	r3, #17
 8001f84:	d10b      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x522>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f8e:	d106      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f9a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f9c:	e01e      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b12      	cmp	r3, #18
 8001fa4:	d11a      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fb2:	e013      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f043 0220 	orr.w	r2, r3, #32
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fc6:	e00a      	b.n	8001fde <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fda:	e000      	b.n	8001fde <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fdc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001fe6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	376c      	adds	r7, #108	; 0x6c
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	431bde83 	.word	0x431bde83

08002000 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002000:	b480      	push	{r7}
 8002002:	b099      	sub	sp, #100	; 0x64
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002018:	d102      	bne.n	8002020 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800201a:	4b5a      	ldr	r3, [pc, #360]	; (8002184 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	e002      	b.n	8002026 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002020:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002024:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0a2      	b.n	8002176 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800203a:	2302      	movs	r3, #2
 800203c:	e09b      	b.n	8002176 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d17f      	bne.n	8002154 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d179      	bne.n	8002154 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002060:	4b49      	ldr	r3, [pc, #292]	; (8002188 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002062:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d040      	beq.n	80020ee <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800206c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800207e:	035b      	lsls	r3, r3, #13
 8002080:	430b      	orrs	r3, r1
 8002082:	431a      	orrs	r2, r3
 8002084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002086:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d108      	bne.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80020a8:	2300      	movs	r3, #0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d15c      	bne.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d107      	bne.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80020ca:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d14b      	bne.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80020d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020d8:	f023 030f 	bic.w	r3, r3, #15
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	6811      	ldr	r1, [r2, #0]
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	6892      	ldr	r2, [r2, #8]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	431a      	orrs	r2, r3
 80020e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ea:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020ec:	e03c      	b.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020f8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d108      	bne.n	800211a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800211a:	2300      	movs	r3, #0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d123      	bne.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d107      	bne.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800213c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800213e:	2b00      	cmp	r3, #0
 8002140:	d112      	bne.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800214a:	f023 030f 	bic.w	r3, r3, #15
 800214e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002150:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002152:	e009      	b.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f043 0220 	orr.w	r2, r3, #32
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002166:	e000      	b.n	800216a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002168:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002172:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002176:	4618      	mov	r0, r3
 8002178:	3764      	adds	r7, #100	; 0x64
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	50000100 	.word	0x50000100
 8002188:	50000300 	.word	0x50000300

0800218c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d108      	bne.n	80021b8 <ADC_Enable+0x2c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <ADC_Enable+0x2c>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <ADC_Enable+0x2e>
 80021b8:	2300      	movs	r3, #0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d143      	bne.n	8002246 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <ADC_Enable+0xc4>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00d      	beq.n	80021e8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f043 0210 	orr.w	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e02f      	b.n	8002248 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80021f8:	f7fe ff58 	bl	80010ac <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021fe:	e01b      	b.n	8002238 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002200:	f7fe ff54 	bl	80010ac <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d914      	bls.n	8002238 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	d00d      	beq.n	8002238 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f043 0210 	orr.w	r2, r3, #16
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e007      	b.n	8002248 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d1dc      	bne.n	8002200 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	8000003f 	.word	0x8000003f

08002254 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d108      	bne.n	8002280 <ADC_Disable+0x2c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <ADC_Disable+0x2c>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <ADC_Disable+0x2e>
 8002280:	2300      	movs	r3, #0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d047      	beq.n	8002316 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030d 	and.w	r3, r3, #13
 8002290:	2b01      	cmp	r3, #1
 8002292:	d10f      	bne.n	80022b4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0202 	orr.w	r2, r2, #2
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2203      	movs	r2, #3
 80022aa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fefe 	bl	80010ac <HAL_GetTick>
 80022b0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022b2:	e029      	b.n	8002308 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e023      	b.n	8002318 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022d0:	f7fe feec 	bl	80010ac <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d914      	bls.n	8002308 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10d      	bne.n	8002308 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f043 0210 	orr.w	r2, r3, #16
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e007      	b.n	8002318 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d0dc      	beq.n	80022d0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800233c:	4013      	ands	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002352:	4a04      	ldr	r2, [pc, #16]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	60d3      	str	r3, [r2, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <__NVIC_GetPriorityGrouping+0x18>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	f003 0307 	and.w	r3, r3, #7
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	db0b      	blt.n	80023ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4907      	ldr	r1, [pc, #28]	; (80023bc <__NVIC_EnableIRQ+0x38>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2001      	movs	r0, #1
 80023a6:	fa00 f202 	lsl.w	r2, r0, r2
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db0a      	blt.n	80023ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	490c      	ldr	r1, [pc, #48]	; (800240c <__NVIC_SetPriority+0x4c>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	0112      	lsls	r2, r2, #4
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	440b      	add	r3, r1
 80023e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e8:	e00a      	b.n	8002400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4908      	ldr	r1, [pc, #32]	; (8002410 <__NVIC_SetPriority+0x50>)
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	3b04      	subs	r3, #4
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	761a      	strb	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000e100 	.word	0xe000e100
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f1c3 0307 	rsb	r3, r3, #7
 800242e:	2b04      	cmp	r3, #4
 8002430:	bf28      	it	cs
 8002432:	2304      	movcs	r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3304      	adds	r3, #4
 800243a:	2b06      	cmp	r3, #6
 800243c:	d902      	bls.n	8002444 <NVIC_EncodePriority+0x30>
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3b03      	subs	r3, #3
 8002442:	e000      	b.n	8002446 <NVIC_EncodePriority+0x32>
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	f04f 32ff 	mov.w	r2, #4294967295
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	401a      	ands	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800245c:	f04f 31ff 	mov.w	r1, #4294967295
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43d9      	mvns	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	4313      	orrs	r3, r2
         );
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	; 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800248c:	d301      	bcc.n	8002492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248e:	2301      	movs	r3, #1
 8002490:	e00f      	b.n	80024b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <SysTick_Config+0x40>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249a:	210f      	movs	r1, #15
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f7ff ff8e 	bl	80023c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <SysTick_Config+0x40>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <SysTick_Config+0x40>)
 80024ac:	2207      	movs	r2, #7
 80024ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	e000e010 	.word	0xe000e010

080024c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff29 	bl	8002320 <__NVIC_SetPriorityGrouping>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	4603      	mov	r3, r0
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
 80024e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e8:	f7ff ff3e 	bl	8002368 <__NVIC_GetPriorityGrouping>
 80024ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	6978      	ldr	r0, [r7, #20]
 80024f4:	f7ff ff8e 	bl	8002414 <NVIC_EncodePriority>
 80024f8:	4602      	mov	r2, r0
 80024fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff5d 	bl	80023c0 <__NVIC_SetPriority>
}
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff31 	bl	8002384 <__NVIC_EnableIRQ>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ffa2 	bl	800247c <SysTick_Config>
 8002538:	4603      	mov	r3, r0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002550:	2b02      	cmp	r3, #2
 8002552:	d008      	beq.n	8002566 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2204      	movs	r2, #4
 8002558:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e020      	b.n	80025a8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 020e 	bic.w	r2, r2, #14
 8002574:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d005      	beq.n	80025d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2204      	movs	r2, #4
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e027      	b.n	8002626 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 020e 	bic.w	r2, r2, #14
 80025e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0201 	bic.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	2101      	movs	r1, #1
 8002600:	fa01 f202 	lsl.w	r2, r1, r2
 8002604:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
    } 
  }
  return status;
 8002626:	7bfb      	ldrb	r3, [r7, #15]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263e:	e14e      	b.n	80028de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8140 	beq.w	80028d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d005      	beq.n	8002670 <HAL_GPIO_Init+0x40>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d130      	bne.n	80026d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a6:	2201      	movs	r2, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 0201 	and.w	r2, r3, #1
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d017      	beq.n	800270e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d123      	bne.n	8002762 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	08da      	lsrs	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3208      	adds	r2, #8
 800275c:	6939      	ldr	r1, [r7, #16]
 800275e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0203 	and.w	r2, r3, #3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 809a 	beq.w	80028d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a4:	4b55      	ldr	r3, [pc, #340]	; (80028fc <HAL_GPIO_Init+0x2cc>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	4a54      	ldr	r2, [pc, #336]	; (80028fc <HAL_GPIO_Init+0x2cc>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6193      	str	r3, [r2, #24]
 80027b0:	4b52      	ldr	r3, [pc, #328]	; (80028fc <HAL_GPIO_Init+0x2cc>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027bc:	4a50      	ldr	r2, [pc, #320]	; (8002900 <HAL_GPIO_Init+0x2d0>)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	3302      	adds	r3, #2
 80027c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220f      	movs	r2, #15
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027e6:	d013      	beq.n	8002810 <HAL_GPIO_Init+0x1e0>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a46      	ldr	r2, [pc, #280]	; (8002904 <HAL_GPIO_Init+0x2d4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00d      	beq.n	800280c <HAL_GPIO_Init+0x1dc>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a45      	ldr	r2, [pc, #276]	; (8002908 <HAL_GPIO_Init+0x2d8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d007      	beq.n	8002808 <HAL_GPIO_Init+0x1d8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a44      	ldr	r2, [pc, #272]	; (800290c <HAL_GPIO_Init+0x2dc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_GPIO_Init+0x1d4>
 8002800:	2303      	movs	r3, #3
 8002802:	e006      	b.n	8002812 <HAL_GPIO_Init+0x1e2>
 8002804:	2305      	movs	r3, #5
 8002806:	e004      	b.n	8002812 <HAL_GPIO_Init+0x1e2>
 8002808:	2302      	movs	r3, #2
 800280a:	e002      	b.n	8002812 <HAL_GPIO_Init+0x1e2>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_GPIO_Init+0x1e2>
 8002810:	2300      	movs	r3, #0
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	f002 0203 	and.w	r2, r2, #3
 8002818:	0092      	lsls	r2, r2, #2
 800281a:	4093      	lsls	r3, r2
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002822:	4937      	ldr	r1, [pc, #220]	; (8002900 <HAL_GPIO_Init+0x2d0>)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	3302      	adds	r3, #2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002830:	4b37      	ldr	r3, [pc, #220]	; (8002910 <HAL_GPIO_Init+0x2e0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002854:	4a2e      	ldr	r2, [pc, #184]	; (8002910 <HAL_GPIO_Init+0x2e0>)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800285a:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_GPIO_Init+0x2e0>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800287e:	4a24      	ldr	r2, [pc, #144]	; (8002910 <HAL_GPIO_Init+0x2e0>)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002884:	4b22      	ldr	r3, [pc, #136]	; (8002910 <HAL_GPIO_Init+0x2e0>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	43db      	mvns	r3, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <HAL_GPIO_Init+0x2e0>)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <HAL_GPIO_Init+0x2e0>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028d2:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <HAL_GPIO_Init+0x2e0>)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	3301      	adds	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f47f aea9 	bne.w	8002640 <HAL_GPIO_Init+0x10>
  }
}
 80028ee:	bf00      	nop
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010000 	.word	0x40010000
 8002904:	48000400 	.word	0x48000400
 8002908:	48000800 	.word	0x48000800
 800290c:	48000c00 	.word	0x48000c00
 8002910:	40010400 	.word	0x40010400

08002914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
 8002920:	4613      	mov	r3, r2
 8002922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002930:	e002      	b.n	8002938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800294a:	af00      	add	r7, sp, #0
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	f000 bef4 	b.w	8003746 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 816a 	beq.w	8002c42 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800296e:	4bb3      	ldr	r3, [pc, #716]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b04      	cmp	r3, #4
 8002978:	d00c      	beq.n	8002994 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800297a:	4bb0      	ldr	r3, [pc, #704]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	d159      	bne.n	8002a3a <HAL_RCC_OscConfig+0xf6>
 8002986:	4bad      	ldr	r3, [pc, #692]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002992:	d152      	bne.n	8002a3a <HAL_RCC_OscConfig+0xf6>
 8002994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002998:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_OscConfig+0x82>
 80029c0:	4b9e      	ldr	r3, [pc, #632]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0xae>
 80029c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80029da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029ee:	4b93      	ldr	r3, [pc, #588]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029fe:	fa92 f2a2 	rbit	r2, r2
 8002a02:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a06:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a0a:	fab2 f282 	clz	r2, r2
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f042 0220 	orr.w	r2, r2, #32
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f002 021f 	and.w	r2, r2, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 810c 	beq.w	8002c40 <HAL_RCC_OscConfig+0x2fc>
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 8106 	bne.w	8002c40 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	f000 be86 	b.w	8003746 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x110>
 8002a46:	4b7d      	ldr	r3, [pc, #500]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a7c      	ldr	r2, [pc, #496]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e030      	b.n	8002ab6 <HAL_RCC_OscConfig+0x172>
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x134>
 8002a5e:	4b77      	ldr	r3, [pc, #476]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a76      	ldr	r2, [pc, #472]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b74      	ldr	r3, [pc, #464]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a73      	ldr	r2, [pc, #460]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e01e      	b.n	8002ab6 <HAL_RCC_OscConfig+0x172>
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0x15a>
 8002a84:	4b6d      	ldr	r3, [pc, #436]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a6c      	ldr	r2, [pc, #432]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b6a      	ldr	r3, [pc, #424]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a69      	ldr	r2, [pc, #420]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x172>
 8002a9e:	4b67      	ldr	r3, [pc, #412]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a66      	ldr	r2, [pc, #408]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b64      	ldr	r3, [pc, #400]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a63      	ldr	r2, [pc, #396]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ab6:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	f023 020f 	bic.w	r2, r3, #15
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	495d      	ldr	r1, [pc, #372]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d059      	beq.n	8002b88 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe faea 	bl	80010ac <HAL_GetTick>
 8002ad8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ade:	f7fe fae5 	bl	80010ac <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d902      	bls.n	8002af4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	f000 be29 	b.w	8003746 <HAL_RCC_OscConfig+0xe02>
 8002af4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002af8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b08:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d102      	bne.n	8002b26 <HAL_RCC_OscConfig+0x1e2>
 8002b20:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x20e>
 8002b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b2a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b3e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b42:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b56:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b5a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b5e:	fa92 f2a2 	rbit	r2, r2
 8002b62:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b66:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b6a:	fab2 f282 	clz	r2, r2
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	f042 0220 	orr.w	r2, r2, #32
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	f002 021f 	and.w	r2, r2, #31
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0ab      	beq.n	8002ade <HAL_RCC_OscConfig+0x19a>
 8002b86:	e05c      	b.n	8002c42 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe fa90 	bl	80010ac <HAL_GetTick>
 8002b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b90:	e00a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b92:	f7fe fa8b 	bl	80010ac <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d902      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	f000 bdcf 	b.w	8003746 <HAL_RCC_OscConfig+0xe02>
 8002ba8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002bbc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d102      	bne.n	8002bda <HAL_RCC_OscConfig+0x296>
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x2c2>
 8002bda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bde:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002bee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002bf6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <HAL_RCC_OscConfig+0x2f8>)
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c0a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c0e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c12:	fa92 f2a2 	rbit	r2, r2
 8002c16:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c1a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c1e:	fab2 f282 	clz	r2, r2
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f042 0220 	orr.w	r2, r2, #32
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	f002 021f 	and.w	r2, r2, #31
 8002c2e:	2101      	movs	r1, #1
 8002c30:	fa01 f202 	lsl.w	r2, r1, r2
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1ab      	bne.n	8002b92 <HAL_RCC_OscConfig+0x24e>
 8002c3a:	e002      	b.n	8002c42 <HAL_RCC_OscConfig+0x2fe>
 8002c3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 816f 	beq.w	8002f30 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c52:	4bd0      	ldr	r3, [pc, #832]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c5e:	4bcd      	ldr	r3, [pc, #820]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d16c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x400>
 8002c6a:	4bca      	ldr	r3, [pc, #808]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d166      	bne.n	8002d44 <HAL_RCC_OscConfig+0x400>
 8002c76:	2302      	movs	r3, #2
 8002c78:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c88:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d102      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x362>
 8002ca0:	4bbc      	ldr	r3, [pc, #752]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	e013      	b.n	8002cce <HAL_RCC_OscConfig+0x38a>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002cb8:	2302      	movs	r3, #2
 8002cba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002cbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cca:	4bb2      	ldr	r3, [pc, #712]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002cd4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002cd8:	fa92 f2a2 	rbit	r2, r2
 8002cdc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002ce0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f042 0220 	orr.w	r2, r2, #32
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f002 021f 	and.w	r2, r2, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <HAL_RCC_OscConfig+0x3cc>
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d002      	beq.n	8002d10 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f000 bd1b 	b.w	8003746 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d10:	4ba0      	ldr	r3, [pc, #640]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	21f8      	movs	r1, #248	; 0xf8
 8002d20:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d28:	fa91 f1a1 	rbit	r1, r1
 8002d2c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d30:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d34:	fab1 f181 	clz	r1, r1
 8002d38:	b2c9      	uxtb	r1, r1
 8002d3a:	408b      	lsls	r3, r1
 8002d3c:	4995      	ldr	r1, [pc, #596]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d42:	e0f5      	b.n	8002f30 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8085 	beq.w	8002e5a <HAL_RCC_OscConfig+0x516>
 8002d50:	2301      	movs	r3, #1
 8002d52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	461a      	mov	r2, r3
 8002d78:	2301      	movs	r3, #1
 8002d7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe f996 	bl	80010ac <HAL_GetTick>
 8002d80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d86:	f7fe f991 	bl	80010ac <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d902      	bls.n	8002d9c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	f000 bcd5 	b.w	8003746 <HAL_RCC_OscConfig+0xe02>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002dae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d102      	bne.n	8002dcc <HAL_RCC_OscConfig+0x488>
 8002dc6:	4b73      	ldr	r3, [pc, #460]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	e013      	b.n	8002df4 <HAL_RCC_OscConfig+0x4b0>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002dde:	2302      	movs	r3, #2
 8002de0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002de4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002df0:	4b68      	ldr	r3, [pc, #416]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	2202      	movs	r2, #2
 8002df6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002dfa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002dfe:	fa92 f2a2 	rbit	r2, r2
 8002e02:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e0a:	fab2 f282 	clz	r2, r2
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	f042 0220 	orr.w	r2, r2, #32
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	f002 021f 	and.w	r2, r2, #31
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0af      	beq.n	8002d86 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e26:	4b5b      	ldr	r3, [pc, #364]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	21f8      	movs	r1, #248	; 0xf8
 8002e36:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e3e:	fa91 f1a1 	rbit	r1, r1
 8002e42:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e46:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e4a:	fab1 f181 	clz	r1, r1
 8002e4e:	b2c9      	uxtb	r1, r1
 8002e50:	408b      	lsls	r3, r1
 8002e52:	4950      	ldr	r1, [pc, #320]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	e06a      	b.n	8002f30 <HAL_RCC_OscConfig+0x5ec>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	461a      	mov	r2, r3
 8002e82:	2300      	movs	r3, #0
 8002e84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe f911 	bl	80010ac <HAL_GetTick>
 8002e8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fe f90c 	bl	80010ac <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d902      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	f000 bc50 	b.w	8003746 <HAL_RCC_OscConfig+0xe02>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f043 0301 	orr.w	r3, r3, #1
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d102      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x592>
 8002ed0:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	e013      	b.n	8002efe <HAL_RCC_OscConfig+0x5ba>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ee8:	2302      	movs	r3, #2
 8002eea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002eee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002efa:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <HAL_RCC_OscConfig+0x650>)
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	2202      	movs	r2, #2
 8002f00:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f04:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f08:	fa92 f2a2 	rbit	r2, r2
 8002f0c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f10:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f14:	fab2 f282 	clz	r2, r2
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f042 0220 	orr.w	r2, r2, #32
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	f002 021f 	and.w	r2, r2, #31
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1af      	bne.n	8002e90 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80da 	beq.w	80030f4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d069      	beq.n	800301e <HAL_RCC_OscConfig+0x6da>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCC_OscConfig+0x654>)
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2301      	movs	r3, #1
 8002f72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f74:	f7fe f89a 	bl	80010ac <HAL_GetTick>
 8002f78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7c:	e00e      	b.n	8002f9c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f7e:	f7fe f895 	bl	80010ac <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d906      	bls.n	8002f9c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e3d9      	b.n	8003746 <HAL_RCC_OscConfig+0xe02>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	10908120 	.word	0x10908120
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	fa93 f2a3 	rbit	r2, r3
 8002fc0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fca:	2202      	movs	r2, #2
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f2a3 	rbit	r2, r3
 8002fd8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002fdc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	4ba5      	ldr	r3, [pc, #660]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 8002fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	6019      	str	r1, [r3, #0]
 8002fea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f1a3 	rbit	r1, r3
 8002ff4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ff8:	6019      	str	r1, [r3, #0]
  return result;
 8002ffa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2101      	movs	r1, #1
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0b0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x63a>
 800301c:	e06a      	b.n	80030f4 <HAL_RCC_OscConfig+0x7b0>
 800301e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	fa93 f2a3 	rbit	r2, r3
 8003030:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003034:	601a      	str	r2, [r3, #0]
  return result;
 8003036:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800303a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	4b8c      	ldr	r3, [pc, #560]	; (8003278 <HAL_RCC_OscConfig+0x934>)
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	461a      	mov	r2, r3
 800304c:	2300      	movs	r3, #0
 800304e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7fe f82c 	bl	80010ac <HAL_GetTick>
 8003054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003058:	e009      	b.n	800306e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305a:	f7fe f827 	bl	80010ac <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e36b      	b.n	8003746 <HAL_RCC_OscConfig+0xe02>
 800306e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003072:	2202      	movs	r2, #2
 8003074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	fa93 f2a3 	rbit	r2, r3
 8003080:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800308a:	2202      	movs	r2, #2
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	fa93 f2a3 	rbit	r2, r3
 8003098:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030a2:	2202      	movs	r2, #2
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f2a3 	rbit	r2, r3
 80030b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b6:	4b6f      	ldr	r3, [pc, #444]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80030b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030be:	2102      	movs	r1, #2
 80030c0:	6019      	str	r1, [r3, #0]
 80030c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	fa93 f1a3 	rbit	r1, r3
 80030cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030d0:	6019      	str	r1, [r3, #0]
  return result;
 80030d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	2101      	movs	r1, #1
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1b2      	bne.n	800305a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	1d3b      	adds	r3, r7, #4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8158 	beq.w	80033b4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003104:	2300      	movs	r3, #0
 8003106:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310a:	4b5a      	ldr	r3, [pc, #360]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d112      	bne.n	800313c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	4b57      	ldr	r3, [pc, #348]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4a56      	ldr	r2, [pc, #344]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003120:	61d3      	str	r3, [r2, #28]
 8003122:	4b54      	ldr	r3, [pc, #336]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800312a:	f107 0308 	add.w	r3, r7, #8
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f107 0308 	add.w	r3, r7, #8
 8003134:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	4b4f      	ldr	r3, [pc, #316]	; (800327c <HAL_RCC_OscConfig+0x938>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d11a      	bne.n	800317e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003148:	4b4c      	ldr	r3, [pc, #304]	; (800327c <HAL_RCC_OscConfig+0x938>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a4b      	ldr	r2, [pc, #300]	; (800327c <HAL_RCC_OscConfig+0x938>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003152:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003154:	f7fd ffaa 	bl	80010ac <HAL_GetTick>
 8003158:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	e009      	b.n	8003172 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315e:	f7fd ffa5 	bl	80010ac <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e2e9      	b.n	8003746 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	4b42      	ldr	r3, [pc, #264]	; (800327c <HAL_RCC_OscConfig+0x938>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0ef      	beq.n	800315e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317e:	1d3b      	adds	r3, r7, #4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x852>
 8003188:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4a39      	ldr	r2, [pc, #228]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6213      	str	r3, [r2, #32]
 8003194:	e02f      	b.n	80031f6 <HAL_RCC_OscConfig+0x8b2>
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10c      	bne.n	80031ba <HAL_RCC_OscConfig+0x876>
 80031a0:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4a33      	ldr	r2, [pc, #204]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	6213      	str	r3, [r2, #32]
 80031ac:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a30      	ldr	r2, [pc, #192]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80031b2:	f023 0304 	bic.w	r3, r3, #4
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	e01d      	b.n	80031f6 <HAL_RCC_OscConfig+0x8b2>
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d10c      	bne.n	80031de <HAL_RCC_OscConfig+0x89a>
 80031c4:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	6213      	str	r3, [r2, #32]
 80031d0:	4b28      	ldr	r3, [pc, #160]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a27      	ldr	r2, [pc, #156]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	e00b      	b.n	80031f6 <HAL_RCC_OscConfig+0x8b2>
 80031de:	4b25      	ldr	r3, [pc, #148]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a24      	ldr	r2, [pc, #144]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	4b22      	ldr	r3, [pc, #136]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a21      	ldr	r2, [pc, #132]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d06b      	beq.n	80032d8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003200:	f7fd ff54 	bl	80010ac <HAL_GetTick>
 8003204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003208:	e00b      	b.n	8003222 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fd ff4f 	bl	80010ac <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e291      	b.n	8003746 <HAL_RCC_OscConfig+0xe02>
 8003222:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003226:	2202      	movs	r2, #2
 8003228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	fa93 f2a3 	rbit	r2, r3
 8003234:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	fa93 f2a3 	rbit	r2, r3
 800324c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003250:	601a      	str	r2, [r3, #0]
  return result;
 8003252:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003256:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d109      	bne.n	8003280 <HAL_RCC_OscConfig+0x93c>
 800326c:	4b01      	ldr	r3, [pc, #4]	; (8003274 <HAL_RCC_OscConfig+0x930>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	e014      	b.n	800329c <HAL_RCC_OscConfig+0x958>
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	10908120 	.word	0x10908120
 800327c:	40007000 	.word	0x40007000
 8003280:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003284:	2202      	movs	r2, #2
 8003286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	fa93 f2a3 	rbit	r2, r3
 8003292:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	4bbb      	ldr	r3, [pc, #748]	; (8003588 <HAL_RCC_OscConfig+0xc44>)
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032a0:	2102      	movs	r1, #2
 80032a2:	6011      	str	r1, [r2, #0]
 80032a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	fa92 f1a2 	rbit	r1, r2
 80032ae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032b2:	6011      	str	r1, [r2, #0]
  return result;
 80032b4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	fab2 f282 	clz	r2, r2
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	f002 021f 	and.w	r2, r2, #31
 80032ca:	2101      	movs	r1, #1
 80032cc:	fa01 f202 	lsl.w	r2, r1, r2
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d099      	beq.n	800320a <HAL_RCC_OscConfig+0x8c6>
 80032d6:	e063      	b.n	80033a0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d8:	f7fd fee8 	bl	80010ac <HAL_GetTick>
 80032dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e0:	e00b      	b.n	80032fa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fd fee3 	bl	80010ac <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e225      	b.n	8003746 <HAL_RCC_OscConfig+0xe02>
 80032fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80032fe:	2202      	movs	r2, #2
 8003300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	fa93 f2a3 	rbit	r2, r3
 800330c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003316:	2202      	movs	r2, #2
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	fa93 f2a3 	rbit	r2, r3
 8003324:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003328:	601a      	str	r2, [r3, #0]
  return result;
 800332a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800332e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f043 0302 	orr.w	r3, r3, #2
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d102      	bne.n	800334a <HAL_RCC_OscConfig+0xa06>
 8003344:	4b90      	ldr	r3, [pc, #576]	; (8003588 <HAL_RCC_OscConfig+0xc44>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	e00d      	b.n	8003366 <HAL_RCC_OscConfig+0xa22>
 800334a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800334e:	2202      	movs	r2, #2
 8003350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f2a3 	rbit	r2, r3
 800335c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	4b89      	ldr	r3, [pc, #548]	; (8003588 <HAL_RCC_OscConfig+0xc44>)
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800336a:	2102      	movs	r1, #2
 800336c:	6011      	str	r1, [r2, #0]
 800336e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	fa92 f1a2 	rbit	r1, r2
 8003378:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800337c:	6011      	str	r1, [r2, #0]
  return result;
 800337e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	fab2 f282 	clz	r2, r2
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	f002 021f 	and.w	r2, r2, #31
 8003394:	2101      	movs	r1, #1
 8003396:	fa01 f202 	lsl.w	r2, r1, r2
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1a0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a8:	4b77      	ldr	r3, [pc, #476]	; (8003588 <HAL_RCC_OscConfig+0xc44>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	4a76      	ldr	r2, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0xc44>)
 80033ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 81c2 	beq.w	8003744 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c0:	4b71      	ldr	r3, [pc, #452]	; (8003588 <HAL_RCC_OscConfig+0xc44>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	f000 819c 	beq.w	8003706 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	f040 8114 	bne.w	8003602 <HAL_RCC_OscConfig+0xcbe>
 80033da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	fa93 f2a3 	rbit	r2, r3
 80033ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033f2:	601a      	str	r2, [r3, #0]
  return result;
 80033f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003404:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	461a      	mov	r2, r3
 800340c:	2300      	movs	r3, #0
 800340e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fd fe4c 	bl	80010ac <HAL_GetTick>
 8003414:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003418:	e009      	b.n	800342e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341a:	f7fd fe47 	bl	80010ac <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e18b      	b.n	8003746 <HAL_RCC_OscConfig+0xe02>
 800342e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003432:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	fa93 f2a3 	rbit	r2, r3
 8003442:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003446:	601a      	str	r2, [r3, #0]
  return result;
 8003448:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800344c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_RCC_OscConfig+0xb24>
 8003462:	4b49      	ldr	r3, [pc, #292]	; (8003588 <HAL_RCC_OscConfig+0xc44>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	e01b      	b.n	80034a0 <HAL_RCC_OscConfig+0xb5c>
 8003468:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800346c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	fa93 f2a3 	rbit	r2, r3
 800347c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003486:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	fa93 f2a3 	rbit	r2, r3
 8003496:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	4b3a      	ldr	r3, [pc, #232]	; (8003588 <HAL_RCC_OscConfig+0xc44>)
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034a8:	6011      	str	r1, [r2, #0]
 80034aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	fa92 f1a2 	rbit	r1, r2
 80034b4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034b8:	6011      	str	r1, [r2, #0]
  return result;
 80034ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	fab2 f282 	clz	r2, r2
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f042 0220 	orr.w	r2, r2, #32
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	f002 021f 	and.w	r2, r2, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f202 	lsl.w	r2, r1, r2
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d19e      	bne.n	800341a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034dc:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <HAL_RCC_OscConfig+0xc44>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034ea:	1d3b      	adds	r3, r7, #4
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	430b      	orrs	r3, r1
 80034f2:	4925      	ldr	r1, [pc, #148]	; (8003588 <HAL_RCC_OscConfig+0xc44>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
 80034f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	fa93 f2a3 	rbit	r2, r3
 800350c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003510:	601a      	str	r2, [r3, #0]
  return result;
 8003512:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003516:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003522:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	461a      	mov	r2, r3
 800352a:	2301      	movs	r3, #1
 800352c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7fd fdbd 	bl	80010ac <HAL_GetTick>
 8003532:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003536:	e009      	b.n	800354c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003538:	f7fd fdb8 	bl	80010ac <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0fc      	b.n	8003746 <HAL_RCC_OscConfig+0xe02>
 800354c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	fa93 f2a3 	rbit	r2, r3
 8003560:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003564:	601a      	str	r2, [r3, #0]
  return result;
 8003566:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800356a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d105      	bne.n	800358c <HAL_RCC_OscConfig+0xc48>
 8003580:	4b01      	ldr	r3, [pc, #4]	; (8003588 <HAL_RCC_OscConfig+0xc44>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	e01e      	b.n	80035c4 <HAL_RCC_OscConfig+0xc80>
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
 800358c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	fa93 f2a3 	rbit	r2, r3
 80035a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	fa93 f2a3 	rbit	r2, r3
 80035ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	4b63      	ldr	r3, [pc, #396]	; (8003750 <HAL_RCC_OscConfig+0xe0c>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035cc:	6011      	str	r1, [r2, #0]
 80035ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	fa92 f1a2 	rbit	r1, r2
 80035d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035dc:	6011      	str	r1, [r2, #0]
  return result;
 80035de:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	fab2 f282 	clz	r2, r2
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	f042 0220 	orr.w	r2, r2, #32
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	f002 021f 	and.w	r2, r2, #31
 80035f4:	2101      	movs	r1, #1
 80035f6:	fa01 f202 	lsl.w	r2, r1, r2
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d09b      	beq.n	8003538 <HAL_RCC_OscConfig+0xbf4>
 8003600:	e0a0      	b.n	8003744 <HAL_RCC_OscConfig+0xe00>
 8003602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003606:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800360a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	fa93 f2a3 	rbit	r2, r3
 8003616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800361a:	601a      	str	r2, [r3, #0]
  return result;
 800361c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003620:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800362c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	461a      	mov	r2, r3
 8003634:	2300      	movs	r3, #0
 8003636:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fd fd38 	bl	80010ac <HAL_GetTick>
 800363c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003640:	e009      	b.n	8003656 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003642:	f7fd fd33 	bl	80010ac <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e077      	b.n	8003746 <HAL_RCC_OscConfig+0xe02>
 8003656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800365a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800365e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	fa93 f2a3 	rbit	r2, r3
 800366a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800366e:	601a      	str	r2, [r3, #0]
  return result;
 8003670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003674:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d102      	bne.n	8003690 <HAL_RCC_OscConfig+0xd4c>
 800368a:	4b31      	ldr	r3, [pc, #196]	; (8003750 <HAL_RCC_OscConfig+0xe0c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	e01b      	b.n	80036c8 <HAL_RCC_OscConfig+0xd84>
 8003690:	f107 0320 	add.w	r3, r7, #32
 8003694:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	f107 0320 	add.w	r3, r7, #32
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	fa93 f2a3 	rbit	r2, r3
 80036a4:	f107 031c 	add.w	r3, r7, #28
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	f107 0318 	add.w	r3, r7, #24
 80036ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	f107 0318 	add.w	r3, r7, #24
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	fa93 f2a3 	rbit	r2, r3
 80036be:	f107 0314 	add.w	r3, r7, #20
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	4b22      	ldr	r3, [pc, #136]	; (8003750 <HAL_RCC_OscConfig+0xe0c>)
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	f107 0210 	add.w	r2, r7, #16
 80036cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036d0:	6011      	str	r1, [r2, #0]
 80036d2:	f107 0210 	add.w	r2, r7, #16
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	fa92 f1a2 	rbit	r1, r2
 80036dc:	f107 020c 	add.w	r2, r7, #12
 80036e0:	6011      	str	r1, [r2, #0]
  return result;
 80036e2:	f107 020c 	add.w	r2, r7, #12
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	fab2 f282 	clz	r2, r2
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	f042 0220 	orr.w	r2, r2, #32
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	f002 021f 	and.w	r2, r2, #31
 80036f8:	2101      	movs	r1, #1
 80036fa:	fa01 f202 	lsl.w	r2, r1, r2
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d19e      	bne.n	8003642 <HAL_RCC_OscConfig+0xcfe>
 8003704:	e01e      	b.n	8003744 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e018      	b.n	8003746 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_RCC_OscConfig+0xe0c>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800371c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003720:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	429a      	cmp	r2, r3
 800372c:	d108      	bne.n	8003740 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800372e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003732:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003736:	1d3b      	adds	r3, r7, #4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000

08003754 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b09e      	sub	sp, #120	; 0x78
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e162      	b.n	8003a32 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800376c:	4b90      	ldr	r3, [pc, #576]	; (80039b0 <HAL_RCC_ClockConfig+0x25c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d910      	bls.n	800379c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b8d      	ldr	r3, [pc, #564]	; (80039b0 <HAL_RCC_ClockConfig+0x25c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 0207 	bic.w	r2, r3, #7
 8003782:	498b      	ldr	r1, [pc, #556]	; (80039b0 <HAL_RCC_ClockConfig+0x25c>)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b89      	ldr	r3, [pc, #548]	; (80039b0 <HAL_RCC_ClockConfig+0x25c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e14a      	b.n	8003a32 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a8:	4b82      	ldr	r3, [pc, #520]	; (80039b4 <HAL_RCC_ClockConfig+0x260>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	497f      	ldr	r1, [pc, #508]	; (80039b4 <HAL_RCC_ClockConfig+0x260>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80dc 	beq.w	8003980 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d13c      	bne.n	800384a <HAL_RCC_ClockConfig+0xf6>
 80037d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d102      	bne.n	80037fa <HAL_RCC_ClockConfig+0xa6>
 80037f4:	4b6f      	ldr	r3, [pc, #444]	; (80039b4 <HAL_RCC_ClockConfig+0x260>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	e00f      	b.n	800381a <HAL_RCC_ClockConfig+0xc6>
 80037fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	667b      	str	r3, [r7, #100]	; 0x64
 8003808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800380c:	663b      	str	r3, [r7, #96]	; 0x60
 800380e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003816:	4b67      	ldr	r3, [pc, #412]	; (80039b4 <HAL_RCC_ClockConfig+0x260>)
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800381e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003822:	fa92 f2a2 	rbit	r2, r2
 8003826:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800382a:	fab2 f282 	clz	r2, r2
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f042 0220 	orr.w	r2, r2, #32
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	f002 021f 	and.w	r2, r2, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f202 	lsl.w	r2, r1, r2
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d17b      	bne.n	800393e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e0f3      	b.n	8003a32 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d13c      	bne.n	80038cc <HAL_RCC_ClockConfig+0x178>
 8003852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003856:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d102      	bne.n	800387c <HAL_RCC_ClockConfig+0x128>
 8003876:	4b4f      	ldr	r3, [pc, #316]	; (80039b4 <HAL_RCC_ClockConfig+0x260>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	e00f      	b.n	800389c <HAL_RCC_ClockConfig+0x148>
 800387c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003880:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
 800388a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800388e:	643b      	str	r3, [r7, #64]	; 0x40
 8003890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003892:	fa93 f3a3 	rbit	r3, r3
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003898:	4b46      	ldr	r3, [pc, #280]	; (80039b4 <HAL_RCC_ClockConfig+0x260>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80038a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038a4:	fa92 f2a2 	rbit	r2, r2
 80038a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ac:	fab2 f282 	clz	r2, r2
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	f042 0220 	orr.w	r2, r2, #32
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	f002 021f 	and.w	r2, r2, #31
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f202 	lsl.w	r2, r1, r2
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d13a      	bne.n	800393e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0b2      	b.n	8003a32 <HAL_RCC_ClockConfig+0x2de>
 80038cc:	2302      	movs	r3, #2
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d102      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x1a0>
 80038ee:	4b31      	ldr	r3, [pc, #196]	; (80039b4 <HAL_RCC_ClockConfig+0x260>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	e00d      	b.n	8003910 <HAL_RCC_ClockConfig+0x1bc>
 80038f4:	2302      	movs	r3, #2
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003900:	2302      	movs	r3, #2
 8003902:	623b      	str	r3, [r7, #32]
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <HAL_RCC_ClockConfig+0x260>)
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2202      	movs	r2, #2
 8003912:	61ba      	str	r2, [r7, #24]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	fa92 f2a2 	rbit	r2, r2
 800391a:	617a      	str	r2, [r7, #20]
  return result;
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	fab2 f282 	clz	r2, r2
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	f042 0220 	orr.w	r2, r2, #32
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	f002 021f 	and.w	r2, r2, #31
 800392e:	2101      	movs	r1, #1
 8003930:	fa01 f202 	lsl.w	r2, r1, r2
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e079      	b.n	8003a32 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <HAL_RCC_ClockConfig+0x260>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	491a      	ldr	r1, [pc, #104]	; (80039b4 <HAL_RCC_ClockConfig+0x260>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003950:	f7fd fbac 	bl	80010ac <HAL_GetTick>
 8003954:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fd fba8 	bl	80010ac <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e061      	b.n	8003a32 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_RCC_ClockConfig+0x260>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_RCC_ClockConfig+0x25c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d214      	bcs.n	80039b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <HAL_RCC_ClockConfig+0x25c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 0207 	bic.w	r2, r3, #7
 8003996:	4906      	ldr	r1, [pc, #24]	; (80039b0 <HAL_RCC_ClockConfig+0x25c>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <HAL_RCC_ClockConfig+0x25c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e040      	b.n	8003a32 <HAL_RCC_ClockConfig+0x2de>
 80039b0:	40022000 	.word	0x40022000
 80039b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c4:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <HAL_RCC_ClockConfig+0x2e8>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	491a      	ldr	r1, [pc, #104]	; (8003a3c <HAL_RCC_ClockConfig+0x2e8>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039e2:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <HAL_RCC_ClockConfig+0x2e8>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4912      	ldr	r1, [pc, #72]	; (8003a3c <HAL_RCC_ClockConfig+0x2e8>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039f6:	f000 f829 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 80039fa:	4601      	mov	r1, r0
 80039fc:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <HAL_RCC_ClockConfig+0x2e8>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a04:	22f0      	movs	r2, #240	; 0xf0
 8003a06:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	fa92 f2a2 	rbit	r2, r2
 8003a0e:	60fa      	str	r2, [r7, #12]
  return result;
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	fab2 f282 	clz	r2, r2
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	40d3      	lsrs	r3, r2
 8003a1a:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x2ec>)
 8003a1c:	5cd3      	ldrb	r3, [r2, r3]
 8003a1e:	fa21 f303 	lsr.w	r3, r1, r3
 8003a22:	4a08      	ldr	r2, [pc, #32]	; (8003a44 <HAL_RCC_ClockConfig+0x2f0>)
 8003a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_RCC_ClockConfig+0x2f4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd fafa 	bl	8001024 <HAL_InitTick>
  
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3778      	adds	r7, #120	; 0x78
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	080066dc 	.word	0x080066dc
 8003a44:	20000000 	.word	0x20000000
 8003a48:	20000004 	.word	0x20000004

08003a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b08b      	sub	sp, #44	; 0x2c
 8003a50:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a66:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x30>
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x36>
 8003a7a:	e03c      	b.n	8003af6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a7c:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a7e:	623b      	str	r3, [r7, #32]
      break;
 8003a80:	e03c      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a88:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a8c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	fa92 f2a2 	rbit	r2, r2
 8003a94:	607a      	str	r2, [r7, #4]
  return result;
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	fab2 f282 	clz	r2, r2
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	40d3      	lsrs	r3, r2
 8003aa0:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aa2:	5cd3      	ldrb	r3, [r2, r3]
 8003aa4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003aa6:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	220f      	movs	r2, #15
 8003ab0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	fa92 f2a2 	rbit	r2, r2
 8003ab8:	60fa      	str	r2, [r7, #12]
  return result;
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	fab2 f282 	clz	r2, r2
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	40d3      	lsrs	r3, r2
 8003ac4:	4a14      	ldr	r2, [pc, #80]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ac6:	5cd3      	ldrb	r3, [r2, r3]
 8003ac8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ad4:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	fb02 f303 	mul.w	r3, r2, r3
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae4:	e004      	b.n	8003af0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	623b      	str	r3, [r7, #32]
      break;
 8003af4:	e002      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003af8:	623b      	str	r3, [r7, #32]
      break;
 8003afa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afc:	6a3b      	ldr	r3, [r7, #32]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	372c      	adds	r7, #44	; 0x2c
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	007a1200 	.word	0x007a1200
 8003b14:	080066f4 	.word	0x080066f4
 8003b18:	08006704 	.word	0x08006704
 8003b1c:	003d0900 	.word	0x003d0900

08003b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000000 	.word	0x20000000

08003b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b3e:	f7ff ffef 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b42:	4601      	mov	r1, r0
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b4c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	fa92 f2a2 	rbit	r2, r2
 8003b58:	603a      	str	r2, [r7, #0]
  return result;
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	fab2 f282 	clz	r2, r2
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	40d3      	lsrs	r3, r2
 8003b64:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b66:	5cd3      	ldrb	r3, [r2, r3]
 8003b68:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000
 8003b78:	080066ec 	.word	0x080066ec

08003b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b82:	f7ff ffcd 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b86:	4601      	mov	r1, r0
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b90:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	fa92 f2a2 	rbit	r2, r2
 8003b9c:	603a      	str	r2, [r7, #0]
  return result;
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	fab2 f282 	clz	r2, r2
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	40d3      	lsrs	r3, r2
 8003ba8:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003baa:	5cd3      	ldrb	r3, [r2, r3]
 8003bac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	080066ec 	.word	0x080066ec

08003bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b092      	sub	sp, #72	; 0x48
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 80cd 	beq.w	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be4:	4b86      	ldr	r3, [pc, #536]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10e      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf0:	4b83      	ldr	r3, [pc, #524]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	4a82      	ldr	r2, [pc, #520]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	61d3      	str	r3, [r2, #28]
 8003bfc:	4b80      	ldr	r3, [pc, #512]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0e:	4b7d      	ldr	r3, [pc, #500]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d118      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c1a:	4b7a      	ldr	r3, [pc, #488]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a79      	ldr	r2, [pc, #484]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c26:	f7fd fa41 	bl	80010ac <HAL_GetTick>
 8003c2a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2c:	e008      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7fd fa3d 	bl	80010ac <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b64      	cmp	r3, #100	; 0x64
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e0db      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	4b70      	ldr	r3, [pc, #448]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c4c:	4b6c      	ldr	r3, [pc, #432]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c54:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d07d      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d076      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c6a:	4b65      	ldr	r3, [pc, #404]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c78:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c84:	fab3 f383 	clz	r3, r3
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4b5e      	ldr	r3, [pc, #376]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	461a      	mov	r2, r3
 8003c94:	2301      	movs	r3, #1
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca8:	fab3 f383 	clz	r3, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b55      	ldr	r3, [pc, #340]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2300      	movs	r3, #0
 8003cba:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cbc:	4a50      	ldr	r2, [pc, #320]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d045      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fd f9ee 	bl	80010ac <HAL_GetTick>
 8003cd0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fd f9ea 	bl	80010ac <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e086      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003cea:	2302      	movs	r3, #2
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	fa93 f3a3 	rbit	r3, r3
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	623b      	str	r3, [r7, #32]
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	61fb      	str	r3, [r7, #28]
  return result;
 8003d02:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d04:	fab3 f383 	clz	r3, r3
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f043 0302 	orr.w	r3, r3, #2
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d102      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	e007      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	4b35      	ldr	r3, [pc, #212]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	2202      	movs	r2, #2
 8003d30:	613a      	str	r2, [r7, #16]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	fa92 f2a2 	rbit	r2, r2
 8003d38:	60fa      	str	r2, [r7, #12]
  return result;
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	fab2 f282 	clz	r2, r2
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	f002 021f 	and.w	r2, r2, #31
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0bd      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d58:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4926      	ldr	r1, [pc, #152]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d105      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d72:	4b23      	ldr	r3, [pc, #140]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	4a22      	ldr	r2, [pc, #136]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f023 0203 	bic.w	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	491a      	ldr	r1, [pc, #104]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003da8:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f023 0210 	bic.w	r2, r3, #16
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4912      	ldr	r1, [pc, #72]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	490b      	ldr	r1, [pc, #44]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	4903      	ldr	r1, [pc, #12]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3748      	adds	r7, #72	; 0x48
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40007000 	.word	0x40007000
 8003e08:	10908100 	.word	0x10908100

08003e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e049      	b.n	8003eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fc ff1a 	bl	8000c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	f000 fde8 	bl	8004a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d001      	beq.n	8003ed4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e038      	b.n	8003f46 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <HAL_TIM_Base_Start+0x98>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_TIM_Base_Start+0x48>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d009      	beq.n	8003f04 <HAL_TIM_Base_Start+0x48>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_TIM_Base_Start+0x9c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_TIM_Base_Start+0x48>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <HAL_TIM_Base_Start+0xa0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d115      	bne.n	8003f30 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_TIM_Base_Start+0xa4>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b06      	cmp	r3, #6
 8003f14:	d015      	beq.n	8003f42 <HAL_TIM_Base_Start+0x86>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d011      	beq.n	8003f42 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2e:	e008      	b.n	8003f42 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e000      	b.n	8003f44 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	00010007 	.word	0x00010007

08003f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d001      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e040      	b.n	8003ffe <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1c      	ldr	r2, [pc, #112]	; (800400c <HAL_TIM_Base_Start_IT+0xa8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00e      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x58>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d009      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x58>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a18      	ldr	r2, [pc, #96]	; (8004010 <HAL_TIM_Base_Start_IT+0xac>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x58>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a17      	ldr	r2, [pc, #92]	; (8004014 <HAL_TIM_Base_Start_IT+0xb0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d115      	bne.n	8003fe8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_TIM_Base_Start_IT+0xb4>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d015      	beq.n	8003ffa <HAL_TIM_Base_Start_IT+0x96>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd4:	d011      	beq.n	8003ffa <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe6:	e008      	b.n	8003ffa <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e000      	b.n	8003ffc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40012c00 	.word	0x40012c00
 8004010:	40000400 	.word	0x40000400
 8004014:	40014000 	.word	0x40014000
 8004018:	00010007 	.word	0x00010007

0800401c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e049      	b.n	80040c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f841 	bl	80040ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f000 fce0 	bl	8004a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <HAL_TIM_PWM_Start+0x24>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e03c      	b.n	800417e <HAL_TIM_PWM_Start+0x9e>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b04      	cmp	r3, #4
 8004108:	d109      	bne.n	800411e <HAL_TIM_PWM_Start+0x3e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b01      	cmp	r3, #1
 8004114:	bf14      	ite	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2300      	moveq	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	e02f      	b.n	800417e <HAL_TIM_PWM_Start+0x9e>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b08      	cmp	r3, #8
 8004122:	d109      	bne.n	8004138 <HAL_TIM_PWM_Start+0x58>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e022      	b.n	800417e <HAL_TIM_PWM_Start+0x9e>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d109      	bne.n	8004152 <HAL_TIM_PWM_Start+0x72>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	bf14      	ite	ne
 800414a:	2301      	movne	r3, #1
 800414c:	2300      	moveq	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	e015      	b.n	800417e <HAL_TIM_PWM_Start+0x9e>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b10      	cmp	r3, #16
 8004156:	d109      	bne.n	800416c <HAL_TIM_PWM_Start+0x8c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e008      	b.n	800417e <HAL_TIM_PWM_Start+0x9e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	bf14      	ite	ne
 8004178:	2301      	movne	r3, #1
 800417a:	2300      	moveq	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e088      	b.n	8004298 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <HAL_TIM_PWM_Start+0xb6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004194:	e023      	b.n	80041de <HAL_TIM_PWM_Start+0xfe>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b04      	cmp	r3, #4
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_PWM_Start+0xc6>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a4:	e01b      	b.n	80041de <HAL_TIM_PWM_Start+0xfe>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_PWM_Start+0xd6>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b4:	e013      	b.n	80041de <HAL_TIM_PWM_Start+0xfe>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_PWM_Start+0xe6>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041c4:	e00b      	b.n	80041de <HAL_TIM_PWM_Start+0xfe>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_PWM_Start+0xf6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d4:	e003      	b.n	80041de <HAL_TIM_PWM_Start+0xfe>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2201      	movs	r2, #1
 80041e4:	6839      	ldr	r1, [r7, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 ffd2 	bl	8005190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <HAL_TIM_PWM_Start+0x1c0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00e      	beq.n	8004214 <HAL_TIM_PWM_Start+0x134>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <HAL_TIM_PWM_Start+0x1c4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_TIM_PWM_Start+0x134>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a28      	ldr	r2, [pc, #160]	; (80042a8 <HAL_TIM_PWM_Start+0x1c8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_TIM_PWM_Start+0x134>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a27      	ldr	r2, [pc, #156]	; (80042ac <HAL_TIM_PWM_Start+0x1cc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d101      	bne.n	8004218 <HAL_TIM_PWM_Start+0x138>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <HAL_TIM_PWM_Start+0x13a>
 8004218:	2300      	movs	r3, #0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800422c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1b      	ldr	r2, [pc, #108]	; (80042a0 <HAL_TIM_PWM_Start+0x1c0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_TIM_PWM_Start+0x176>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004240:	d009      	beq.n	8004256 <HAL_TIM_PWM_Start+0x176>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1a      	ldr	r2, [pc, #104]	; (80042b0 <HAL_TIM_PWM_Start+0x1d0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIM_PWM_Start+0x176>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <HAL_TIM_PWM_Start+0x1c4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d115      	bne.n	8004282 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <HAL_TIM_PWM_Start+0x1d4>)
 800425e:	4013      	ands	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b06      	cmp	r3, #6
 8004266:	d015      	beq.n	8004294 <HAL_TIM_PWM_Start+0x1b4>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426e:	d011      	beq.n	8004294 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004280:	e008      	b.n	8004294 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e000      	b.n	8004296 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004294:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40014000 	.word	0x40014000
 80042a8:	40014400 	.word	0x40014400
 80042ac:	40014800 	.word	0x40014800
 80042b0:	40000400 	.word	0x40000400
 80042b4:	00010007 	.word	0x00010007

080042b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2200      	movs	r2, #0
 80042c8:	6839      	ldr	r1, [r7, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 ff60 	bl	8005190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a3b      	ldr	r2, [pc, #236]	; (80043c4 <HAL_TIM_PWM_Stop+0x10c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00e      	beq.n	80042f8 <HAL_TIM_PWM_Stop+0x40>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a3a      	ldr	r2, [pc, #232]	; (80043c8 <HAL_TIM_PWM_Stop+0x110>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_TIM_PWM_Stop+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a38      	ldr	r2, [pc, #224]	; (80043cc <HAL_TIM_PWM_Stop+0x114>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_TIM_PWM_Stop+0x40>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a37      	ldr	r2, [pc, #220]	; (80043d0 <HAL_TIM_PWM_Stop+0x118>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d101      	bne.n	80042fc <HAL_TIM_PWM_Stop+0x44>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_TIM_PWM_Stop+0x46>
 80042fc:	2300      	movs	r3, #0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d017      	beq.n	8004332 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a1a      	ldr	r2, [r3, #32]
 8004308:	f241 1311 	movw	r3, #4369	; 0x1111
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10f      	bne.n	8004332 <HAL_TIM_PWM_Stop+0x7a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6a1a      	ldr	r2, [r3, #32]
 8004318:	f240 4344 	movw	r3, #1092	; 0x444
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d107      	bne.n	8004332 <HAL_TIM_PWM_Stop+0x7a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004330:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6a1a      	ldr	r2, [r3, #32]
 8004338:	f241 1311 	movw	r3, #4369	; 0x1111
 800433c:	4013      	ands	r3, r2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10f      	bne.n	8004362 <HAL_TIM_PWM_Stop+0xaa>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6a1a      	ldr	r2, [r3, #32]
 8004348:	f240 4344 	movw	r3, #1092	; 0x444
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d107      	bne.n	8004362 <HAL_TIM_PWM_Stop+0xaa>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0201 	bic.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <HAL_TIM_PWM_Stop+0xba>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004370:	e023      	b.n	80043ba <HAL_TIM_PWM_Stop+0x102>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b04      	cmp	r3, #4
 8004376:	d104      	bne.n	8004382 <HAL_TIM_PWM_Stop+0xca>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004380:	e01b      	b.n	80043ba <HAL_TIM_PWM_Stop+0x102>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b08      	cmp	r3, #8
 8004386:	d104      	bne.n	8004392 <HAL_TIM_PWM_Stop+0xda>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004390:	e013      	b.n	80043ba <HAL_TIM_PWM_Stop+0x102>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b0c      	cmp	r3, #12
 8004396:	d104      	bne.n	80043a2 <HAL_TIM_PWM_Stop+0xea>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043a0:	e00b      	b.n	80043ba <HAL_TIM_PWM_Stop+0x102>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d104      	bne.n	80043b2 <HAL_TIM_PWM_Stop+0xfa>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b0:	e003      	b.n	80043ba <HAL_TIM_PWM_Stop+0x102>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40012c00 	.word	0x40012c00
 80043c8:	40014000 	.word	0x40014000
 80043cc:	40014400 	.word	0x40014400
 80043d0:	40014800 	.word	0x40014800

080043d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d122      	bne.n	8004430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d11b      	bne.n	8004430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0202 	mvn.w	r2, #2
 8004400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fae3 	bl	80049e2 <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fad5 	bl	80049ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fae6 	bl	80049f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d122      	bne.n	8004484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b04      	cmp	r3, #4
 800444a:	d11b      	bne.n	8004484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0204 	mvn.w	r2, #4
 8004454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fab9 	bl	80049e2 <HAL_TIM_IC_CaptureCallback>
 8004470:	e005      	b.n	800447e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 faab 	bl	80049ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fabc 	bl	80049f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b08      	cmp	r3, #8
 8004490:	d122      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b08      	cmp	r3, #8
 800449e:	d11b      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0208 	mvn.w	r2, #8
 80044a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2204      	movs	r2, #4
 80044ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fa8f 	bl	80049e2 <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa81 	bl	80049ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fa92 	bl	80049f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d122      	bne.n	800452c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d11b      	bne.n	800452c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0210 	mvn.w	r2, #16
 80044fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2208      	movs	r2, #8
 8004502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fa65 	bl	80049e2 <HAL_TIM_IC_CaptureCallback>
 8004518:	e005      	b.n	8004526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa57 	bl	80049ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fa68 	bl	80049f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d10e      	bne.n	8004558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d107      	bne.n	8004558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0201 	mvn.w	r2, #1
 8004550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fb fe68 	bl	8000228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	d10e      	bne.n	8004584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004570:	2b80      	cmp	r3, #128	; 0x80
 8004572:	d107      	bne.n	8004584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 ff1c 	bl	80053bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004592:	d10e      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459e:	2b80      	cmp	r3, #128	; 0x80
 80045a0:	d107      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 ff0f 	bl	80053d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d10e      	bne.n	80045de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d107      	bne.n	80045de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fa16 	bl	8004a0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d10e      	bne.n	800460a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d107      	bne.n	800460a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f06f 0220 	mvn.w	r2, #32
 8004602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fecf 	bl	80053a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800462e:	2302      	movs	r3, #2
 8004630:	e0ff      	b.n	8004832 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b14      	cmp	r3, #20
 800463e:	f200 80f0 	bhi.w	8004822 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004642:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	0800469d 	.word	0x0800469d
 800464c:	08004823 	.word	0x08004823
 8004650:	08004823 	.word	0x08004823
 8004654:	08004823 	.word	0x08004823
 8004658:	080046dd 	.word	0x080046dd
 800465c:	08004823 	.word	0x08004823
 8004660:	08004823 	.word	0x08004823
 8004664:	08004823 	.word	0x08004823
 8004668:	0800471f 	.word	0x0800471f
 800466c:	08004823 	.word	0x08004823
 8004670:	08004823 	.word	0x08004823
 8004674:	08004823 	.word	0x08004823
 8004678:	0800475f 	.word	0x0800475f
 800467c:	08004823 	.word	0x08004823
 8004680:	08004823 	.word	0x08004823
 8004684:	08004823 	.word	0x08004823
 8004688:	080047a1 	.word	0x080047a1
 800468c:	08004823 	.word	0x08004823
 8004690:	08004823 	.word	0x08004823
 8004694:	08004823 	.word	0x08004823
 8004698:	080047e1 	.word	0x080047e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fa34 	bl	8004b10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0208 	orr.w	r2, r2, #8
 80046b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6999      	ldr	r1, [r3, #24]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	619a      	str	r2, [r3, #24]
      break;
 80046da:	e0a5      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fa9a 	bl	8004c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	021a      	lsls	r2, r3, #8
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	619a      	str	r2, [r3, #24]
      break;
 800471c:	e084      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	4618      	mov	r0, r3
 8004726:	f000 faf9 	bl	8004d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0208 	orr.w	r2, r2, #8
 8004738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0204 	bic.w	r2, r2, #4
 8004748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69d9      	ldr	r1, [r3, #28]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	61da      	str	r2, [r3, #28]
      break;
 800475c:	e064      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fb57 	bl	8004e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	021a      	lsls	r2, r3, #8
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	61da      	str	r2, [r3, #28]
      break;
 800479e:	e043      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fb9a 	bl	8004ee0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0208 	orr.w	r2, r2, #8
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0204 	bic.w	r2, r2, #4
 80047ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047de:	e023      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fbd8 	bl	8004f9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	021a      	lsls	r2, r3, #8
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004820:	e002      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
      break;
 8004826:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004830:	7dfb      	ldrb	r3, [r7, #23]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop

0800483c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIM_ConfigClockSource+0x1c>
 8004854:	2302      	movs	r3, #2
 8004856:	e0b6      	b.n	80049c6 <HAL_TIM_ConfigClockSource+0x18a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004876:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800487a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004894:	d03e      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0xd8>
 8004896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489a:	f200 8087 	bhi.w	80049ac <HAL_TIM_ConfigClockSource+0x170>
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a2:	f000 8086 	beq.w	80049b2 <HAL_TIM_ConfigClockSource+0x176>
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048aa:	d87f      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048ac:	2b70      	cmp	r3, #112	; 0x70
 80048ae:	d01a      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0xaa>
 80048b0:	2b70      	cmp	r3, #112	; 0x70
 80048b2:	d87b      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048b4:	2b60      	cmp	r3, #96	; 0x60
 80048b6:	d050      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x11e>
 80048b8:	2b60      	cmp	r3, #96	; 0x60
 80048ba:	d877      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048bc:	2b50      	cmp	r3, #80	; 0x50
 80048be:	d03c      	beq.n	800493a <HAL_TIM_ConfigClockSource+0xfe>
 80048c0:	2b50      	cmp	r3, #80	; 0x50
 80048c2:	d873      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d058      	beq.n	800497a <HAL_TIM_ConfigClockSource+0x13e>
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d86f      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048cc:	2b30      	cmp	r3, #48	; 0x30
 80048ce:	d064      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x15e>
 80048d0:	2b30      	cmp	r3, #48	; 0x30
 80048d2:	d86b      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d060      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x15e>
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d867      	bhi.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d05c      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x15e>
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d05a      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x15e>
 80048e4:	e062      	b.n	80049ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6899      	ldr	r1, [r3, #8]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f000 fc2b 	bl	8005150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	609a      	str	r2, [r3, #8]
      break;
 8004912:	e04f      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6899      	ldr	r1, [r3, #8]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f000 fc14 	bl	8005150 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004936:	609a      	str	r2, [r3, #8]
      break;
 8004938:	e03c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6859      	ldr	r1, [r3, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	461a      	mov	r2, r3
 8004948:	f000 fb88 	bl	800505c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2150      	movs	r1, #80	; 0x50
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fbe1 	bl	800511a <TIM_ITRx_SetConfig>
      break;
 8004958:	e02c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	461a      	mov	r2, r3
 8004968:	f000 fba7 	bl	80050ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2160      	movs	r1, #96	; 0x60
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fbd1 	bl	800511a <TIM_ITRx_SetConfig>
      break;
 8004978:	e01c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6859      	ldr	r1, [r3, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	461a      	mov	r2, r3
 8004988:	f000 fb68 	bl	800505c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2140      	movs	r1, #64	; 0x40
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fbc1 	bl	800511a <TIM_ITRx_SetConfig>
      break;
 8004998:	e00c      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4619      	mov	r1, r3
 80049a4:	4610      	mov	r0, r2
 80049a6:	f000 fbb8 	bl	800511a <TIM_ITRx_SetConfig>
      break;
 80049aa:	e003      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
      break;
 80049b0:	e000      	b.n	80049b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80049b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
	...

08004a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a32      	ldr	r2, [pc, #200]	; (8004afc <TIM_Base_SetConfig+0xdc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d007      	beq.n	8004a48 <TIM_Base_SetConfig+0x28>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3e:	d003      	beq.n	8004a48 <TIM_Base_SetConfig+0x28>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a2f      	ldr	r2, [pc, #188]	; (8004b00 <TIM_Base_SetConfig+0xe0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d108      	bne.n	8004a5a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a27      	ldr	r2, [pc, #156]	; (8004afc <TIM_Base_SetConfig+0xdc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <TIM_Base_SetConfig+0x6a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a68:	d00f      	beq.n	8004a8a <TIM_Base_SetConfig+0x6a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a24      	ldr	r2, [pc, #144]	; (8004b00 <TIM_Base_SetConfig+0xe0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <TIM_Base_SetConfig+0x6a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a23      	ldr	r2, [pc, #140]	; (8004b04 <TIM_Base_SetConfig+0xe4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <TIM_Base_SetConfig+0x6a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a22      	ldr	r2, [pc, #136]	; (8004b08 <TIM_Base_SetConfig+0xe8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_Base_SetConfig+0x6a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a21      	ldr	r2, [pc, #132]	; (8004b0c <TIM_Base_SetConfig+0xec>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d108      	bne.n	8004a9c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a0e      	ldr	r2, [pc, #56]	; (8004afc <TIM_Base_SetConfig+0xdc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00b      	beq.n	8004ae0 <TIM_Base_SetConfig+0xc0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a0e      	ldr	r2, [pc, #56]	; (8004b04 <TIM_Base_SetConfig+0xe4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d007      	beq.n	8004ae0 <TIM_Base_SetConfig+0xc0>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a0d      	ldr	r2, [pc, #52]	; (8004b08 <TIM_Base_SetConfig+0xe8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_Base_SetConfig+0xc0>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a0c      	ldr	r2, [pc, #48]	; (8004b0c <TIM_Base_SetConfig+0xec>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d103      	bne.n	8004ae8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	615a      	str	r2, [r3, #20]
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800

08004b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f023 0201 	bic.w	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f023 0302 	bic.w	r3, r3, #2
 8004b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a28      	ldr	r2, [pc, #160]	; (8004c0c <TIM_OC1_SetConfig+0xfc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00b      	beq.n	8004b88 <TIM_OC1_SetConfig+0x78>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a27      	ldr	r2, [pc, #156]	; (8004c10 <TIM_OC1_SetConfig+0x100>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d007      	beq.n	8004b88 <TIM_OC1_SetConfig+0x78>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a26      	ldr	r2, [pc, #152]	; (8004c14 <TIM_OC1_SetConfig+0x104>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_OC1_SetConfig+0x78>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a25      	ldr	r2, [pc, #148]	; (8004c18 <TIM_OC1_SetConfig+0x108>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d10c      	bne.n	8004ba2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0308 	bic.w	r3, r3, #8
 8004b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f023 0304 	bic.w	r3, r3, #4
 8004ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <TIM_OC1_SetConfig+0xfc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00b      	beq.n	8004bc2 <TIM_OC1_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <TIM_OC1_SetConfig+0x100>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <TIM_OC1_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a17      	ldr	r2, [pc, #92]	; (8004c14 <TIM_OC1_SetConfig+0x104>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d003      	beq.n	8004bc2 <TIM_OC1_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <TIM_OC1_SetConfig+0x108>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d111      	bne.n	8004be6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	621a      	str	r2, [r3, #32]
}
 8004c00:	bf00      	nop
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40014000 	.word	0x40014000
 8004c14:	40014400 	.word	0x40014400
 8004c18:	40014800 	.word	0x40014800

08004c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f023 0210 	bic.w	r2, r3, #16
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0320 	bic.w	r3, r3, #32
 8004c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <TIM_OC2_SetConfig+0xf0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10d      	bne.n	8004c9c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <TIM_OC2_SetConfig+0xf0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00b      	beq.n	8004cbc <TIM_OC2_SetConfig+0xa0>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a1a      	ldr	r2, [pc, #104]	; (8004d10 <TIM_OC2_SetConfig+0xf4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d007      	beq.n	8004cbc <TIM_OC2_SetConfig+0xa0>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <TIM_OC2_SetConfig+0xf8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_OC2_SetConfig+0xa0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <TIM_OC2_SetConfig+0xfc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d113      	bne.n	8004ce4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cca:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40012c00 	.word	0x40012c00
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800

08004d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0303 	bic.w	r3, r3, #3
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a23      	ldr	r2, [pc, #140]	; (8004e08 <TIM_OC3_SetConfig+0xec>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d10d      	bne.n	8004d9a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d98:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1a      	ldr	r2, [pc, #104]	; (8004e08 <TIM_OC3_SetConfig+0xec>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00b      	beq.n	8004dba <TIM_OC3_SetConfig+0x9e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <TIM_OC3_SetConfig+0xf0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d007      	beq.n	8004dba <TIM_OC3_SetConfig+0x9e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <TIM_OC3_SetConfig+0xf4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_OC3_SetConfig+0x9e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a17      	ldr	r2, [pc, #92]	; (8004e14 <TIM_OC3_SetConfig+0xf8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d113      	bne.n	8004de2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	621a      	str	r2, [r3, #32]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40014400 	.word	0x40014400
 8004e14:	40014800 	.word	0x40014800

08004e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	031b      	lsls	r3, r3, #12
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <TIM_OC4_SetConfig+0xb8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <TIM_OC4_SetConfig+0x7c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <TIM_OC4_SetConfig+0xbc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d007      	beq.n	8004e94 <TIM_OC4_SetConfig+0x7c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a14      	ldr	r2, [pc, #80]	; (8004ed8 <TIM_OC4_SetConfig+0xc0>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <TIM_OC4_SetConfig+0x7c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <TIM_OC4_SetConfig+0xc4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d109      	bne.n	8004ea8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	019b      	lsls	r3, r3, #6
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800

08004ee0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <TIM_OC5_SetConfig+0xac>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00b      	beq.n	8004f52 <TIM_OC5_SetConfig+0x72>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <TIM_OC5_SetConfig+0xb0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d007      	beq.n	8004f52 <TIM_OC5_SetConfig+0x72>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <TIM_OC5_SetConfig+0xb4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_OC5_SetConfig+0x72>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a12      	ldr	r2, [pc, #72]	; (8004f98 <TIM_OC5_SetConfig+0xb8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d109      	bne.n	8004f66 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	621a      	str	r2, [r3, #32]
}
 8004f80:	bf00      	nop
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	40012c00 	.word	0x40012c00
 8004f90:	40014000 	.word	0x40014000
 8004f94:	40014400 	.word	0x40014400
 8004f98:	40014800 	.word	0x40014800

08004f9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	021b      	lsls	r3, r3, #8
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	051b      	lsls	r3, r3, #20
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a16      	ldr	r2, [pc, #88]	; (800504c <TIM_OC6_SetConfig+0xb0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00b      	beq.n	8005010 <TIM_OC6_SetConfig+0x74>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a15      	ldr	r2, [pc, #84]	; (8005050 <TIM_OC6_SetConfig+0xb4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d007      	beq.n	8005010 <TIM_OC6_SetConfig+0x74>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a14      	ldr	r2, [pc, #80]	; (8005054 <TIM_OC6_SetConfig+0xb8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_OC6_SetConfig+0x74>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a13      	ldr	r2, [pc, #76]	; (8005058 <TIM_OC6_SetConfig+0xbc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d109      	bne.n	8005024 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	029b      	lsls	r3, r3, #10
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40012c00 	.word	0x40012c00
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800

0800505c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f023 0201 	bic.w	r2, r3, #1
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f023 030a 	bic.w	r3, r3, #10
 8005098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	621a      	str	r2, [r3, #32]
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b087      	sub	sp, #28
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f023 0210 	bic.w	r2, r3, #16
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	031b      	lsls	r3, r3, #12
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	f043 0307 	orr.w	r3, r3, #7
 800513c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	609a      	str	r2, [r3, #8]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800516a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	021a      	lsls	r2, r3, #8
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	431a      	orrs	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4313      	orrs	r3, r2
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	2201      	movs	r2, #1
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1a      	ldr	r2, [r3, #32]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	43db      	mvns	r3, r3
 80051b2:	401a      	ands	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f003 031f 	and.w	r3, r3, #31
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	fa01 f303 	lsl.w	r3, r1, r3
 80051c8:	431a      	orrs	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
	...

080051dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e054      	b.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a24      	ldr	r2, [pc, #144]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d108      	bne.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005224:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a17      	ldr	r2, [pc, #92]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525c:	d009      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a11      	ldr	r2, [pc, #68]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10c      	bne.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	4313      	orrs	r3, r2
 8005282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40012c00 	.word	0x40012c00
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40014000 	.word	0x40014000

080052b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e060      	b.n	8005396 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a14      	ldr	r2, [pc, #80]	; (80053a4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d115      	bne.n	8005384 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	051b      	lsls	r3, r3, #20
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40012c00 	.word	0x40012c00

080053a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e040      	b.n	8005478 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fb fce4 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2224      	movs	r2, #36	; 0x24
 8005410:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fb78 	bl	8005b18 <UART_SetConfig>
 8005428:	4603      	mov	r3, r0
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e022      	b.n	8005478 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fca2 	bl	8005d84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800544e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800545e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fd29 	bl	8005ec8 <UART_CheckIdleState>
 8005476:	4603      	mov	r3, r0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005492:	2b20      	cmp	r3, #32
 8005494:	d13d      	bne.n	8005512 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_UART_Receive_IT+0x22>
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e036      	b.n	8005514 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_UART_Receive_IT+0x34>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e02f      	b.n	8005514 <HAL_UART_Receive_IT+0x94>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d018      	beq.n	8005502 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	613b      	str	r3, [r7, #16]
   return(result);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	623b      	str	r3, [r7, #32]
 80054f0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	69f9      	ldr	r1, [r7, #28]
 80054f4:	6a3a      	ldr	r2, [r7, #32]
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e6      	bne.n	80054d0 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	461a      	mov	r2, r3
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 fdeb 	bl	80060e4 <UART_Start_Receive_IT>
 800550e:	4603      	mov	r3, r0
 8005510:	e000      	b.n	8005514 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005512:	2302      	movs	r3, #2
  }
}
 8005514:	4618      	mov	r0, r3
 8005516:	3728      	adds	r7, #40	; 0x28
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b0ba      	sub	sp, #232	; 0xe8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005542:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005546:	f640 030f 	movw	r3, #2063	; 0x80f
 800554a:	4013      	ands	r3, r2
 800554c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d115      	bne.n	8005584 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00f      	beq.n	8005584 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 82a3 	beq.w	8005ac0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	4798      	blx	r3
      }
      return;
 8005582:	e29d      	b.n	8005ac0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8117 	beq.w	80057bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800558e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800559a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800559e:	4b85      	ldr	r3, [pc, #532]	; (80057b4 <HAL_UART_IRQHandler+0x298>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 810a 	beq.w	80057bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d011      	beq.n	80055d8 <HAL_UART_IRQHandler+0xbc>
 80055b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00b      	beq.n	80055d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2201      	movs	r2, #1
 80055c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ce:	f043 0201 	orr.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d011      	beq.n	8005608 <HAL_UART_IRQHandler+0xec>
 80055e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00b      	beq.n	8005608 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2202      	movs	r2, #2
 80055f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055fe:	f043 0204 	orr.w	r2, r3, #4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d011      	beq.n	8005638 <HAL_UART_IRQHandler+0x11c>
 8005614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2204      	movs	r2, #4
 8005626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800562e:	f043 0202 	orr.w	r2, r3, #2
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d017      	beq.n	8005674 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d105      	bne.n	800565c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005654:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00b      	beq.n	8005674 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2208      	movs	r2, #8
 8005662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800566a:	f043 0208 	orr.w	r2, r3, #8
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567c:	2b00      	cmp	r3, #0
 800567e:	d012      	beq.n	80056a6 <HAL_UART_IRQHandler+0x18a>
 8005680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00c      	beq.n	80056a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800569c:	f043 0220 	orr.w	r2, r3, #32
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8209 	beq.w	8005ac4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00d      	beq.n	80056da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ee:	2b40      	cmp	r3, #64	; 0x40
 80056f0:	d005      	beq.n	80056fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d04f      	beq.n	800579e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fd9c 	bl	800623c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570e:	2b40      	cmp	r3, #64	; 0x40
 8005710:	d141      	bne.n	8005796 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3308      	adds	r3, #8
 8005718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800572c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3308      	adds	r3, #8
 800573a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800573e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005742:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800574a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1d9      	bne.n	8005712 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	2b00      	cmp	r3, #0
 8005764:	d013      	beq.n	800578e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a13      	ldr	r2, [pc, #76]	; (80057b8 <HAL_UART_IRQHandler+0x29c>)
 800576c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	4618      	mov	r0, r3
 8005774:	f7fc ff1e 	bl	80025b4 <HAL_DMA_Abort_IT>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d017      	beq.n	80057ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005788:	4610      	mov	r0, r2
 800578a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578c:	e00f      	b.n	80057ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f9ac 	bl	8005aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005794:	e00b      	b.n	80057ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f9a8 	bl	8005aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579c:	e007      	b.n	80057ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f9a4 	bl	8005aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80057ac:	e18a      	b.n	8005ac4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ae:	bf00      	nop
    return;
 80057b0:	e188      	b.n	8005ac4 <HAL_UART_IRQHandler+0x5a8>
 80057b2:	bf00      	nop
 80057b4:	04000120 	.word	0x04000120
 80057b8:	08006303 	.word	0x08006303

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	f040 8143 	bne.w	8005a4c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 813c 	beq.w	8005a4c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8135 	beq.w	8005a4c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2210      	movs	r2, #16
 80057e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	f040 80b1 	bne.w	800595c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005806:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 815c 	beq.w	8005ac8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800581a:	429a      	cmp	r2, r3
 800581c:	f080 8154 	bcs.w	8005ac8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005826:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	2b20      	cmp	r3, #32
 8005832:	f000 8085 	beq.w	8005940 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800584a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800584e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005852:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005860:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005864:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800586c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005878:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1da      	bne.n	8005836 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3308      	adds	r3, #8
 8005886:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005892:	f023 0301 	bic.w	r3, r3, #1
 8005896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e1      	bne.n	8005880 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3308      	adds	r3, #8
 80058c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3308      	adds	r3, #8
 80058dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e3      	bne.n	80058bc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800590e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005910:	f023 0310 	bic.w	r3, r3, #16
 8005914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005922:	65bb      	str	r3, [r7, #88]	; 0x58
 8005924:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005928:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e4      	bne.n	8005900 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593a:	4618      	mov	r0, r3
 800593c:	f7fc fe01 	bl	8002542 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800594c:	b29b      	uxth	r3, r3
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	b29b      	uxth	r3, r3
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f8d3 	bl	8005b00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800595a:	e0b5      	b.n	8005ac8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005968:	b29b      	uxth	r3, r3
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 80a7 	beq.w	8005acc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800597e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80a2 	beq.w	8005acc <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800599c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059aa:	647b      	str	r3, [r7, #68]	; 0x44
 80059ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e4      	bne.n	8005988 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3308      	adds	r3, #8
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	623b      	str	r3, [r7, #32]
   return(result);
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	f023 0301 	bic.w	r3, r3, #1
 80059d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059e2:	633a      	str	r2, [r7, #48]	; 0x30
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e3      	bne.n	80059be <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f023 0310 	bic.w	r3, r3, #16
 8005a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a2a:	61fb      	str	r3, [r7, #28]
 8005a2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	69b9      	ldr	r1, [r7, #24]
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	617b      	str	r3, [r7, #20]
   return(result);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e4      	bne.n	8005a08 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f85b 	bl	8005b00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a4a:	e03f      	b.n	8005acc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00e      	beq.n	8005a76 <HAL_UART_IRQHandler+0x55a>
 8005a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fde3 	bl	800663a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a74:	e02d      	b.n	8005ad2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00e      	beq.n	8005aa0 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d008      	beq.n	8005aa0 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d01c      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	4798      	blx	r3
    }
    return;
 8005a9e:	e017      	b.n	8005ad0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d012      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x5b6>
 8005aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00c      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fc38 	bl	800632e <UART_EndTransmit_IT>
    return;
 8005abe:	e008      	b.n	8005ad2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005ac0:	bf00      	nop
 8005ac2:	e006      	b.n	8005ad2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005ac4:	bf00      	nop
 8005ac6:	e004      	b.n	8005ad2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005ac8:	bf00      	nop
 8005aca:	e002      	b.n	8005ad2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005acc:	bf00      	nop
 8005ace:	e000      	b.n	8005ad2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005ad0:	bf00      	nop
  }

}
 8005ad2:	37e8      	adds	r7, #232	; 0xe8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b8a      	ldr	r3, [pc, #552]	; (8005d6c <UART_SetConfig+0x254>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	6979      	ldr	r1, [r7, #20]
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a78      	ldr	r2, [pc, #480]	; (8005d70 <UART_SetConfig+0x258>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d120      	bne.n	8005bd6 <UART_SetConfig+0xbe>
 8005b94:	4b77      	ldr	r3, [pc, #476]	; (8005d74 <UART_SetConfig+0x25c>)
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d817      	bhi.n	8005bd0 <UART_SetConfig+0xb8>
 8005ba0:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <UART_SetConfig+0x90>)
 8005ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba6:	bf00      	nop
 8005ba8:	08005bb9 	.word	0x08005bb9
 8005bac:	08005bc5 	.word	0x08005bc5
 8005bb0:	08005bcb 	.word	0x08005bcb
 8005bb4:	08005bbf 	.word	0x08005bbf
 8005bb8:	2300      	movs	r3, #0
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e01d      	b.n	8005bfa <UART_SetConfig+0xe2>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	77fb      	strb	r3, [r7, #31]
 8005bc2:	e01a      	b.n	8005bfa <UART_SetConfig+0xe2>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	77fb      	strb	r3, [r7, #31]
 8005bc8:	e017      	b.n	8005bfa <UART_SetConfig+0xe2>
 8005bca:	2308      	movs	r3, #8
 8005bcc:	77fb      	strb	r3, [r7, #31]
 8005bce:	e014      	b.n	8005bfa <UART_SetConfig+0xe2>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	77fb      	strb	r3, [r7, #31]
 8005bd4:	e011      	b.n	8005bfa <UART_SetConfig+0xe2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a67      	ldr	r2, [pc, #412]	; (8005d78 <UART_SetConfig+0x260>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d102      	bne.n	8005be6 <UART_SetConfig+0xce>
 8005be0:	2300      	movs	r3, #0
 8005be2:	77fb      	strb	r3, [r7, #31]
 8005be4:	e009      	b.n	8005bfa <UART_SetConfig+0xe2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a64      	ldr	r2, [pc, #400]	; (8005d7c <UART_SetConfig+0x264>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d102      	bne.n	8005bf6 <UART_SetConfig+0xde>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e001      	b.n	8005bfa <UART_SetConfig+0xe2>
 8005bf6:	2310      	movs	r3, #16
 8005bf8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c02:	d15b      	bne.n	8005cbc <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005c04:	7ffb      	ldrb	r3, [r7, #31]
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d827      	bhi.n	8005c5a <UART_SetConfig+0x142>
 8005c0a:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <UART_SetConfig+0xf8>)
 8005c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c3d 	.word	0x08005c3d
 8005c18:	08005c45 	.word	0x08005c45
 8005c1c:	08005c5b 	.word	0x08005c5b
 8005c20:	08005c4b 	.word	0x08005c4b
 8005c24:	08005c5b 	.word	0x08005c5b
 8005c28:	08005c5b 	.word	0x08005c5b
 8005c2c:	08005c5b 	.word	0x08005c5b
 8005c30:	08005c53 	.word	0x08005c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c34:	f7fd ff80 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8005c38:	61b8      	str	r0, [r7, #24]
        break;
 8005c3a:	e013      	b.n	8005c64 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c3c:	f7fd ff9e 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 8005c40:	61b8      	str	r0, [r7, #24]
        break;
 8005c42:	e00f      	b.n	8005c64 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c44:	4b4e      	ldr	r3, [pc, #312]	; (8005d80 <UART_SetConfig+0x268>)
 8005c46:	61bb      	str	r3, [r7, #24]
        break;
 8005c48:	e00c      	b.n	8005c64 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c4a:	f7fd feff 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8005c4e:	61b8      	str	r0, [r7, #24]
        break;
 8005c50:	e008      	b.n	8005c64 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c56:	61bb      	str	r3, [r7, #24]
        break;
 8005c58:	e004      	b.n	8005c64 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	77bb      	strb	r3, [r7, #30]
        break;
 8005c62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d074      	beq.n	8005d54 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	005a      	lsls	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	441a      	add	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b0f      	cmp	r3, #15
 8005c86:	d916      	bls.n	8005cb6 <UART_SetConfig+0x19e>
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8e:	d212      	bcs.n	8005cb6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f023 030f 	bic.w	r3, r3, #15
 8005c98:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	085b      	lsrs	r3, r3, #1
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	89fb      	ldrh	r3, [r7, #14]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	89fa      	ldrh	r2, [r7, #14]
 8005cb2:	60da      	str	r2, [r3, #12]
 8005cb4:	e04e      	b.n	8005d54 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	77bb      	strb	r3, [r7, #30]
 8005cba:	e04b      	b.n	8005d54 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cbc:	7ffb      	ldrb	r3, [r7, #31]
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d827      	bhi.n	8005d12 <UART_SetConfig+0x1fa>
 8005cc2:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <UART_SetConfig+0x1b0>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005ced 	.word	0x08005ced
 8005ccc:	08005cf5 	.word	0x08005cf5
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	08005d13 	.word	0x08005d13
 8005cd8:	08005d03 	.word	0x08005d03
 8005cdc:	08005d13 	.word	0x08005d13
 8005ce0:	08005d13 	.word	0x08005d13
 8005ce4:	08005d13 	.word	0x08005d13
 8005ce8:	08005d0b 	.word	0x08005d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cec:	f7fd ff24 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8005cf0:	61b8      	str	r0, [r7, #24]
        break;
 8005cf2:	e013      	b.n	8005d1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf4:	f7fd ff42 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 8005cf8:	61b8      	str	r0, [r7, #24]
        break;
 8005cfa:	e00f      	b.n	8005d1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cfc:	4b20      	ldr	r3, [pc, #128]	; (8005d80 <UART_SetConfig+0x268>)
 8005cfe:	61bb      	str	r3, [r7, #24]
        break;
 8005d00:	e00c      	b.n	8005d1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d02:	f7fd fea3 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8005d06:	61b8      	str	r0, [r7, #24]
        break;
 8005d08:	e008      	b.n	8005d1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0e:	61bb      	str	r3, [r7, #24]
        break;
 8005d10:	e004      	b.n	8005d1c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	77bb      	strb	r3, [r7, #30]
        break;
 8005d1a:	bf00      	nop
    }

    if (pclk != 0U)
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d018      	beq.n	8005d54 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	085a      	lsrs	r2, r3, #1
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	441a      	add	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	2b0f      	cmp	r3, #15
 8005d3c:	d908      	bls.n	8005d50 <UART_SetConfig+0x238>
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d44:	d204      	bcs.n	8005d50 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	60da      	str	r2, [r3, #12]
 8005d4e:	e001      	b.n	8005d54 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d60:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3720      	adds	r7, #32
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	efff69f3 	.word	0xefff69f3
 8005d70:	40013800 	.word	0x40013800
 8005d74:	40021000 	.word	0x40021000
 8005d78:	40004400 	.word	0x40004400
 8005d7c:	40004800 	.word	0x40004800
 8005d80:	007a1200 	.word	0x007a1200

08005d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01a      	beq.n	8005e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e82:	d10a      	bne.n	8005e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ed8:	f7fb f8e8 	bl	80010ac <HAL_GetTick>
 8005edc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d10e      	bne.n	8005f0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f82d 	bl	8005f5a <UART_WaitOnFlagUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e023      	b.n	8005f52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d10e      	bne.n	8005f36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f817 	bl	8005f5a <UART_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e00d      	b.n	8005f52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b09c      	sub	sp, #112	; 0x70
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	603b      	str	r3, [r7, #0]
 8005f66:	4613      	mov	r3, r2
 8005f68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f6a:	e0a5      	b.n	80060b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f72:	f000 80a1 	beq.w	80060b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f76:	f7fb f899 	bl	80010ac <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d302      	bcc.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x32>
 8005f86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d13e      	bne.n	800600a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fa0:	667b      	str	r3, [r7, #100]	; 0x64
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e6      	bne.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3308      	adds	r3, #8
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd0:	f023 0301 	bic.w	r3, r3, #1
 8005fd4:	663b      	str	r3, [r7, #96]	; 0x60
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fde:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fe0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e5      	bne.n	8005fbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e067      	b.n	80060da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d04f      	beq.n	80060b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006026:	d147      	bne.n	80060b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006030:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006046:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
 8006052:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e6      	bne.n	8006032 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	613b      	str	r3, [r7, #16]
   return(result);
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	66bb      	str	r3, [r7, #104]	; 0x68
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3308      	adds	r3, #8
 8006082:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006084:	623a      	str	r2, [r7, #32]
 8006086:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	69f9      	ldr	r1, [r7, #28]
 800608a:	6a3a      	ldr	r2, [r7, #32]
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	61bb      	str	r3, [r7, #24]
   return(result);
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e5      	bne.n	8006064 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e010      	b.n	80060da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	69da      	ldr	r2, [r3, #28]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4013      	ands	r3, r2
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	bf0c      	ite	eq
 80060c8:	2301      	moveq	r3, #1
 80060ca:	2300      	movne	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	f43f af4a 	beq.w	8005f6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3770      	adds	r7, #112	; 0x70
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b091      	sub	sp, #68	; 0x44
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	4613      	mov	r3, r2
 80060f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	88fa      	ldrh	r2, [r7, #6]
 80060fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	88fa      	ldrh	r2, [r7, #6]
 8006104:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006116:	d10e      	bne.n	8006136 <UART_Start_Receive_IT+0x52>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <UART_Start_Receive_IT+0x48>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006126:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800612a:	e02d      	b.n	8006188 <UART_Start_Receive_IT+0xa4>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	22ff      	movs	r2, #255	; 0xff
 8006130:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006134:	e028      	b.n	8006188 <UART_Start_Receive_IT+0xa4>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10d      	bne.n	800615a <UART_Start_Receive_IT+0x76>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d104      	bne.n	8006150 <UART_Start_Receive_IT+0x6c>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	22ff      	movs	r2, #255	; 0xff
 800614a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800614e:	e01b      	b.n	8006188 <UART_Start_Receive_IT+0xa4>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	227f      	movs	r2, #127	; 0x7f
 8006154:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006158:	e016      	b.n	8006188 <UART_Start_Receive_IT+0xa4>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006162:	d10d      	bne.n	8006180 <UART_Start_Receive_IT+0x9c>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <UART_Start_Receive_IT+0x92>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	227f      	movs	r2, #127	; 0x7f
 8006170:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006174:	e008      	b.n	8006188 <UART_Start_Receive_IT+0xa4>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	223f      	movs	r2, #63	; 0x3f
 800617a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800617e:	e003      	b.n	8006188 <UART_Start_Receive_IT+0xa4>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2222      	movs	r2, #34	; 0x22
 8006194:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3308      	adds	r3, #8
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	f043 0301 	orr.w	r3, r3, #1
 80061ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061b6:	637a      	str	r2, [r7, #52]	; 0x34
 80061b8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d2:	d107      	bne.n	80061e4 <UART_Start_Receive_IT+0x100>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d103      	bne.n	80061e4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4a15      	ldr	r2, [pc, #84]	; (8006234 <UART_Start_Receive_IT+0x150>)
 80061e0:	665a      	str	r2, [r3, #100]	; 0x64
 80061e2:	e002      	b.n	80061ea <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4a14      	ldr	r2, [pc, #80]	; (8006238 <UART_Start_Receive_IT+0x154>)
 80061e8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006206:	63bb      	str	r3, [r7, #56]	; 0x38
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	623b      	str	r3, [r7, #32]
 8006212:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	69f9      	ldr	r1, [r7, #28]
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	61bb      	str	r3, [r7, #24]
   return(result);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e6      	bne.n	80061f2 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3744      	adds	r7, #68	; 0x44
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	080064df 	.word	0x080064df
 8006238:	08006383 	.word	0x08006383

0800623c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800623c:	b480      	push	{r7}
 800623e:	b095      	sub	sp, #84	; 0x54
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006262:	643b      	str	r3, [r7, #64]	; 0x40
 8006264:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e6      	bne.n	8006244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3308      	adds	r3, #8
 800627c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	61fb      	str	r3, [r7, #28]
   return(result);
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f023 0301 	bic.w	r3, r3, #1
 800628c:	64bb      	str	r3, [r7, #72]	; 0x48
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3308      	adds	r3, #8
 8006294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800629c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e5      	bne.n	8006276 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d118      	bne.n	80062e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	60bb      	str	r3, [r7, #8]
   return(result);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f023 0310 	bic.w	r3, r3, #16
 80062c6:	647b      	str	r3, [r7, #68]	; 0x44
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	6979      	ldr	r1, [r7, #20]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	613b      	str	r3, [r7, #16]
   return(result);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e6      	bne.n	80062b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2220      	movs	r2, #32
 80062e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80062f6:	bf00      	nop
 80062f8:	3754      	adds	r7, #84	; 0x54
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff fbe3 	bl	8005aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b088      	sub	sp, #32
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	60bb      	str	r3, [r7, #8]
   return(result);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	461a      	mov	r2, r3
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	61bb      	str	r3, [r7, #24]
 8006356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6979      	ldr	r1, [r7, #20]
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	613b      	str	r3, [r7, #16]
   return(result);
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e6      	bne.n	8006336 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7ff fbaf 	bl	8005ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800637a:	bf00      	nop
 800637c:	3720      	adds	r7, #32
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b096      	sub	sp, #88	; 0x58
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006390:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006398:	2b22      	cmp	r3, #34	; 0x22
 800639a:	f040 8094 	bne.w	80064c6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80063a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80063a8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80063ac:	b2d9      	uxtb	r1, r3
 80063ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b8:	400a      	ands	r2, r1
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d177      	bne.n	80064d6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063fa:	653b      	str	r3, [r7, #80]	; 0x50
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006404:	647b      	str	r3, [r7, #68]	; 0x44
 8006406:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800640a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e6      	bne.n	80063e6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3308      	adds	r3, #8
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	623b      	str	r3, [r7, #32]
   return(result);
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3308      	adds	r3, #8
 8006436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006438:	633a      	str	r2, [r7, #48]	; 0x30
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800643e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006440:	e841 2300 	strex	r3, r2, [r1]
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e5      	bne.n	8006418 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645c:	2b01      	cmp	r3, #1
 800645e:	d12e      	bne.n	80064be <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	60fb      	str	r3, [r7, #12]
   return(result);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0310 	bic.w	r3, r3, #16
 800647a:	64bb      	str	r3, [r7, #72]	; 0x48
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006484:	61fb      	str	r3, [r7, #28]
 8006486:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	69b9      	ldr	r1, [r7, #24]
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	617b      	str	r3, [r7, #20]
   return(result);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e6      	bne.n	8006466 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f003 0310 	and.w	r3, r3, #16
 80064a2:	2b10      	cmp	r3, #16
 80064a4:	d103      	bne.n	80064ae <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2210      	movs	r2, #16
 80064ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff fb22 	bl	8005b00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064bc:	e00b      	b.n	80064d6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7f9 fe82 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 80064c4:	e007      	b.n	80064d6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699a      	ldr	r2, [r3, #24]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0208 	orr.w	r2, r2, #8
 80064d4:	619a      	str	r2, [r3, #24]
}
 80064d6:	bf00      	nop
 80064d8:	3758      	adds	r7, #88	; 0x58
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b096      	sub	sp, #88	; 0x58
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064f4:	2b22      	cmp	r3, #34	; 0x22
 80064f6:	f040 8094 	bne.w	8006622 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006500:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006508:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800650a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800650e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006512:	4013      	ands	r3, r2
 8006514:	b29a      	uxth	r2, r3
 8006516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006518:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651e:	1c9a      	adds	r2, r3, #2
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800653c:	b29b      	uxth	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d177      	bne.n	8006632 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006560:	643b      	str	r3, [r7, #64]	; 0x40
 8006562:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e6      	bne.n	8006542 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3308      	adds	r3, #8
 800657a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	61fb      	str	r3, [r7, #28]
   return(result);
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f023 0301 	bic.w	r3, r3, #1
 800658a:	64bb      	str	r3, [r7, #72]	; 0x48
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3308      	adds	r3, #8
 8006592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800659a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e5      	bne.n	8006574 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d12e      	bne.n	800661a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f023 0310 	bic.w	r3, r3, #16
 80065d6:	647b      	str	r3, [r7, #68]	; 0x44
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	6979      	ldr	r1, [r7, #20]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	613b      	str	r3, [r7, #16]
   return(result);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e6      	bne.n	80065c2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f003 0310 	and.w	r3, r3, #16
 80065fe:	2b10      	cmp	r3, #16
 8006600:	d103      	bne.n	800660a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2210      	movs	r2, #16
 8006608:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff fa74 	bl	8005b00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006618:	e00b      	b.n	8006632 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7f9 fdd4 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8006620:	e007      	b.n	8006632 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	699a      	ldr	r2, [r3, #24]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0208 	orr.w	r2, r2, #8
 8006630:	619a      	str	r2, [r3, #24]
}
 8006632:	bf00      	nop
 8006634:	3758      	adds	r7, #88	; 0x58
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <__libc_init_array>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	4d0d      	ldr	r5, [pc, #52]	; (8006688 <__libc_init_array+0x38>)
 8006654:	4c0d      	ldr	r4, [pc, #52]	; (800668c <__libc_init_array+0x3c>)
 8006656:	1b64      	subs	r4, r4, r5
 8006658:	10a4      	asrs	r4, r4, #2
 800665a:	2600      	movs	r6, #0
 800665c:	42a6      	cmp	r6, r4
 800665e:	d109      	bne.n	8006674 <__libc_init_array+0x24>
 8006660:	4d0b      	ldr	r5, [pc, #44]	; (8006690 <__libc_init_array+0x40>)
 8006662:	4c0c      	ldr	r4, [pc, #48]	; (8006694 <__libc_init_array+0x44>)
 8006664:	f000 f82e 	bl	80066c4 <_init>
 8006668:	1b64      	subs	r4, r4, r5
 800666a:	10a4      	asrs	r4, r4, #2
 800666c:	2600      	movs	r6, #0
 800666e:	42a6      	cmp	r6, r4
 8006670:	d105      	bne.n	800667e <__libc_init_array+0x2e>
 8006672:	bd70      	pop	{r4, r5, r6, pc}
 8006674:	f855 3b04 	ldr.w	r3, [r5], #4
 8006678:	4798      	blx	r3
 800667a:	3601      	adds	r6, #1
 800667c:	e7ee      	b.n	800665c <__libc_init_array+0xc>
 800667e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006682:	4798      	blx	r3
 8006684:	3601      	adds	r6, #1
 8006686:	e7f2      	b.n	800666e <__libc_init_array+0x1e>
 8006688:	08006714 	.word	0x08006714
 800668c:	08006714 	.word	0x08006714
 8006690:	08006714 	.word	0x08006714
 8006694:	08006718 	.word	0x08006718

08006698 <memcpy>:
 8006698:	440a      	add	r2, r1
 800669a:	4291      	cmp	r1, r2
 800669c:	f100 33ff 	add.w	r3, r0, #4294967295
 80066a0:	d100      	bne.n	80066a4 <memcpy+0xc>
 80066a2:	4770      	bx	lr
 80066a4:	b510      	push	{r4, lr}
 80066a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ae:	4291      	cmp	r1, r2
 80066b0:	d1f9      	bne.n	80066a6 <memcpy+0xe>
 80066b2:	bd10      	pop	{r4, pc}

080066b4 <memset>:
 80066b4:	4402      	add	r2, r0
 80066b6:	4603      	mov	r3, r0
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d100      	bne.n	80066be <memset+0xa>
 80066bc:	4770      	bx	lr
 80066be:	f803 1b01 	strb.w	r1, [r3], #1
 80066c2:	e7f9      	b.n	80066b8 <memset+0x4>

080066c4 <_init>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	bf00      	nop
 80066c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ca:	bc08      	pop	{r3}
 80066cc:	469e      	mov	lr, r3
 80066ce:	4770      	bx	lr

080066d0 <_fini>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	bf00      	nop
 80066d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d6:	bc08      	pop	{r3}
 80066d8:	469e      	mov	lr, r3
 80066da:	4770      	bx	lr
