
MiniZController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006538  08006538  00016538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006570  08006570  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006570  08006570  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006570  08006570  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006570  08006570  00016570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000000c  08006584  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08006584  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d21  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268f  00000000  00000000  00033d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000363f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00037390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c427  00000000  00000000  00038248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131a4  00000000  00000000  0005466f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab89a  00000000  00000000  00067813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001130ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ec  00000000  00000000  00113100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006520 	.word	0x08006520

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006520 	.word	0x08006520

080001c8 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a11      	ldr	r2, [pc, #68]	; (8000218 <HAL_UART_RxCpltCallback+0x50>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d11a      	bne.n	800020e <HAL_UART_RxCpltCallback+0x46>
		{
			// Reset timeout
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 80001d8:	4b10      	ldr	r3, [pc, #64]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2200      	movs	r2, #0
 80001de:	625a      	str	r2, [r3, #36]	; 0x24

			// Add received byte to sbus FIFO
			SBUS_AddByte(gSBUSByte);
 80001e0:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <HAL_UART_RxCpltCallback+0x58>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 fbf9 	bl	80009dc <SBUS_AddByte>

			// Available sbus frame ?
			if (SBUS_GetChannel(&gSBUSChannels) == FRAME_COMPLETE)
 80001ea:	480e      	ldr	r0, [pc, #56]	; (8000224 <HAL_UART_RxCpltCallback+0x5c>)
 80001ec:	f000 fc16 	bl	8000a1c <SBUS_GetChannel>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d106      	bne.n	8000204 <HAL_UART_RxCpltCallback+0x3c>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000200:	f002 fb44 	bl	800288c <HAL_GPIO_WritePin>
//				II = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_1, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
//				III = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_2, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
//				IV = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_3, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
			}
			// Restart IT
			HAL_UART_Receive_IT(huart, &gSBUSByte, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	4906      	ldr	r1, [pc, #24]	; (8000220 <HAL_UART_RxCpltCallback+0x58>)
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f005 f867 	bl	80052dc <HAL_UART_Receive_IT>
		}
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000208 	.word	0x20000208
 800021c:	20000290 	.word	0x20000290
 8000220:	20000080 	.word	0x20000080
 8000224:	200000d0 	.word	0x200000d0

08000228 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a08      	ldr	r2, [pc, #32]	; (8000254 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d108      	bne.n	800024a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		SBUS_TimeoutCallback();
 8000238:	f000 fc34 	bl	8000aa4 <SBUS_TimeoutCallback>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f002 fb21 	bl	800288c <HAL_GPIO_WritePin>
	}

}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000290 	.word	0x20000290

08000258 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d106      	bne.n	8000276 <HAL_ADC_ConvCpltCallback+0x1e>
	{
		Servo_Feedback = HAL_ADC_GetValue(&hadc1);
 8000268:	480a      	ldr	r0, [pc, #40]	; (8000294 <HAL_ADC_ConvCpltCallback+0x3c>)
 800026a:	f001 f96d 	bl	8001548 <HAL_ADC_GetValue>
 800026e:	4603      	mov	r3, r0
 8000270:	4a09      	ldr	r2, [pc, #36]	; (8000298 <HAL_ADC_ConvCpltCallback+0x40>)
 8000272:	6013      	str	r3, [r2, #0]
	}
	else if(hadc == &hadc2)
	{
		Servo_Trim = HAL_ADC_GetValue(&hadc2);
	}
}
 8000274:	e009      	b.n	800028a <HAL_ADC_ConvCpltCallback+0x32>
	else if(hadc == &hadc2)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4a08      	ldr	r2, [pc, #32]	; (800029c <HAL_ADC_ConvCpltCallback+0x44>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d105      	bne.n	800028a <HAL_ADC_ConvCpltCallback+0x32>
		Servo_Trim = HAL_ADC_GetValue(&hadc2);
 800027e:	4807      	ldr	r0, [pc, #28]	; (800029c <HAL_ADC_ConvCpltCallback+0x44>)
 8000280:	f001 f962 	bl	8001548 <HAL_ADC_GetValue>
 8000284:	4603      	mov	r3, r0
 8000286:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <HAL_ADC_ConvCpltCallback+0x48>)
 8000288:	6013      	str	r3, [r2, #0]
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	200000e8 	.word	0x200000e8
 8000298:	2000002c 	.word	0x2000002c
 800029c:	20000030 	.word	0x20000030
 80002a0:	2000028c 	.word	0x2000028c

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a8:	f000 fe62 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ac:	f000 f846 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b0:	f000 fb38 	bl	8000924 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002b4:	f000 f8a0 	bl	80003f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80002b8:	f000 f96e 	bl	8000598 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80002bc:	f000 fac2 	bl	8000844 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80002c0:	f000 faf0 	bl	80008a4 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80002c4:	f000 f90a 	bl	80004dc <MX_ADC2_Init>
  MX_TIM3_Init();
 80002c8:	f000 fa22 	bl	8000710 <MX_TIM3_Init>
  MX_TIM16_Init();
 80002cc:	f000 fa94 	bl	80007f8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80002d0:	4813      	ldr	r0, [pc, #76]	; (8000320 <main+0x7c>)
 80002d2:	f001 f859 	bl	8001388 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002d6:	2100      	movs	r1, #0
 80002d8:	4812      	ldr	r0, [pc, #72]	; (8000324 <main+0x80>)
 80002da:	f003 febd 	bl	8004058 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &gSBUSByte, 1);
 80002de:	2201      	movs	r2, #1
 80002e0:	4911      	ldr	r1, [pc, #68]	; (8000328 <main+0x84>)
 80002e2:	4812      	ldr	r0, [pc, #72]	; (800032c <main+0x88>)
 80002e4:	f004 fffa 	bl	80052dc <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80002e8:	4811      	ldr	r0, [pc, #68]	; (8000330 <main+0x8c>)
 80002ea:	f003 fdf7 	bl	8003edc <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(Motor2_EN_GPIO_Port, Motor2_EN_Pin, 0);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2140      	movs	r1, #64	; 0x40
 80002f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f6:	f002 fac9 	bl	800288c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2120      	movs	r1, #32
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f002 fac3 	bl	800288c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Motor2_2_GPIO_Port, Motor2_2_Pin, 1);
 8000306:	2201      	movs	r2, #1
 8000308:	2101      	movs	r1, #1
 800030a:	480a      	ldr	r0, [pc, #40]	; (8000334 <main+0x90>)
 800030c:	f002 fabe 	bl	800288c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim1);
 8000310:	4809      	ldr	r0, [pc, #36]	; (8000338 <main+0x94>)
 8000312:	f003 fd8f 	bl	8003e34 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000316:	2104      	movs	r1, #4
 8000318:	4807      	ldr	r0, [pc, #28]	; (8000338 <main+0x94>)
 800031a:	f003 fe9d 	bl	8004058 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800031e:	e7fe      	b.n	800031e <main+0x7a>
 8000320:	200000e8 	.word	0x200000e8
 8000324:	20000084 	.word	0x20000084
 8000328:	20000080 	.word	0x20000080
 800032c:	20000208 	.word	0x20000208
 8000330:	20000290 	.word	0x20000290
 8000334:	48000400 	.word	0x48000400
 8000338:	200001bc 	.word	0x200001bc

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b096      	sub	sp, #88	; 0x58
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000346:	2228      	movs	r2, #40	; 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f006 f8e0 	bl	8006510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	f107 031c 	add.w	r3, r7, #28
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]
 800036e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000370:	2302      	movs	r3, #2
 8000372:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000374:	2301      	movs	r3, #1
 8000376:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000378:	2310      	movs	r3, #16
 800037a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037c:	2302      	movs	r3, #2
 800037e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000380:	2300      	movs	r3, #0
 8000382:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000384:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000388:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800038e:	4618      	mov	r0, r3
 8000390:	f002 fa94 	bl	80028bc <HAL_RCC_OscConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800039a:	f000 fb19 	bl	80009d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039e:	230f      	movs	r3, #15
 80003a0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a2:	2302      	movs	r3, #2
 80003a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003b2:	f107 031c 	add.w	r3, r7, #28
 80003b6:	2101      	movs	r1, #1
 80003b8:	4618      	mov	r0, r3
 80003ba:	f003 f987 	bl	80036cc <HAL_RCC_ClockConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003c4:	f000 fb04 	bl	80009d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80003c8:	f241 0381 	movw	r3, #4225	; 0x1081
 80003cc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003d6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003d8:	2300      	movs	r3, #0
 80003da:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	4618      	mov	r0, r3
 80003e0:	f003 fbaa 	bl	8003b38 <HAL_RCCEx_PeriphCLKConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80003ea:	f000 faf1 	bl	80009d0 <Error_Handler>
  }
}
 80003ee:	bf00      	nop
 80003f0:	3758      	adds	r7, #88	; 0x58
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08a      	sub	sp, #40	; 0x28
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003fe:	f107 031c 	add.w	r3, r7, #28
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]
 8000418:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800041a:	4b2f      	ldr	r3, [pc, #188]	; (80004d8 <MX_ADC1_Init+0xe0>)
 800041c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000422:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <MX_ADC1_Init+0xe0>)
 8000424:	2200      	movs	r2, #0
 8000426:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000428:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <MX_ADC1_Init+0xe0>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800042e:	4b2a      	ldr	r3, [pc, #168]	; (80004d8 <MX_ADC1_Init+0xe0>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000434:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <MX_ADC1_Init+0xe0>)
 8000436:	2200      	movs	r2, #0
 8000438:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <MX_ADC1_Init+0xe0>)
 800043c:	2200      	movs	r2, #0
 800043e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000442:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <MX_ADC1_Init+0xe0>)
 8000444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000448:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800044a:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <MX_ADC1_Init+0xe0>)
 800044c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000450:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000452:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <MX_ADC1_Init+0xe0>)
 8000454:	2200      	movs	r2, #0
 8000456:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <MX_ADC1_Init+0xe0>)
 800045a:	2201      	movs	r2, #1
 800045c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <MX_ADC1_Init+0xe0>)
 8000460:	2200      	movs	r2, #0
 8000462:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000466:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <MX_ADC1_Init+0xe0>)
 8000468:	2204      	movs	r2, #4
 800046a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_ADC1_Init+0xe0>)
 800046e:	2200      	movs	r2, #0
 8000470:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000472:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <MX_ADC1_Init+0xe0>)
 8000474:	2200      	movs	r2, #0
 8000476:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000478:	4817      	ldr	r0, [pc, #92]	; (80004d8 <MX_ADC1_Init+0xe0>)
 800047a:	f000 fdf3 	bl	8001064 <HAL_ADC_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000484:	f000 faa4 	bl	80009d0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000488:	2300      	movs	r3, #0
 800048a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800048c:	f107 031c 	add.w	r3, r7, #28
 8000490:	4619      	mov	r1, r3
 8000492:	4811      	ldr	r0, [pc, #68]	; (80004d8 <MX_ADC1_Init+0xe0>)
 8000494:	f001 fd70 	bl	8001f78 <HAL_ADCEx_MultiModeConfigChannel>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800049e:	f000 fa97 	bl	80009d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004a2:	2302      	movs	r3, #2
 80004a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004a6:	2301      	movs	r3, #1
 80004a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80004ae:	2303      	movs	r3, #3
 80004b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	4619      	mov	r1, r3
 80004be:	4806      	ldr	r0, [pc, #24]	; (80004d8 <MX_ADC1_Init+0xe0>)
 80004c0:	f001 fa98 	bl	80019f4 <HAL_ADC_ConfigChannel>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80004ca:	f000 fa81 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004ce:	bf00      	nop
 80004d0:	3728      	adds	r7, #40	; 0x28
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	200000e8 	.word	0x200000e8

080004dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	463b      	mov	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
 80004f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80004f2:	4b27      	ldr	r3, [pc, #156]	; (8000590 <MX_ADC2_Init+0xb4>)
 80004f4:	4a27      	ldr	r2, [pc, #156]	; (8000594 <MX_ADC2_Init+0xb8>)
 80004f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004f8:	4b25      	ldr	r3, [pc, #148]	; (8000590 <MX_ADC2_Init+0xb4>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004fe:	4b24      	ldr	r3, [pc, #144]	; (8000590 <MX_ADC2_Init+0xb4>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_ADC2_Init+0xb4>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800050a:	4b21      	ldr	r3, [pc, #132]	; (8000590 <MX_ADC2_Init+0xb4>)
 800050c:	2200      	movs	r2, #0
 800050e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_ADC2_Init+0xb4>)
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000518:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <MX_ADC2_Init+0xb4>)
 800051a:	2200      	movs	r2, #0
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <MX_ADC2_Init+0xb4>)
 8000520:	2201      	movs	r2, #1
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_ADC2_Init+0xb4>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800052a:	4b19      	ldr	r3, [pc, #100]	; (8000590 <MX_ADC2_Init+0xb4>)
 800052c:	2201      	movs	r2, #1
 800052e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <MX_ADC2_Init+0xb4>)
 8000532:	2200      	movs	r2, #0
 8000534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <MX_ADC2_Init+0xb4>)
 800053a:	2204      	movs	r2, #4
 800053c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <MX_ADC2_Init+0xb4>)
 8000540:	2200      	movs	r2, #0
 8000542:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <MX_ADC2_Init+0xb4>)
 8000546:	2200      	movs	r2, #0
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800054a:	4811      	ldr	r0, [pc, #68]	; (8000590 <MX_ADC2_Init+0xb4>)
 800054c:	f000 fd8a 	bl	8001064 <HAL_ADC_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000556:	f000 fa3b 	bl	80009d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800055a:	2301      	movs	r3, #1
 800055c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800055e:	2301      	movs	r3, #1
 8000560:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000572:	463b      	mov	r3, r7
 8000574:	4619      	mov	r1, r3
 8000576:	4806      	ldr	r0, [pc, #24]	; (8000590 <MX_ADC2_Init+0xb4>)
 8000578:	f001 fa3c 	bl	80019f4 <HAL_ADC_ConfigChannel>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000582:	f000 fa25 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000030 	.word	0x20000030
 8000594:	50000100 	.word	0x50000100

08000598 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
 80005c8:	615a      	str	r2, [r3, #20]
 80005ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	222c      	movs	r2, #44	; 0x2c
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 ff9c 	bl	8006510 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005d8:	4b4b      	ldr	r3, [pc, #300]	; (8000708 <MX_TIM1_Init+0x170>)
 80005da:	4a4c      	ldr	r2, [pc, #304]	; (800070c <MX_TIM1_Init+0x174>)
 80005dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005de:	4b4a      	ldr	r3, [pc, #296]	; (8000708 <MX_TIM1_Init+0x170>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e4:	4b48      	ldr	r3, [pc, #288]	; (8000708 <MX_TIM1_Init+0x170>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80005ea:	4b47      	ldr	r3, [pc, #284]	; (8000708 <MX_TIM1_Init+0x170>)
 80005ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f2:	4b45      	ldr	r3, [pc, #276]	; (8000708 <MX_TIM1_Init+0x170>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f8:	4b43      	ldr	r3, [pc, #268]	; (8000708 <MX_TIM1_Init+0x170>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fe:	4b42      	ldr	r3, [pc, #264]	; (8000708 <MX_TIM1_Init+0x170>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000604:	4840      	ldr	r0, [pc, #256]	; (8000708 <MX_TIM1_Init+0x170>)
 8000606:	f003 fbbd 	bl	8003d84 <HAL_TIM_Base_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000610:	f000 f9de 	bl	80009d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800061a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800061e:	4619      	mov	r1, r3
 8000620:	4839      	ldr	r0, [pc, #228]	; (8000708 <MX_TIM1_Init+0x170>)
 8000622:	f004 f839 	bl	8004698 <HAL_TIM_ConfigClockSource>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800062c:	f000 f9d0 	bl	80009d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000630:	4835      	ldr	r0, [pc, #212]	; (8000708 <MX_TIM1_Init+0x170>)
 8000632:	f003 fcaf 	bl	8003f94 <HAL_TIM_PWM_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800063c:	f000 f9c8 	bl	80009d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000640:	2300      	movs	r3, #0
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000644:	2300      	movs	r3, #0
 8000646:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800064c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000650:	4619      	mov	r1, r3
 8000652:	482d      	ldr	r0, [pc, #180]	; (8000708 <MX_TIM1_Init+0x170>)
 8000654:	f004 fcf0 	bl	8005038 <HAL_TIMEx_MasterConfigSynchronization>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800065e:	f000 f9b7 	bl	80009d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000662:	2360      	movs	r3, #96	; 0x60
 8000664:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800066a:	2300      	movs	r3, #0
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800066e:	2300      	movs	r3, #0
 8000670:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000676:	2300      	movs	r3, #0
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800067a:	2300      	movs	r3, #0
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800067e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000682:	2200      	movs	r2, #0
 8000684:	4619      	mov	r1, r3
 8000686:	4820      	ldr	r0, [pc, #128]	; (8000708 <MX_TIM1_Init+0x170>)
 8000688:	f003 fef2 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000692:	f000 f99d 	bl	80009d0 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8000696:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800069c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006a0:	2204      	movs	r2, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	4818      	ldr	r0, [pc, #96]	; (8000708 <MX_TIM1_Init+0x170>)
 80006a6:	f003 fee3 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 80006b0:	f000 f98e 	bl	80009d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	4807      	ldr	r0, [pc, #28]	; (8000708 <MX_TIM1_Init+0x170>)
 80006ea:	f004 fd13 	bl	8005114 <HAL_TIMEx_ConfigBreakDeadTime>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 80006f4:	f000 f96c 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <MX_TIM1_Init+0x170>)
 80006fa:	f000 faef 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 80006fe:	bf00      	nop
 8000700:	3768      	adds	r7, #104	; 0x68
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200001bc 	.word	0x200001bc
 800070c:	40012c00 	.word	0x40012c00

08000710 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
 800073e:	615a      	str	r2, [r3, #20]
 8000740:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <MX_TIM3_Init+0xe0>)
 8000744:	4a2b      	ldr	r2, [pc, #172]	; (80007f4 <MX_TIM3_Init+0xe4>)
 8000746:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_TIM3_Init+0xe0>)
 800074a:	2210      	movs	r2, #16
 800074c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <MX_TIM3_Init+0xe0>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_TIM3_Init+0xe0>)
 8000756:	2232      	movs	r2, #50	; 0x32
 8000758:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_TIM3_Init+0xe0>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000760:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_TIM3_Init+0xe0>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000766:	4822      	ldr	r0, [pc, #136]	; (80007f0 <MX_TIM3_Init+0xe0>)
 8000768:	f003 fb0c 	bl	8003d84 <HAL_TIM_Base_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000772:	f000 f92d 	bl	80009d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800077c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000780:	4619      	mov	r1, r3
 8000782:	481b      	ldr	r0, [pc, #108]	; (80007f0 <MX_TIM3_Init+0xe0>)
 8000784:	f003 ff88 	bl	8004698 <HAL_TIM_ConfigClockSource>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800078e:	f000 f91f 	bl	80009d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000792:	4817      	ldr	r0, [pc, #92]	; (80007f0 <MX_TIM3_Init+0xe0>)
 8000794:	f003 fbfe 	bl	8003f94 <HAL_TIM_PWM_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800079e:	f000 f917 	bl	80009d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007a2:	2320      	movs	r3, #32
 80007a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	480f      	ldr	r0, [pc, #60]	; (80007f0 <MX_TIM3_Init+0xe0>)
 80007b2:	f004 fc41 	bl	8005038 <HAL_TIMEx_MasterConfigSynchronization>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007bc:	f000 f908 	bl	80009d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c0:	2360      	movs	r3, #96	; 0x60
 80007c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	4806      	ldr	r0, [pc, #24]	; (80007f0 <MX_TIM3_Init+0xe0>)
 80007d8:	f003 fe4a 	bl	8004470 <HAL_TIM_PWM_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80007e2:	f000 f8f5 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	3738      	adds	r7, #56	; 0x38
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000084 	.word	0x20000084
 80007f4:	40000400 	.word	0x40000400

080007f8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_TIM16_Init+0x44>)
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <MX_TIM16_Init+0x48>)
 8000800:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_TIM16_Init+0x44>)
 8000804:	221f      	movs	r2, #31
 8000806:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_TIM16_Init+0x44>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_TIM16_Init+0x44>)
 8000810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000814:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_TIM16_Init+0x44>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_TIM16_Init+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_TIM16_Init+0x44>)
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_TIM16_Init+0x44>)
 800082a:	f003 faab 	bl	8003d84 <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000834:	f000 f8cc 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000290 	.word	0x20000290
 8000840:	40014400 	.word	0x40014400

08000844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_USART1_UART_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <MX_USART1_UART_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000850:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_USART1_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART1_UART_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART1_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART1_UART_Init+0x58>)
 8000888:	f004 fcda 	bl	8005240 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 f89d 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000138 	.word	0x20000138
 80008a0:	40013800 	.word	0x40013800

080008a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <MX_USART2_UART_Init+0x78>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <MX_USART2_UART_Init+0x7c>)
 80008b2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008e6:	2232      	movs	r2, #50	; 0x32
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
                              |UART_ADVFEATURE_DMADISABLEONERROR_INIT;
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008f8:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_USART2_UART_Init+0x74>)
 80008fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000900:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART2_UART_Init+0x74>)
 8000904:	f004 fc9c 	bl	8005240 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800090e:	f000 f85f 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000208 	.word	0x20000208
 800091c:	40004400 	.word	0x40004400
 8000920:	000186a0 	.word	0x000186a0

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <MX_GPIO_Init+0xa4>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4a22      	ldr	r2, [pc, #136]	; (80009c8 <MX_GPIO_Init+0xa4>)
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	6153      	str	r3, [r2, #20]
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_GPIO_Init+0xa4>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_GPIO_Init+0xa4>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_GPIO_Init+0xa4>)
 8000958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800095c:	6153      	str	r3, [r2, #20]
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_GPIO_Init+0xa4>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor1_EN_Pin|Motor2_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8000970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000974:	f001 ff8a 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor2_2_GPIO_Port, Motor2_2_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2101      	movs	r1, #1
 800097c:	4813      	ldr	r0, [pc, #76]	; (80009cc <MX_GPIO_Init+0xa8>)
 800097e:	f001 ff85 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_EN_Pin Motor2_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = Motor1_EN_Pin|Motor2_EN_Pin|LED_Pin;
 8000982:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8000986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4619      	mov	r1, r3
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f001 fe03 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor2_2_Pin */
  GPIO_InitStruct.Pin = Motor2_2_Pin;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Motor2_2_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0xa8>)
 80009ba:	f001 fdf5 	bl	80025a8 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000400 	.word	0x48000400

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <SBUS_AddByte>:
	return 0;
}


uint32_t SBUS_AddByte(uint8_t Byte)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	if (gByteBufferIndex < SBUS_FRAME_SIZE)
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <SBUS_AddByte+0x38>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b18      	cmp	r3, #24
 80009ec:	d809      	bhi.n	8000a02 <SBUS_AddByte+0x26>
		gByteBuffer[gByteBufferIndex++] = Byte;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <SBUS_AddByte+0x38>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	b2d1      	uxtb	r1, r2
 80009f6:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <SBUS_AddByte+0x38>)
 80009f8:	7011      	strb	r1, [r2, #0]
 80009fa:	4619      	mov	r1, r3
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <SBUS_AddByte+0x3c>)
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	5453      	strb	r3, [r2, r1]

	return gByteBufferIndex;
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <SBUS_AddByte+0x38>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	200002dc 	.word	0x200002dc
 8000a18:	200002e0 	.word	0x200002e0

08000a1c <SBUS_GetChannel>:


uint32_t SBUS_GetChannel(struct sbuschannels *pChannels)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	if (NULL == pChannels)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d101      	bne.n	8000a2e <SBUS_GetChannel+0x12>
		return FRAME_PENDING;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e030      	b.n	8000a90 <SBUS_GetChannel+0x74>

	// Enough byte received
	if (gByteBufferIndex == SBUS_FRAME_SIZE)
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <SBUS_GetChannel+0x7c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b19      	cmp	r3, #25
 8000a34:	d12b      	bne.n	8000a8e <SBUS_GetChannel+0x72>
	{
		// Frame with Header and Footer?
		struct sbusframe *pFrame = (struct sbusframe *) gByteBuffer;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <SBUS_GetChannel+0x80>)
 8000a38:	60bb      	str	r3, [r7, #8]

		if (pFrame->Header == SBUS_HEADER && pFrame->Footer == SBUS_FOOTER)
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b0f      	cmp	r3, #15
 8000a40:	d125      	bne.n	8000a8e <SBUS_GetChannel+0x72>
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	7e1b      	ldrb	r3, [r3, #24]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d121      	bne.n	8000a8e <SBUS_GetChannel+0x72>
		{
			uint32_t ret = FRAME_COMPLETE;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]

			// Return the frame
			memcpy(&pChannels[0], &gByteBuffer[1], sizeof(struct sbuschannels));
 8000a4e:	2217      	movs	r2, #23
 8000a50:	4913      	ldr	r1, [pc, #76]	; (8000aa0 <SBUS_GetChannel+0x84>)
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f005 fd4e 	bl	80064f4 <memcpy>

			// Check for frame errors
			if (pChannels->FrameLost)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7d9b      	ldrb	r3, [r3, #22]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <SBUS_GetChannel+0x52>
				ret |= FRAME_DROPPED;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	60fb      	str	r3, [r7, #12]

			if (pChannels->FailSafe)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7d9b      	ldrb	r3, [r3, #22]
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <SBUS_GetChannel+0x68>
				ret |= FRAME_FAILSAFE;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	60fb      	str	r3, [r7, #12]
//					pChannels->FailSafe,
//					pChannels->FrameLost);
//			CDC_Transmit_FS((uint8_t *)Str, strlen(Str));

			// Reset byte buffer
			gByteBufferIndex = 0;
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <SBUS_GetChannel+0x7c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]

			return ret;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	e000      	b.n	8000a90 <SBUS_GetChannel+0x74>
		}
	}

	return FRAME_PENDING;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200002dc 	.word	0x200002dc
 8000a9c:	200002e0 	.word	0x200002e0
 8000aa0:	200002e1 	.word	0x200002e1

08000aa4 <SBUS_TimeoutCallback>:

	return ((int32_t) ChannelValue * ScaleA + ScaleB) / ScaleD;
}

void SBUS_TimeoutCallback(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	// Reset byte buffer
	gByteBufferIndex = 0;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <SBUS_TimeoutCallback+0x14>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	200002dc 	.word	0x200002dc

08000abc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x44>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b24:	d136      	bne.n	8000b94 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b26:	4b3b      	ldr	r3, [pc, #236]	; (8000c14 <HAL_ADC_MspInit+0x110>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4a39      	ldr	r2, [pc, #228]	; (8000c14 <HAL_ADC_MspInit+0x110>)
 8000b2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b30:	4b38      	ldr	r3, [pc, #224]	; (8000c14 <HAL_ADC_MspInit+0x110>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d10b      	bne.n	8000b50 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4a36      	ldr	r2, [pc, #216]	; (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b42:	6153      	str	r3, [r2, #20]
 8000b44:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	4a30      	ldr	r2, [pc, #192]	; (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5a:	6153      	str	r3, [r2, #20]
 8000b5c:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <HAL_ADC_MspInit+0x114>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Servo_FB_Pin|Vbat_Meas_Pin;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f001 fd13 	bl	80025a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2012      	movs	r0, #18
 8000b88:	f001 fc61 	bl	800244e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b8c:	2012      	movs	r0, #18
 8000b8e:	f001 fc7a 	bl	8002486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b92:	e03a      	b.n	8000c0a <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a20      	ldr	r2, [pc, #128]	; (8000c1c <HAL_ADC_MspInit+0x118>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d135      	bne.n	8000c0a <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <HAL_ADC_MspInit+0x110>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <HAL_ADC_MspInit+0x110>)
 8000ba6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_ADC_MspInit+0x110>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d10b      	bne.n	8000bc8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_ADC_MspInit+0x114>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <HAL_ADC_MspInit+0x114>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bba:	6153      	str	r3, [r2, #20]
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_ADC_MspInit+0x114>)
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <HAL_ADC_MspInit+0x114>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <HAL_ADC_MspInit+0x114>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd2:	6153      	str	r3, [r2, #20]
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_ADC_MspInit+0x114>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Trim_Pin;
 8000be0:	2310      	movs	r3, #16
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo_Trim_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f001 fcd7 	bl	80025a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2012      	movs	r0, #18
 8000c00:	f001 fc25 	bl	800244e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c04:	2012      	movs	r0, #18
 8000c06:	f001 fc3e 	bl	8002486 <HAL_NVIC_EnableIRQ>
}
 8000c0a:	bf00      	nop
 8000c0c:	3730      	adds	r7, #48	; 0x30
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000028 	.word	0x20000028
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	50000100 	.word	0x50000100

08000c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a27      	ldr	r2, [pc, #156]	; (8000ccc <HAL_TIM_Base_MspInit+0xac>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d114      	bne.n	8000c5c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c32:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2019      	movs	r0, #25
 8000c50:	f001 fbfd 	bl	800244e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c54:	2019      	movs	r0, #25
 8000c56:	f001 fc16 	bl	8002486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c5a:	e032      	b.n	8000cc2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d114      	bne.n	8000c90 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	201d      	movs	r0, #29
 8000c84:	f001 fbe3 	bl	800244e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c88:	201d      	movs	r0, #29
 8000c8a:	f001 fbfc 	bl	8002486 <HAL_NVIC_EnableIRQ>
}
 8000c8e:	e018      	b.n	8000cc2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_TIM_Base_MspInit+0xb8>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d113      	bne.n	8000cc2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_TIM_Base_MspInit+0xb0>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <HAL_TIM_Base_MspInit+0xb0>)
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_TIM_Base_MspInit+0xb0>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2019      	movs	r0, #25
 8000cb8:	f001 fbc9 	bl	800244e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cbc:	2019      	movs	r0, #25
 8000cbe:	f001 fbe2 	bl	8002486 <HAL_NVIC_EnableIRQ>
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40012c00 	.word	0x40012c00
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40000400 	.word	0x40000400
 8000cd8:	40014400 	.word	0x40014400

08000cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <HAL_TIM_MspPostInit+0x68>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d11d      	bne.n	8000d3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_TIM_MspPostInit+0x6c>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <HAL_TIM_MspPostInit+0x6c>)
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	6153      	str	r3, [r2, #20]
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_TIM_MspPostInit+0x6c>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor1_2_Pin|Motor1_1_Pin|Motor2_1_Pin;
 8000d16:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d28:	2306      	movs	r3, #6
 8000d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d36:	f001 fc37 	bl	80025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40012c00 	.word	0x40012c00
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	; 0x30
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a32      	ldr	r2, [pc, #200]	; (8000e34 <HAL_UART_MspInit+0xe8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d128      	bne.n	8000dc0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d6e:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a31      	ldr	r2, [pc, #196]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	4a2b      	ldr	r2, [pc, #172]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d90:	6153      	str	r3, [r2, #20]
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d9e:	23c0      	movs	r3, #192	; 0xc0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dae:	2307      	movs	r3, #7
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4820      	ldr	r0, [pc, #128]	; (8000e3c <HAL_UART_MspInit+0xf0>)
 8000dba:	f001 fbf5 	bl	80025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dbe:	e035      	b.n	8000e2c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <HAL_UART_MspInit+0xf4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d130      	bne.n	8000e2c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_UART_MspInit+0xec>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f001 fbc6 	bl	80025a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2026      	movs	r0, #38	; 0x26
 8000e22:	f001 fb14 	bl	800244e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e26:	2026      	movs	r0, #38	; 0x26
 8000e28:	f001 fb2d 	bl	8002486 <HAL_NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3730      	adds	r7, #48	; 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40013800 	.word	0x40013800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	40004400 	.word	0x40004400

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f8b4 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <ADC1_2_IRQHandler+0x14>)
 8000e9e:	f000 fb61 	bl	8001564 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <ADC1_2_IRQHandler+0x18>)
 8000ea4:	f000 fb5e 	bl	8001564 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000e8 	.word	0x200000e8
 8000eb0:	20000030 	.word	0x20000030

08000eb4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000eba:	f003 f9b9 	bl	8004230 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000ec0:	f003 f9b6 	bl	8004230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200001bc 	.word	0x200001bc
 8000ecc:	20000290 	.word	0x20000290

08000ed0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <TIM3_IRQHandler+0x10>)
 8000ed6:	f003 f9ab 	bl	8004230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000084 	.word	0x20000084

08000ee4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <USART2_IRQHandler+0x10>)
 8000eea:	f004 fa45 	bl	8005378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000208 	.word	0x20000208

08000ef8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f005 faaf 	bl	80064ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f7ff f9a9 	bl	80002a4 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f54:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f60:	08006578 	.word	0x08006578
  ldr r2, =_sbss
 8000f64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f68:	20000300 	.word	0x20000300

08000f6c <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <CAN_RX0_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_Init+0x28>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_Init+0x28>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f001 fa59 	bl	8002438 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 f808 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff fd96 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40022000 	.word	0x40022000

08000f9c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fa71 	bl	80024a2 <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f001 fa39 	bl	800244e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	200002fc 	.word	0x200002fc

08001024 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;  
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200002fc 	.word	0x200002fc

0800103c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09a      	sub	sp, #104	; 0x68
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e172      	b.n	800136a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	d176      	bne.n	8001184 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	2b00      	cmp	r3, #0
 800109c:	d152      	bne.n	8001144 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fd23 	bl	8000b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d13b      	bne.n	8001144 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f001 f87d 	bl	80021cc <ADC_Disable>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d12f      	bne.n	8001144 <HAL_ADC_Init+0xe0>
 80010e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d12b      	bne.n	8001144 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f4:	f023 0302 	bic.w	r3, r3, #2
 80010f8:	f043 0202 	orr.w	r2, r3, #2
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800110e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800111e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001120:	4b94      	ldr	r3, [pc, #592]	; (8001374 <HAL_ADC_Init+0x310>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a94      	ldr	r2, [pc, #592]	; (8001378 <HAL_ADC_Init+0x314>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0c9a      	lsrs	r2, r3, #18
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001136:	e002      	b.n	800113e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	3b01      	subs	r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f9      	bne.n	8001138 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800115c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001160:	d110      	bne.n	8001184 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f023 0312 	bic.w	r3, r3, #18
 800116a:	f043 0210 	orr.w	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f043 0201 	orr.w	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	2b00      	cmp	r3, #0
 800118e:	f040 80df 	bne.w	8001350 <HAL_ADC_Init+0x2ec>
 8001192:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 80da 	bne.w	8001350 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 80d2 	bne.w	8001350 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011b4:	f043 0202 	orr.w	r2, r3, #2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011bc:	4b6f      	ldr	r3, [pc, #444]	; (800137c <HAL_ADC_Init+0x318>)
 80011be:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011c8:	d102      	bne.n	80011d0 <HAL_ADC_Init+0x16c>
 80011ca:	4b6d      	ldr	r3, [pc, #436]	; (8001380 <HAL_ADC_Init+0x31c>)
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	e002      	b.n	80011d6 <HAL_ADC_Init+0x172>
 80011d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011d4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <HAL_ADC_Init+0x192>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d101      	bne.n	80011f6 <HAL_ADC_Init+0x192>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_ADC_Init+0x194>
 80011f6:	2300      	movs	r3, #0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d11c      	bne.n	8001236 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011fc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d010      	beq.n	8001224 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d107      	bne.n	800121e <HAL_ADC_Init+0x1ba>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <HAL_ADC_Init+0x1ba>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_ADC_Init+0x1bc>
 800121e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001220:	2b00      	cmp	r3, #0
 8001222:	d108      	bne.n	8001236 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	431a      	orrs	r2, r3
 8001232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001234:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7e5b      	ldrb	r3, [r3, #25]
 800123a:	035b      	lsls	r3, r3, #13
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001240:	2a01      	cmp	r2, #1
 8001242:	d002      	beq.n	800124a <HAL_ADC_Init+0x1e6>
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	e000      	b.n	800124c <HAL_ADC_Init+0x1e8>
 800124a:	2200      	movs	r2, #0
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4313      	orrs	r3, r2
 800125a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800125c:	4313      	orrs	r3, r2
 800125e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d11b      	bne.n	80012a2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7e5b      	ldrb	r3, [r3, #25]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d109      	bne.n	8001286 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	3b01      	subs	r3, #1
 8001278:	045a      	lsls	r2, r3, #17
 800127a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800127c:	4313      	orrs	r3, r2
 800127e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001282:	663b      	str	r3, [r7, #96]	; 0x60
 8001284:	e00d      	b.n	80012a2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800128e:	f043 0220 	orr.w	r2, r3, #32
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f043 0201 	orr.w	r2, r3, #1
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d007      	beq.n	80012ba <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b2:	4313      	orrs	r3, r2
 80012b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012b6:	4313      	orrs	r3, r2
 80012b8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d114      	bne.n	80012f2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012d6:	f023 0302 	bic.w	r3, r3, #2
 80012da:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	7e1b      	ldrb	r3, [r3, #24]
 80012e0:	039a      	lsls	r2, r3, #14
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4313      	orrs	r3, r2
 80012ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012ee:	4313      	orrs	r3, r2
 80012f0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <HAL_ADC_Init+0x320>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001302:	430b      	orrs	r3, r1
 8001304:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10c      	bne.n	8001328 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	f023 010f 	bic.w	r1, r3, #15
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	1e5a      	subs	r2, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	631a      	str	r2, [r3, #48]	; 0x30
 8001326:	e007      	b.n	8001338 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 020f 	bic.w	r2, r2, #15
 8001336:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f023 0303 	bic.w	r3, r3, #3
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
 800134e:	e00a      	b.n	8001366 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f023 0312 	bic.w	r3, r3, #18
 8001358:	f043 0210 	orr.w	r2, r3, #16
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001360:	2301      	movs	r3, #1
 8001362:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001366:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800136a:	4618      	mov	r0, r3
 800136c:	3768      	adds	r7, #104	; 0x68
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000000 	.word	0x20000000
 8001378:	431bde83 	.word	0x431bde83
 800137c:	50000300 	.word	0x50000300
 8001380:	50000100 	.word	0x50000100
 8001384:	fff0c007 	.word	0xfff0c007

08001388 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 80c6 	bne.w	8001530 <HAL_ADC_Start_IT+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_Start_IT+0x2a>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e0c1      	b.n	8001536 <HAL_ADC_Start_IT+0x1ae>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fea2 	bl	8002104 <ADC_Enable>
 80013c0:	4603      	mov	r3, r0
 80013c2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 80ad 	bne.w	8001526 <HAL_ADC_Start_IT+0x19e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013e0:	4b57      	ldr	r3, [pc, #348]	; (8001540 <HAL_ADC_Start_IT+0x1b8>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <HAL_ADC_Start_IT+0x6e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013f4:	d115      	bne.n	8001422 <HAL_ADC_Start_IT+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d027      	beq.n	8001460 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001418:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001420:	e01e      	b.n	8001460 <HAL_ADC_Start_IT+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001436:	d004      	beq.n	8001442 <HAL_ADC_Start_IT+0xba>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a41      	ldr	r2, [pc, #260]	; (8001544 <HAL_ADC_Start_IT+0x1bc>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d10e      	bne.n	8001460 <HAL_ADC_Start_IT+0xd8>
 8001442:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001458:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800146c:	d106      	bne.n	800147c <HAL_ADC_Start_IT+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f023 0206 	bic.w	r2, r3, #6
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
 800147a:	e002      	b.n	8001482 <HAL_ADC_Start_IT+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	221c      	movs	r2, #28
 8001490:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b08      	cmp	r3, #8
 8001498:	d110      	bne.n	80014bc <HAL_ADC_Start_IT+0x134>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0204 	bic.w	r2, r2, #4
 80014a8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0208 	orr.w	r2, r2, #8
 80014b8:	605a      	str	r2, [r3, #4]
          break;
 80014ba:	e008      	b.n	80014ce <HAL_ADC_Start_IT+0x146>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 020c 	orr.w	r2, r2, #12
 80014ca:	605a      	str	r2, [r3, #4]
          break;
 80014cc:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d107      	bne.n	80014e6 <HAL_ADC_Start_IT+0x15e>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0210 	bic.w	r2, r2, #16
 80014e4:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_ADC_Start_IT+0x1b8>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d010      	beq.n	8001514 <HAL_ADC_Start_IT+0x18c>
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_ADC_Start_IT+0x1b8>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	2b05      	cmp	r3, #5
 80014fc:	d00a      	beq.n	8001514 <HAL_ADC_Start_IT+0x18c>
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_ADC_Start_IT+0x1b8>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	2b09      	cmp	r3, #9
 8001508:	d004      	beq.n	8001514 <HAL_ADC_Start_IT+0x18c>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001512:	d10f      	bne.n	8001534 <HAL_ADC_Start_IT+0x1ac>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0204 	orr.w	r2, r2, #4
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	e006      	b.n	8001534 <HAL_ADC_Start_IT+0x1ac>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800152e:	e001      	b.n	8001534 <HAL_ADC_Start_IT+0x1ac>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001530:	2302      	movs	r3, #2
 8001532:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	50000300 	.word	0x50000300
 8001544:	50000100 	.word	0x50000100

08001548 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b04      	cmp	r3, #4
 8001584:	d106      	bne.n	8001594 <HAL_ADC_IRQHandler+0x30>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b04      	cmp	r3, #4
 8001592:	d00d      	beq.n	80015b0 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d17a      	bne.n	8001698 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d173      	bne.n	8001698 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d105      	bne.n	80015c8 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80015c8:	4b88      	ldr	r3, [pc, #544]	; (80017ec <HAL_ADC_IRQHandler+0x288>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d010      	beq.n	80015f6 <HAL_ADC_IRQHandler+0x92>
 80015d4:	4b85      	ldr	r3, [pc, #532]	; (80017ec <HAL_ADC_IRQHandler+0x288>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d00a      	beq.n	80015f6 <HAL_ADC_IRQHandler+0x92>
 80015e0:	4b82      	ldr	r3, [pc, #520]	; (80017ec <HAL_ADC_IRQHandler+0x288>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d004      	beq.n	80015f6 <HAL_ADC_IRQHandler+0x92>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015f4:	d104      	bne.n	8001600 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	e003      	b.n	8001608 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001600:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001612:	2b00      	cmp	r3, #0
 8001614:	d139      	bne.n	800168a <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800161c:	2b00      	cmp	r3, #0
 800161e:	d134      	bne.n	800168a <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b08      	cmp	r3, #8
 800162c:	d12d      	bne.n	800168a <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d11a      	bne.n	8001672 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 020c 	bic.w	r2, r2, #12
 800164a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d112      	bne.n	800168a <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	641a      	str	r2, [r3, #64]	; 0x40
 8001670:	e00b      	b.n	800168a <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f043 0210 	orr.w	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f043 0201 	orr.w	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7fe fde4 	bl	8000258 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	220c      	movs	r2, #12
 8001696:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d106      	bne.n	80016b4 <HAL_ADC_IRQHandler+0x150>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0320 	and.w	r3, r3, #32
 80016b0:	2b20      	cmp	r3, #32
 80016b2:	d00f      	beq.n	80016d4 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80016be:	2b40      	cmp	r3, #64	; 0x40
 80016c0:	f040 80a9 	bne.w	8001816 <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ce:	2b40      	cmp	r3, #64	; 0x40
 80016d0:	f040 80a1 	bne.w	8001816 <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80016e0:	4b42      	ldr	r3, [pc, #264]	; (80017ec <HAL_ADC_IRQHandler+0x288>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d010      	beq.n	800170e <HAL_ADC_IRQHandler+0x1aa>
 80016ec:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <HAL_ADC_IRQHandler+0x288>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d00a      	beq.n	800170e <HAL_ADC_IRQHandler+0x1aa>
 80016f8:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <HAL_ADC_IRQHandler+0x288>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	2b09      	cmp	r3, #9
 8001702:	d004      	beq.n	800170e <HAL_ADC_IRQHandler+0x1aa>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800170c:	d104      	bne.n	8001718 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	e003      	b.n	8001720 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001718:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d16c      	bne.n	8001808 <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00b      	beq.n	8001750 <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001742:	2b00      	cmp	r3, #0
 8001744:	d160      	bne.n	8001808 <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800174c:	2b00      	cmp	r3, #0
 800174e:	d15b      	bne.n	8001808 <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175a:	2b40      	cmp	r3, #64	; 0x40
 800175c:	d154      	bne.n	8001808 <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <HAL_ADC_IRQHandler+0x288>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	2b00      	cmp	r3, #0
 8001768:	d010      	beq.n	800178c <HAL_ADC_IRQHandler+0x228>
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_ADC_IRQHandler+0x288>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	2b06      	cmp	r3, #6
 8001774:	d00a      	beq.n	800178c <HAL_ADC_IRQHandler+0x228>
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_ADC_IRQHandler+0x288>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	2b07      	cmp	r3, #7
 8001780:	d004      	beq.n	800178c <HAL_ADC_IRQHandler+0x228>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800178a:	d104      	bne.n	8001796 <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e003      	b.n	800179e <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001796:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d12f      	bne.n	8001808 <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d11c      	bne.n	80017f0 <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017c4:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d114      	bne.n	8001808 <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f043 0201 	orr.w	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ea:	e00d      	b.n	8001808 <HAL_ADC_IRQHandler+0x2a4>
 80017ec:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f043 0210 	orr.w	r2, r3, #16
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f8cb 	bl	80019a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2260      	movs	r2, #96	; 0x60
 8001814:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001820:	2b80      	cmp	r3, #128	; 0x80
 8001822:	d113      	bne.n	800184c <HAL_ADC_IRQHandler+0x2e8>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182e:	2b80      	cmp	r3, #128	; 0x80
 8001830:	d10c      	bne.n	800184c <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fbfc 	bl	800103c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800185a:	d115      	bne.n	8001888 <HAL_ADC_IRQHandler+0x324>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800186a:	d10d      	bne.n	8001888 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f8a7 	bl	80019cc <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001886:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001896:	d115      	bne.n	80018c4 <HAL_ADC_IRQHandler+0x360>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a6:	d10d      	bne.n	80018c4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f893 	bl	80019e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b10      	cmp	r3, #16
 80018d0:	d13d      	bne.n	800194e <HAL_ADC_IRQHandler+0x3ea>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b10      	cmp	r3, #16
 80018de:	d136      	bne.n	800194e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d102      	bne.n	80018ee <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 80018e8:	2301      	movs	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e019      	b.n	8001922 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_ADC_IRQHandler+0x43c>)
 80018f0:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d10a      	bne.n	8001922 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 800190c:	2301      	movs	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e007      	b.n	8001922 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 800191e:	2301      	movs	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d10e      	bne.n	8001946 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f043 0202 	orr.w	r2, r3, #2
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fb85 	bl	8001050 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2210      	movs	r2, #16
 800194c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195c:	d11b      	bne.n	8001996 <HAL_ADC_IRQHandler+0x432>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196c:	d113      	bne.n	8001996 <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f043 0208 	orr.w	r2, r3, #8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f811 	bl	80019b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	50000300 	.word	0x50000300

080019a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b09b      	sub	sp, #108	; 0x6c
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x22>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e2a5      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x56e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f040 8289 	bne.w	8001f40 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d81c      	bhi.n	8001a70 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	461a      	mov	r2, r3
 8001a4a:	231f      	movs	r3, #31
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	4019      	ands	r1, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa00 f203 	lsl.w	r2, r0, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a6e:	e063      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	d81e      	bhi.n	8001ab6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	3b1e      	subs	r3, #30
 8001a8c:	221f      	movs	r2, #31
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	4019      	ands	r1, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	3b1e      	subs	r3, #30
 8001aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ab4:	e040      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b0e      	cmp	r3, #14
 8001abc:	d81e      	bhi.n	8001afc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	3b3c      	subs	r3, #60	; 0x3c
 8001ad2:	221f      	movs	r2, #31
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4019      	ands	r1, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	3b3c      	subs	r3, #60	; 0x3c
 8001aee:	fa00 f203 	lsl.w	r2, r0, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38
 8001afa:	e01d      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	3b5a      	subs	r3, #90	; 0x5a
 8001b10:	221f      	movs	r2, #31
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4019      	ands	r1, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	3b5a      	subs	r3, #90	; 0x5a
 8001b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 80e5 	bne.w	8001d12 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	d91c      	bls.n	8001b8a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6999      	ldr	r1, [r3, #24]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b1e      	subs	r3, #30
 8001b62:	2207      	movs	r2, #7
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4019      	ands	r1, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	6898      	ldr	r0, [r3, #8]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	3b1e      	subs	r3, #30
 8001b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	619a      	str	r2, [r3, #24]
 8001b88:	e019      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6959      	ldr	r1, [r3, #20]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4019      	ands	r1, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6898      	ldr	r0, [r3, #8]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d84f      	bhi.n	8001c80 <HAL_ADC_ConfigChannel+0x28c>
 8001be0:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be6:	bf00      	nop
 8001be8:	08001bf9 	.word	0x08001bf9
 8001bec:	08001c1b 	.word	0x08001c1b
 8001bf0:	08001c3d 	.word	0x08001c3d
 8001bf4:	08001c5f 	.word	0x08001c5f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bfe:	4b9e      	ldr	r3, [pc, #632]	; (8001e78 <HAL_ADC_ConfigChannel+0x484>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	0691      	lsls	r1, r2, #26
 8001c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c16:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c18:	e07e      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c20:	4b95      	ldr	r3, [pc, #596]	; (8001e78 <HAL_ADC_ConfigChannel+0x484>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	0691      	lsls	r1, r2, #26
 8001c2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c38:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c3a:	e06d      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c42:	4b8d      	ldr	r3, [pc, #564]	; (8001e78 <HAL_ADC_ConfigChannel+0x484>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	0691      	lsls	r1, r2, #26
 8001c4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c5a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c5c:	e05c      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c64:	4b84      	ldr	r3, [pc, #528]	; (8001e78 <HAL_ADC_ConfigChannel+0x484>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	0691      	lsls	r1, r2, #26
 8001c6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c70:	430a      	orrs	r2, r1
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c7c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c7e:	e04b      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	069b      	lsls	r3, r3, #26
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d107      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ca2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001caa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	069b      	lsls	r3, r3, #26
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d107      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cc6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	069b      	lsls	r3, r3, #26
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d107      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	069b      	lsls	r3, r3, #26
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d10a      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d0e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001d10:	e001      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001d12:	bf00      	nop
 8001d14:	e000      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001d16:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d108      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x344>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x344>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x346>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 810b 	bne.w	8001f56 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d00f      	beq.n	8001d68 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	400a      	ands	r2, r1
 8001d62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d66:	e049      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	409a      	lsls	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b09      	cmp	r3, #9
 8001d88:	d91c      	bls.n	8001dc4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6999      	ldr	r1, [r3, #24]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b1b      	subs	r3, #27
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	4019      	ands	r1, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6898      	ldr	r0, [r3, #8]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	3b1b      	subs	r3, #27
 8001db6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	619a      	str	r2, [r3, #24]
 8001dc2:	e01b      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6959      	ldr	r1, [r3, #20]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4019      	ands	r1, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6898      	ldr	r0, [r3, #8]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	fa00 f203 	lsl.w	r2, r0, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <HAL_ADC_ConfigChannel+0x488>)
 8001dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d015      	beq.n	8001e40 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e18:	2b11      	cmp	r3, #17
 8001e1a:	d105      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00b      	beq.n	8001e40 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e2c:	2b12      	cmp	r3, #18
 8001e2e:	f040 8092 	bne.w	8001f56 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f040 808b 	bne.w	8001f56 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e48:	d102      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x45c>
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_ADC_ConfigChannel+0x48c>)
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e002      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x462>
 8001e50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e54:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d10f      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x490>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d108      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x490>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e007      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x492>
 8001e76:	bf00      	nop
 8001e78:	83fff000 	.word	0x83fff000
 8001e7c:	50000300 	.word	0x50000300
 8001e80:	50000100 	.word	0x50000100
 8001e84:	2300      	movs	r3, #0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d150      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e8a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d010      	beq.n	8001eb2 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d107      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x4b8>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x4b8>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_ADC_ConfigChannel+0x4ba>
 8001eac:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d13c      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d11d      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x502>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ec2:	d118      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ece:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_ADC_ConfigChannel+0x57c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <HAL_ADC_ConfigChannel+0x580>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9a      	lsrs	r2, r3, #18
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ee6:	e002      	b.n	8001eee <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f9      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ef4:	e02e      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b11      	cmp	r3, #17
 8001efc:	d10b      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x522>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f06:	d106      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f12:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f14:	e01e      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b12      	cmp	r3, #18
 8001f1c:	d11a      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f28:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f2a:	e013      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f043 0220 	orr.w	r2, r3, #32
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f3e:	e00a      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f043 0220 	orr.w	r2, r3, #32
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f52:	e000      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f54:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	376c      	adds	r7, #108	; 0x6c
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000000 	.word	0x20000000
 8001f74:	431bde83 	.word	0x431bde83

08001f78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b099      	sub	sp, #100	; 0x64
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f90:	d102      	bne.n	8001f98 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001f92:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	e002      	b.n	8001f9e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001f98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f9c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0a2      	b.n	80020ee <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e09b      	b.n	80020ee <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d17f      	bne.n	80020cc <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d179      	bne.n	80020cc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd8:	4b49      	ldr	r3, [pc, #292]	; (8002100 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001fda:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d040      	beq.n	8002066 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ff6:	035b      	lsls	r3, r3, #13
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ffe:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b01      	cmp	r3, #1
 800200c:	d108      	bne.n	8002020 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002020:	2300      	movs	r3, #0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d15c      	bne.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d107      	bne.n	8002042 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002042:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002044:	2b00      	cmp	r3, #0
 8002046:	d14b      	bne.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002050:	f023 030f 	bic.w	r3, r3, #15
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	6811      	ldr	r1, [r2, #0]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	6892      	ldr	r2, [r2, #8]
 800205c:	430a      	orrs	r2, r1
 800205e:	431a      	orrs	r2, r3
 8002060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002062:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002064:	e03c      	b.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800206e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002070:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d108      	bne.n	8002092 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002092:	2300      	movs	r3, #0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d123      	bne.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80020b4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d112      	bne.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80020ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020c2:	f023 030f 	bic.w	r3, r3, #15
 80020c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020c8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020ca:	e009      	b.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f043 0220 	orr.w	r2, r3, #32
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80020de:	e000      	b.n	80020e2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020e0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80020ee:	4618      	mov	r0, r3
 80020f0:	3764      	adds	r7, #100	; 0x64
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	50000100 	.word	0x50000100
 8002100:	50000300 	.word	0x50000300

08002104 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d108      	bne.n	8002130 <ADC_Enable+0x2c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <ADC_Enable+0x2c>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <ADC_Enable+0x2e>
 8002130:	2300      	movs	r3, #0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d143      	bne.n	80021be <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <ADC_Enable+0xc4>)
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00d      	beq.n	8002160 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f043 0210 	orr.w	r2, r3, #16
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e02f      	b.n	80021c0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002170:	f7fe ff58 	bl	8001024 <HAL_GetTick>
 8002174:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002176:	e01b      	b.n	80021b0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002178:	f7fe ff54 	bl	8001024 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d914      	bls.n	80021b0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	d00d      	beq.n	80021b0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f043 0210 	orr.w	r2, r3, #16
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e007      	b.n	80021c0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d1dc      	bne.n	8002178 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	8000003f 	.word	0x8000003f

080021cc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d108      	bne.n	80021f8 <ADC_Disable+0x2c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <ADC_Disable+0x2c>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <ADC_Disable+0x2e>
 80021f8:	2300      	movs	r3, #0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d047      	beq.n	800228e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030d 	and.w	r3, r3, #13
 8002208:	2b01      	cmp	r3, #1
 800220a:	d10f      	bne.n	800222c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0202 	orr.w	r2, r2, #2
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2203      	movs	r2, #3
 8002222:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002224:	f7fe fefe 	bl	8001024 <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800222a:	e029      	b.n	8002280 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f043 0210 	orr.w	r2, r3, #16
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e023      	b.n	8002290 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002248:	f7fe feec 	bl	8001024 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d914      	bls.n	8002280 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d10d      	bne.n	8002280 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f043 0210 	orr.w	r2, r3, #16
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f043 0201 	orr.w	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e007      	b.n	8002290 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d0dc      	beq.n	8002248 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ca:	4a04      	ldr	r2, [pc, #16]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <__NVIC_GetPriorityGrouping+0x18>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 0307 	and.w	r3, r3, #7
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db0b      	blt.n	8002326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	4907      	ldr	r1, [pc, #28]	; (8002334 <__NVIC_EnableIRQ+0x38>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2001      	movs	r0, #1
 800231e:	fa00 f202 	lsl.w	r2, r0, r2
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000e100 	.word	0xe000e100

08002338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db0a      	blt.n	8002362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	490c      	ldr	r1, [pc, #48]	; (8002384 <__NVIC_SetPriority+0x4c>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	440b      	add	r3, r1
 800235c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002360:	e00a      	b.n	8002378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4908      	ldr	r1, [pc, #32]	; (8002388 <__NVIC_SetPriority+0x50>)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	3b04      	subs	r3, #4
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	440b      	add	r3, r1
 8002376:	761a      	strb	r2, [r3, #24]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000e100 	.word	0xe000e100
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	; 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f1c3 0307 	rsb	r3, r3, #7
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	bf28      	it	cs
 80023aa:	2304      	movcs	r3, #4
 80023ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d902      	bls.n	80023bc <NVIC_EncodePriority+0x30>
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3b03      	subs	r3, #3
 80023ba:	e000      	b.n	80023be <NVIC_EncodePriority+0x32>
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	f04f 32ff 	mov.w	r2, #4294967295
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	401a      	ands	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43d9      	mvns	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	4313      	orrs	r3, r2
         );
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	; 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002404:	d301      	bcc.n	800240a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002406:	2301      	movs	r3, #1
 8002408:	e00f      	b.n	800242a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <SysTick_Config+0x40>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002412:	210f      	movs	r1, #15
 8002414:	f04f 30ff 	mov.w	r0, #4294967295
 8002418:	f7ff ff8e 	bl	8002338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <SysTick_Config+0x40>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002422:	4b04      	ldr	r3, [pc, #16]	; (8002434 <SysTick_Config+0x40>)
 8002424:	2207      	movs	r2, #7
 8002426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	e000e010 	.word	0xe000e010

08002438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ff29 	bl	8002298 <__NVIC_SetPriorityGrouping>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b086      	sub	sp, #24
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002460:	f7ff ff3e 	bl	80022e0 <__NVIC_GetPriorityGrouping>
 8002464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	6978      	ldr	r0, [r7, #20]
 800246c:	f7ff ff8e 	bl	800238c <NVIC_EncodePriority>
 8002470:	4602      	mov	r2, r0
 8002472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff5d 	bl	8002338 <__NVIC_SetPriority>
}
 800247e:	bf00      	nop
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff31 	bl	80022fc <__NVIC_EnableIRQ>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ffa2 	bl	80023f4 <SysTick_Config>
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d008      	beq.n	80024de <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2204      	movs	r2, #4
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e020      	b.n	8002520 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 020e 	bic.w	r2, r2, #14
 80024ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f202 	lsl.w	r2, r1, r2
 800250c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800253e:	2b02      	cmp	r3, #2
 8002540:	d005      	beq.n	800254e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2204      	movs	r2, #4
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e027      	b.n	800259e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 020e 	bic.w	r2, r2, #14
 800255c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	2101      	movs	r1, #1
 8002578:	fa01 f202 	lsl.w	r2, r1, r2
 800257c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
    } 
  }
  return status;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b6:	e14e      	b.n	8002856 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2101      	movs	r1, #1
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	4013      	ands	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8140 	beq.w	8002850 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d005      	beq.n	80025e8 <HAL_GPIO_Init+0x40>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d130      	bne.n	800264a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800261e:	2201      	movs	r2, #1
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 0201 	and.w	r2, r3, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b03      	cmp	r3, #3
 8002654:	d017      	beq.n	8002686 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d123      	bne.n	80026da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	08da      	lsrs	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3208      	adds	r2, #8
 800269a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	220f      	movs	r2, #15
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	08da      	lsrs	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3208      	adds	r2, #8
 80026d4:	6939      	ldr	r1, [r7, #16]
 80026d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	2203      	movs	r2, #3
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0203 	and.w	r2, r3, #3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 809a 	beq.w	8002850 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271c:	4b55      	ldr	r3, [pc, #340]	; (8002874 <HAL_GPIO_Init+0x2cc>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	4a54      	ldr	r2, [pc, #336]	; (8002874 <HAL_GPIO_Init+0x2cc>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6193      	str	r3, [r2, #24]
 8002728:	4b52      	ldr	r3, [pc, #328]	; (8002874 <HAL_GPIO_Init+0x2cc>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002734:	4a50      	ldr	r2, [pc, #320]	; (8002878 <HAL_GPIO_Init+0x2d0>)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	220f      	movs	r2, #15
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800275e:	d013      	beq.n	8002788 <HAL_GPIO_Init+0x1e0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a46      	ldr	r2, [pc, #280]	; (800287c <HAL_GPIO_Init+0x2d4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00d      	beq.n	8002784 <HAL_GPIO_Init+0x1dc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a45      	ldr	r2, [pc, #276]	; (8002880 <HAL_GPIO_Init+0x2d8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d007      	beq.n	8002780 <HAL_GPIO_Init+0x1d8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a44      	ldr	r2, [pc, #272]	; (8002884 <HAL_GPIO_Init+0x2dc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_GPIO_Init+0x1d4>
 8002778:	2303      	movs	r3, #3
 800277a:	e006      	b.n	800278a <HAL_GPIO_Init+0x1e2>
 800277c:	2305      	movs	r3, #5
 800277e:	e004      	b.n	800278a <HAL_GPIO_Init+0x1e2>
 8002780:	2302      	movs	r3, #2
 8002782:	e002      	b.n	800278a <HAL_GPIO_Init+0x1e2>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_GPIO_Init+0x1e2>
 8002788:	2300      	movs	r3, #0
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	f002 0203 	and.w	r2, r2, #3
 8002790:	0092      	lsls	r2, r2, #2
 8002792:	4093      	lsls	r3, r2
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800279a:	4937      	ldr	r1, [pc, #220]	; (8002878 <HAL_GPIO_Init+0x2d0>)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a8:	4b37      	ldr	r3, [pc, #220]	; (8002888 <HAL_GPIO_Init+0x2e0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027cc:	4a2e      	ldr	r2, [pc, #184]	; (8002888 <HAL_GPIO_Init+0x2e0>)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027d2:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_GPIO_Init+0x2e0>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027f6:	4a24      	ldr	r2, [pc, #144]	; (8002888 <HAL_GPIO_Init+0x2e0>)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_GPIO_Init+0x2e0>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	43db      	mvns	r3, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <HAL_GPIO_Init+0x2e0>)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002826:	4b18      	ldr	r3, [pc, #96]	; (8002888 <HAL_GPIO_Init+0x2e0>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43db      	mvns	r3, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800284a:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <HAL_GPIO_Init+0x2e0>)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3301      	adds	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	f47f aea9 	bne.w	80025b8 <HAL_GPIO_Init+0x10>
  }
}
 8002866:	bf00      	nop
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40021000 	.word	0x40021000
 8002878:	40010000 	.word	0x40010000
 800287c:	48000400 	.word	0x48000400
 8002880:	48000800 	.word	0x48000800
 8002884:	48000c00 	.word	0x48000c00
 8002888:	40010400 	.word	0x40010400

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028a8:	e002      	b.n	80028b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f000 bef4 	b.w	80036be <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 816a 	beq.w	8002bba <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028e6:	4bb3      	ldr	r3, [pc, #716]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d00c      	beq.n	800290c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028f2:	4bb0      	ldr	r3, [pc, #704]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d159      	bne.n	80029b2 <HAL_RCC_OscConfig+0xf6>
 80028fe:	4bad      	ldr	r3, [pc, #692]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290a:	d152      	bne.n	80029b2 <HAL_RCC_OscConfig+0xf6>
 800290c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002910:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002920:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d102      	bne.n	800293e <HAL_RCC_OscConfig+0x82>
 8002938:	4b9e      	ldr	r3, [pc, #632]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0xae>
 800293e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002942:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002956:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800295a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002966:	4b93      	ldr	r3, [pc, #588]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800296e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002972:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002976:	fa92 f2a2 	rbit	r2, r2
 800297a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800297e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002982:	fab2 f282 	clz	r2, r2
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	f042 0220 	orr.w	r2, r2, #32
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f002 021f 	and.w	r2, r2, #31
 8002992:	2101      	movs	r1, #1
 8002994:	fa01 f202 	lsl.w	r2, r1, r2
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 810c 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x2fc>
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 8106 	bne.w	8002bb8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f000 be86 	b.w	80036be <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029bc:	d106      	bne.n	80029cc <HAL_RCC_OscConfig+0x110>
 80029be:	4b7d      	ldr	r3, [pc, #500]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7c      	ldr	r2, [pc, #496]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e030      	b.n	8002a2e <HAL_RCC_OscConfig+0x172>
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x134>
 80029d6:	4b77      	ldr	r3, [pc, #476]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a76      	ldr	r2, [pc, #472]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 80029dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b74      	ldr	r3, [pc, #464]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a73      	ldr	r2, [pc, #460]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 80029e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e01e      	b.n	8002a2e <HAL_RCC_OscConfig+0x172>
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fa:	d10c      	bne.n	8002a16 <HAL_RCC_OscConfig+0x15a>
 80029fc:	4b6d      	ldr	r3, [pc, #436]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a6c      	ldr	r2, [pc, #432]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a69      	ldr	r2, [pc, #420]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	e00b      	b.n	8002a2e <HAL_RCC_OscConfig+0x172>
 8002a16:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a66      	ldr	r2, [pc, #408]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b64      	ldr	r3, [pc, #400]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a63      	ldr	r2, [pc, #396]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a2e:	4b61      	ldr	r3, [pc, #388]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	f023 020f 	bic.w	r2, r3, #15
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	495d      	ldr	r1, [pc, #372]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d059      	beq.n	8002b00 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe faea 	bl	8001024 <HAL_GetTick>
 8002a50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a56:	f7fe fae5 	bl	8001024 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	; 0x64
 8002a64:	d902      	bls.n	8002a6c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	f000 be29 	b.w	80036be <HAL_RCC_OscConfig+0xe02>
 8002a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a70:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002a80:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d102      	bne.n	8002a9e <HAL_RCC_OscConfig+0x1e2>
 8002a98:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	e015      	b.n	8002aca <HAL_RCC_OscConfig+0x20e>
 8002a9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aa2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ab2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002aba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ace:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ad2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ad6:	fa92 f2a2 	rbit	r2, r2
 8002ada:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ade:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ae2:	fab2 f282 	clz	r2, r2
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f042 0220 	orr.w	r2, r2, #32
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f002 021f 	and.w	r2, r2, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ab      	beq.n	8002a56 <HAL_RCC_OscConfig+0x19a>
 8002afe:	e05c      	b.n	8002bba <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe fa90 	bl	8001024 <HAL_GetTick>
 8002b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b0a:	f7fe fa8b 	bl	8001024 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d902      	bls.n	8002b20 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	f000 bdcf 	b.w	80036be <HAL_RCC_OscConfig+0xe02>
 8002b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b24:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b34:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_OscConfig+0x296>
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x2c2>
 8002b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b56:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b6e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_RCC_OscConfig+0x2f8>)
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b82:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002b86:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b8a:	fa92 f2a2 	rbit	r2, r2
 8002b8e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002b92:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002b96:	fab2 f282 	clz	r2, r2
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f042 0220 	orr.w	r2, r2, #32
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	f002 021f 	and.w	r2, r2, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ab      	bne.n	8002b0a <HAL_RCC_OscConfig+0x24e>
 8002bb2:	e002      	b.n	8002bba <HAL_RCC_OscConfig+0x2fe>
 8002bb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 816f 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bca:	4bd0      	ldr	r3, [pc, #832]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bd6:	4bcd      	ldr	r3, [pc, #820]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d16c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x400>
 8002be2:	4bca      	ldr	r3, [pc, #808]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d166      	bne.n	8002cbc <HAL_RCC_OscConfig+0x400>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c00:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d102      	bne.n	8002c1e <HAL_RCC_OscConfig+0x362>
 8002c18:	4bbc      	ldr	r3, [pc, #752]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	e013      	b.n	8002c46 <HAL_RCC_OscConfig+0x38a>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c30:	2302      	movs	r3, #2
 8002c32:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c42:	4bb2      	ldr	r3, [pc, #712]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2202      	movs	r2, #2
 8002c48:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c4c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c50:	fa92 f2a2 	rbit	r2, r2
 8002c54:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c58:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c5c:	fab2 f282 	clz	r2, r2
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	f042 0220 	orr.w	r2, r2, #32
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	f002 021f 	and.w	r2, r2, #31
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d007      	beq.n	8002c88 <HAL_RCC_OscConfig+0x3cc>
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d002      	beq.n	8002c88 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f000 bd1b 	b.w	80036be <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c88:	4ba0      	ldr	r3, [pc, #640]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	21f8      	movs	r1, #248	; 0xf8
 8002c98:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ca0:	fa91 f1a1 	rbit	r1, r1
 8002ca4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ca8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002cac:	fab1 f181 	clz	r1, r1
 8002cb0:	b2c9      	uxtb	r1, r1
 8002cb2:	408b      	lsls	r3, r1
 8002cb4:	4995      	ldr	r1, [pc, #596]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	e0f5      	b.n	8002ea8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8085 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x516>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002cda:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ce8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f996 	bl	8001024 <HAL_GetTick>
 8002cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7fe f991 	bl	8001024 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d902      	bls.n	8002d14 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	f000 bcd5 	b.w	80036be <HAL_RCC_OscConfig+0xe02>
 8002d14:	2302      	movs	r3, #2
 8002d16:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d26:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d102      	bne.n	8002d44 <HAL_RCC_OscConfig+0x488>
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	e013      	b.n	8002d6c <HAL_RCC_OscConfig+0x4b0>
 8002d44:	2302      	movs	r3, #2
 8002d46:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d56:	2302      	movs	r3, #2
 8002d58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002d68:	4b68      	ldr	r3, [pc, #416]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002d72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002d7e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002d82:	fab2 f282 	clz	r2, r2
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	f042 0220 	orr.w	r2, r2, #32
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	f002 021f 	and.w	r2, r2, #31
 8002d92:	2101      	movs	r1, #1
 8002d94:	fa01 f202 	lsl.w	r2, r1, r2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0af      	beq.n	8002cfe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9e:	4b5b      	ldr	r3, [pc, #364]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	21f8      	movs	r1, #248	; 0xf8
 8002dae:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002db6:	fa91 f1a1 	rbit	r1, r1
 8002dba:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002dbe:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002dc2:	fab1 f181 	clz	r1, r1
 8002dc6:	b2c9      	uxtb	r1, r1
 8002dc8:	408b      	lsls	r3, r1
 8002dca:	4950      	ldr	r1, [pc, #320]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
 8002dd0:	e06a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x5ec>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002de4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002df2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7fe f911 	bl	8001024 <HAL_GetTick>
 8002e02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e08:	f7fe f90c 	bl	8001024 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d902      	bls.n	8002e1e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	f000 bc50 	b.w	80036be <HAL_RCC_OscConfig+0xe02>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e34:	fab3 f383 	clz	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d102      	bne.n	8002e4e <HAL_RCC_OscConfig+0x592>
 8002e48:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	e013      	b.n	8002e76 <HAL_RCC_OscConfig+0x5ba>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e60:	2302      	movs	r3, #2
 8002e62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_RCC_OscConfig+0x650>)
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2202      	movs	r2, #2
 8002e78:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002e7c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e80:	fa92 f2a2 	rbit	r2, r2
 8002e84:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002e88:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e8c:	fab2 f282 	clz	r2, r2
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	f042 0220 	orr.w	r2, r2, #32
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f002 021f 	and.w	r2, r2, #31
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1af      	bne.n	8002e08 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80da 	beq.w	800306c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d069      	beq.n	8002f96 <HAL_RCC_OscConfig+0x6da>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_OscConfig+0x654>)
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2301      	movs	r3, #1
 8002eea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eec:	f7fe f89a 	bl	8001024 <HAL_GetTick>
 8002ef0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef4:	e00e      	b.n	8002f14 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef6:	f7fe f895 	bl	8001024 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d906      	bls.n	8002f14 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e3d9      	b.n	80036be <HAL_RCC_OscConfig+0xe02>
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	10908120 	.word	0x10908120
 8002f14:	2302      	movs	r3, #2
 8002f16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	fa93 f2a3 	rbit	r2, r3
 8002f38:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f42:	2202      	movs	r2, #2
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	fa93 f2a3 	rbit	r2, r3
 8002f50:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002f54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	4ba5      	ldr	r3, [pc, #660]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 8002f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f5e:	2102      	movs	r1, #2
 8002f60:	6019      	str	r1, [r3, #0]
 8002f62:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f1a3 	rbit	r1, r3
 8002f6c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f70:	6019      	str	r1, [r3, #0]
  return result;
 8002f72:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2101      	movs	r1, #1
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0b0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x63a>
 8002f94:	e06a      	b.n	800306c <HAL_RCC_OscConfig+0x7b0>
 8002f96:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	fa93 f2a3 	rbit	r2, r3
 8002fa8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002fac:	601a      	str	r2, [r3, #0]
  return result;
 8002fae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002fb2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b8c      	ldr	r3, [pc, #560]	; (80031f0 <HAL_RCC_OscConfig+0x934>)
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc8:	f7fe f82c 	bl	8001024 <HAL_GetTick>
 8002fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	e009      	b.n	8002fe6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd2:	f7fe f827 	bl	8001024 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e36b      	b.n	80036be <HAL_RCC_OscConfig+0xe02>
 8002fe6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002fea:	2202      	movs	r2, #2
 8002fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	fa93 f2a3 	rbit	r2, r3
 8002ff8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003002:	2202      	movs	r2, #2
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	fa93 f2a3 	rbit	r2, r3
 8003010:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800301a:	2202      	movs	r2, #2
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f2a3 	rbit	r2, r3
 8003028:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800302c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302e:	4b6f      	ldr	r3, [pc, #444]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 8003030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003032:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003036:	2102      	movs	r1, #2
 8003038:	6019      	str	r1, [r3, #0]
 800303a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f1a3 	rbit	r1, r3
 8003044:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003048:	6019      	str	r1, [r3, #0]
  return result;
 800304a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	2101      	movs	r1, #1
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1b2      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306c:	1d3b      	adds	r3, r7, #4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8158 	beq.w	800332c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003082:	4b5a      	ldr	r3, [pc, #360]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d112      	bne.n	80030b4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	4b57      	ldr	r3, [pc, #348]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a56      	ldr	r2, [pc, #344]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003098:	61d3      	str	r3, [r2, #28]
 800309a:	4b54      	ldr	r3, [pc, #336]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80030a2:	f107 0308 	add.w	r3, r7, #8
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f107 0308 	add.w	r3, r7, #8
 80030ac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b4:	4b4f      	ldr	r3, [pc, #316]	; (80031f4 <HAL_RCC_OscConfig+0x938>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d11a      	bne.n	80030f6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c0:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <HAL_RCC_OscConfig+0x938>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <HAL_RCC_OscConfig+0x938>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030cc:	f7fd ffaa 	bl	8001024 <HAL_GetTick>
 80030d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	e009      	b.n	80030ea <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7fd ffa5 	bl	8001024 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e2e9      	b.n	80036be <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b42      	ldr	r3, [pc, #264]	; (80031f4 <HAL_RCC_OscConfig+0x938>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0ef      	beq.n	80030d6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x852>
 8003100:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a39      	ldr	r2, [pc, #228]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6213      	str	r3, [r2, #32]
 800310c:	e02f      	b.n	800316e <HAL_RCC_OscConfig+0x8b2>
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10c      	bne.n	8003132 <HAL_RCC_OscConfig+0x876>
 8003118:	4b34      	ldr	r3, [pc, #208]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4a33      	ldr	r2, [pc, #204]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	6213      	str	r3, [r2, #32]
 8003124:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4a30      	ldr	r2, [pc, #192]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 800312a:	f023 0304 	bic.w	r3, r3, #4
 800312e:	6213      	str	r3, [r2, #32]
 8003130:	e01d      	b.n	800316e <HAL_RCC_OscConfig+0x8b2>
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b05      	cmp	r3, #5
 800313a:	d10c      	bne.n	8003156 <HAL_RCC_OscConfig+0x89a>
 800313c:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a2a      	ldr	r2, [pc, #168]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	6213      	str	r3, [r2, #32]
 8003148:	4b28      	ldr	r3, [pc, #160]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4a27      	ldr	r2, [pc, #156]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6213      	str	r3, [r2, #32]
 8003154:	e00b      	b.n	800316e <HAL_RCC_OscConfig+0x8b2>
 8003156:	4b25      	ldr	r3, [pc, #148]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4a24      	ldr	r2, [pc, #144]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	6213      	str	r3, [r2, #32]
 8003162:	4b22      	ldr	r3, [pc, #136]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	4a21      	ldr	r2, [pc, #132]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 8003168:	f023 0304 	bic.w	r3, r3, #4
 800316c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d06b      	beq.n	8003250 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003178:	f7fd ff54 	bl	8001024 <HAL_GetTick>
 800317c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003180:	e00b      	b.n	800319a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f7fd ff4f 	bl	8001024 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e291      	b.n	80036be <HAL_RCC_OscConfig+0xe02>
 800319a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800319e:	2202      	movs	r2, #2
 80031a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fa93 f2a3 	rbit	r2, r3
 80031ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80031b6:	2202      	movs	r2, #2
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	fa93 f2a3 	rbit	r2, r3
 80031c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031c8:	601a      	str	r2, [r3, #0]
  return result;
 80031ca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d109      	bne.n	80031f8 <HAL_RCC_OscConfig+0x93c>
 80031e4:	4b01      	ldr	r3, [pc, #4]	; (80031ec <HAL_RCC_OscConfig+0x930>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	e014      	b.n	8003214 <HAL_RCC_OscConfig+0x958>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	10908120 	.word	0x10908120
 80031f4:	40007000 	.word	0x40007000
 80031f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031fc:	2202      	movs	r2, #2
 80031fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	fa93 f2a3 	rbit	r2, r3
 800320a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	4bbb      	ldr	r3, [pc, #748]	; (8003500 <HAL_RCC_OscConfig+0xc44>)
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003218:	2102      	movs	r1, #2
 800321a:	6011      	str	r1, [r2, #0]
 800321c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	fa92 f1a2 	rbit	r1, r2
 8003226:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800322a:	6011      	str	r1, [r2, #0]
  return result;
 800322c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	fab2 f282 	clz	r2, r2
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	f002 021f 	and.w	r2, r2, #31
 8003242:	2101      	movs	r1, #1
 8003244:	fa01 f202 	lsl.w	r2, r1, r2
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d099      	beq.n	8003182 <HAL_RCC_OscConfig+0x8c6>
 800324e:	e063      	b.n	8003318 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003250:	f7fd fee8 	bl	8001024 <HAL_GetTick>
 8003254:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003258:	e00b      	b.n	8003272 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fd fee3 	bl	8001024 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e225      	b.n	80036be <HAL_RCC_OscConfig+0xe02>
 8003272:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003276:	2202      	movs	r2, #2
 8003278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	fa93 f2a3 	rbit	r2, r3
 8003284:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800328e:	2202      	movs	r2, #2
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	fa93 f2a3 	rbit	r2, r3
 800329c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032a0:	601a      	str	r2, [r3, #0]
  return result;
 80032a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80032a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f043 0302 	orr.w	r3, r3, #2
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d102      	bne.n	80032c2 <HAL_RCC_OscConfig+0xa06>
 80032bc:	4b90      	ldr	r3, [pc, #576]	; (8003500 <HAL_RCC_OscConfig+0xc44>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	e00d      	b.n	80032de <HAL_RCC_OscConfig+0xa22>
 80032c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032c6:	2202      	movs	r2, #2
 80032c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	fa93 f2a3 	rbit	r2, r3
 80032d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	4b89      	ldr	r3, [pc, #548]	; (8003500 <HAL_RCC_OscConfig+0xc44>)
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80032e2:	2102      	movs	r1, #2
 80032e4:	6011      	str	r1, [r2, #0]
 80032e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	fa92 f1a2 	rbit	r1, r2
 80032f0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80032f4:	6011      	str	r1, [r2, #0]
  return result;
 80032f6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	fab2 f282 	clz	r2, r2
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	f002 021f 	and.w	r2, r2, #31
 800330c:	2101      	movs	r1, #1
 800330e:	fa01 f202 	lsl.w	r2, r1, r2
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1a0      	bne.n	800325a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003318:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800331c:	2b01      	cmp	r3, #1
 800331e:	d105      	bne.n	800332c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003320:	4b77      	ldr	r3, [pc, #476]	; (8003500 <HAL_RCC_OscConfig+0xc44>)
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	4a76      	ldr	r2, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0xc44>)
 8003326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 81c2 	beq.w	80036bc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003338:	4b71      	ldr	r3, [pc, #452]	; (8003500 <HAL_RCC_OscConfig+0xc44>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b08      	cmp	r3, #8
 8003342:	f000 819c 	beq.w	800367e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003346:	1d3b      	adds	r3, r7, #4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	2b02      	cmp	r3, #2
 800334e:	f040 8114 	bne.w	800357a <HAL_RCC_OscConfig+0xcbe>
 8003352:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003356:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800335a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	fa93 f2a3 	rbit	r2, r3
 8003366:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800336a:	601a      	str	r2, [r3, #0]
  return result;
 800336c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003370:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800337c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	461a      	mov	r2, r3
 8003384:	2300      	movs	r3, #0
 8003386:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fd fe4c 	bl	8001024 <HAL_GetTick>
 800338c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003390:	e009      	b.n	80033a6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003392:	f7fd fe47 	bl	8001024 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e18b      	b.n	80036be <HAL_RCC_OscConfig+0xe02>
 80033a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80033aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	fa93 f2a3 	rbit	r2, r3
 80033ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033be:	601a      	str	r2, [r3, #0]
  return result;
 80033c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d102      	bne.n	80033e0 <HAL_RCC_OscConfig+0xb24>
 80033da:	4b49      	ldr	r3, [pc, #292]	; (8003500 <HAL_RCC_OscConfig+0xc44>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	e01b      	b.n	8003418 <HAL_RCC_OscConfig+0xb5c>
 80033e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	fa93 f2a3 	rbit	r2, r3
 80033f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80033fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	fa93 f2a3 	rbit	r2, r3
 800340e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	4b3a      	ldr	r3, [pc, #232]	; (8003500 <HAL_RCC_OscConfig+0xc44>)
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800341c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003420:	6011      	str	r1, [r2, #0]
 8003422:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	fa92 f1a2 	rbit	r1, r2
 800342c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003430:	6011      	str	r1, [r2, #0]
  return result;
 8003432:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	fab2 f282 	clz	r2, r2
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	f042 0220 	orr.w	r2, r2, #32
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	f002 021f 	and.w	r2, r2, #31
 8003448:	2101      	movs	r1, #1
 800344a:	fa01 f202 	lsl.w	r2, r1, r2
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d19e      	bne.n	8003392 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003454:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <HAL_RCC_OscConfig+0xc44>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	430b      	orrs	r3, r1
 800346a:	4925      	ldr	r1, [pc, #148]	; (8003500 <HAL_RCC_OscConfig+0xc44>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
 8003470:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003474:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fa93 f2a3 	rbit	r2, r3
 8003484:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003488:	601a      	str	r2, [r3, #0]
  return result;
 800348a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800348e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800349a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	461a      	mov	r2, r3
 80034a2:	2301      	movs	r3, #1
 80034a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fd fdbd 	bl	8001024 <HAL_GetTick>
 80034aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ae:	e009      	b.n	80034c4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fd fdb8 	bl	8001024 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e0fc      	b.n	80036be <HAL_RCC_OscConfig+0xe02>
 80034c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	fa93 f2a3 	rbit	r2, r3
 80034d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034dc:	601a      	str	r2, [r3, #0]
  return result;
 80034de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d105      	bne.n	8003504 <HAL_RCC_OscConfig+0xc48>
 80034f8:	4b01      	ldr	r3, [pc, #4]	; (8003500 <HAL_RCC_OscConfig+0xc44>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	e01e      	b.n	800353c <HAL_RCC_OscConfig+0xc80>
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800350c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	fa93 f2a3 	rbit	r2, r3
 8003518:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	fa93 f2a3 	rbit	r2, r3
 8003532:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	4b63      	ldr	r3, [pc, #396]	; (80036c8 <HAL_RCC_OscConfig+0xe0c>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003540:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003544:	6011      	str	r1, [r2, #0]
 8003546:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	fa92 f1a2 	rbit	r1, r2
 8003550:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003554:	6011      	str	r1, [r2, #0]
  return result;
 8003556:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	f042 0220 	orr.w	r2, r2, #32
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f002 021f 	and.w	r2, r2, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d09b      	beq.n	80034b0 <HAL_RCC_OscConfig+0xbf4>
 8003578:	e0a0      	b.n	80036bc <HAL_RCC_OscConfig+0xe00>
 800357a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800357e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003582:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	fa93 f2a3 	rbit	r2, r3
 800358e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003592:	601a      	str	r2, [r3, #0]
  return result;
 8003594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003598:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	461a      	mov	r2, r3
 80035ac:	2300      	movs	r3, #0
 80035ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fd fd38 	bl	8001024 <HAL_GetTick>
 80035b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b8:	e009      	b.n	80035ce <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fd fd33 	bl	8001024 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e077      	b.n	80036be <HAL_RCC_OscConfig+0xe02>
 80035ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	fa93 f2a3 	rbit	r2, r3
 80035e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e6:	601a      	str	r2, [r3, #0]
  return result;
 80035e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d102      	bne.n	8003608 <HAL_RCC_OscConfig+0xd4c>
 8003602:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <HAL_RCC_OscConfig+0xe0c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	e01b      	b.n	8003640 <HAL_RCC_OscConfig+0xd84>
 8003608:	f107 0320 	add.w	r3, r7, #32
 800360c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	f107 0320 	add.w	r3, r7, #32
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	fa93 f2a3 	rbit	r2, r3
 800361c:	f107 031c 	add.w	r3, r7, #28
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	f107 0318 	add.w	r3, r7, #24
 8003626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f107 0318 	add.w	r3, r7, #24
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	fa93 f2a3 	rbit	r2, r3
 8003636:	f107 0314 	add.w	r3, r7, #20
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_RCC_OscConfig+0xe0c>)
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	f107 0210 	add.w	r2, r7, #16
 8003644:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003648:	6011      	str	r1, [r2, #0]
 800364a:	f107 0210 	add.w	r2, r7, #16
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	fa92 f1a2 	rbit	r1, r2
 8003654:	f107 020c 	add.w	r2, r7, #12
 8003658:	6011      	str	r1, [r2, #0]
  return result;
 800365a:	f107 020c 	add.w	r2, r7, #12
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	fab2 f282 	clz	r2, r2
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	f042 0220 	orr.w	r2, r2, #32
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	f002 021f 	and.w	r2, r2, #31
 8003670:	2101      	movs	r1, #1
 8003672:	fa01 f202 	lsl.w	r2, r1, r2
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d19e      	bne.n	80035ba <HAL_RCC_OscConfig+0xcfe>
 800367c:	e01e      	b.n	80036bc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e018      	b.n	80036be <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800368c:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <HAL_RCC_OscConfig+0xe0c>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003694:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003698:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800369c:	1d3b      	adds	r3, r7, #4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d108      	bne.n	80036b8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80036a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000

080036cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b09e      	sub	sp, #120	; 0x78
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e162      	b.n	80039aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b90      	ldr	r3, [pc, #576]	; (8003928 <HAL_RCC_ClockConfig+0x25c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d910      	bls.n	8003714 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b8d      	ldr	r3, [pc, #564]	; (8003928 <HAL_RCC_ClockConfig+0x25c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 0207 	bic.w	r2, r3, #7
 80036fa:	498b      	ldr	r1, [pc, #556]	; (8003928 <HAL_RCC_ClockConfig+0x25c>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b89      	ldr	r3, [pc, #548]	; (8003928 <HAL_RCC_ClockConfig+0x25c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e14a      	b.n	80039aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003720:	4b82      	ldr	r3, [pc, #520]	; (800392c <HAL_RCC_ClockConfig+0x260>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	497f      	ldr	r1, [pc, #508]	; (800392c <HAL_RCC_ClockConfig+0x260>)
 800372e:	4313      	orrs	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80dc 	beq.w	80038f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d13c      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xf6>
 8003748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800374c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	b2db      	uxtb	r3, r3
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d102      	bne.n	8003772 <HAL_RCC_ClockConfig+0xa6>
 800376c:	4b6f      	ldr	r3, [pc, #444]	; (800392c <HAL_RCC_ClockConfig+0x260>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	e00f      	b.n	8003792 <HAL_RCC_ClockConfig+0xc6>
 8003772:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003776:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	667b      	str	r3, [r7, #100]	; 0x64
 8003780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003784:	663b      	str	r3, [r7, #96]	; 0x60
 8003786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800378e:	4b67      	ldr	r3, [pc, #412]	; (800392c <HAL_RCC_ClockConfig+0x260>)
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003796:	65ba      	str	r2, [r7, #88]	; 0x58
 8003798:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800379a:	fa92 f2a2 	rbit	r2, r2
 800379e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80037a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037a2:	fab2 f282 	clz	r2, r2
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	f042 0220 	orr.w	r2, r2, #32
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	f002 021f 	and.w	r2, r2, #31
 80037b2:	2101      	movs	r1, #1
 80037b4:	fa01 f202 	lsl.w	r2, r1, r2
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d17b      	bne.n	80038b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e0f3      	b.n	80039aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d13c      	bne.n	8003844 <HAL_RCC_ClockConfig+0x178>
 80037ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d102      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x128>
 80037ee:	4b4f      	ldr	r3, [pc, #316]	; (800392c <HAL_RCC_ClockConfig+0x260>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	e00f      	b.n	8003814 <HAL_RCC_ClockConfig+0x148>
 80037f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	647b      	str	r3, [r7, #68]	; 0x44
 8003802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003806:	643b      	str	r3, [r7, #64]	; 0x40
 8003808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003810:	4b46      	ldr	r3, [pc, #280]	; (800392c <HAL_RCC_ClockConfig+0x260>)
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003818:	63ba      	str	r2, [r7, #56]	; 0x38
 800381a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800381c:	fa92 f2a2 	rbit	r2, r2
 8003820:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003824:	fab2 f282 	clz	r2, r2
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	f042 0220 	orr.w	r2, r2, #32
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f002 021f 	and.w	r2, r2, #31
 8003834:	2101      	movs	r1, #1
 8003836:	fa01 f202 	lsl.w	r2, r1, r2
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d13a      	bne.n	80038b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0b2      	b.n	80039aa <HAL_RCC_ClockConfig+0x2de>
 8003844:	2302      	movs	r3, #2
 8003846:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d102      	bne.n	800386c <HAL_RCC_ClockConfig+0x1a0>
 8003866:	4b31      	ldr	r3, [pc, #196]	; (800392c <HAL_RCC_ClockConfig+0x260>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	e00d      	b.n	8003888 <HAL_RCC_ClockConfig+0x1bc>
 800386c:	2302      	movs	r3, #2
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	2302      	movs	r3, #2
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	4b29      	ldr	r3, [pc, #164]	; (800392c <HAL_RCC_ClockConfig+0x260>)
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2202      	movs	r2, #2
 800388a:	61ba      	str	r2, [r7, #24]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	fa92 f2a2 	rbit	r2, r2
 8003892:	617a      	str	r2, [r7, #20]
  return result;
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	fab2 f282 	clz	r2, r2
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f042 0220 	orr.w	r2, r2, #32
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f002 021f 	and.w	r2, r2, #31
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e079      	b.n	80039aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b6:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCC_ClockConfig+0x260>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f023 0203 	bic.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	491a      	ldr	r1, [pc, #104]	; (800392c <HAL_RCC_ClockConfig+0x260>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c8:	f7fd fbac 	bl	8001024 <HAL_GetTick>
 80038cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d0:	f7fd fba8 	bl	8001024 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	; 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e061      	b.n	80039aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <HAL_RCC_ClockConfig+0x260>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 020c 	and.w	r2, r3, #12
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d1eb      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_ClockConfig+0x25c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d214      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_RCC_ClockConfig+0x25c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 0207 	bic.w	r2, r3, #7
 800390e:	4906      	ldr	r1, [pc, #24]	; (8003928 <HAL_RCC_ClockConfig+0x25c>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b04      	ldr	r3, [pc, #16]	; (8003928 <HAL_RCC_ClockConfig+0x25c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d005      	beq.n	8003930 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e040      	b.n	80039aa <HAL_RCC_ClockConfig+0x2de>
 8003928:	40022000 	.word	0x40022000
 800392c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800393c:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <HAL_RCC_ClockConfig+0x2e8>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	491a      	ldr	r1, [pc, #104]	; (80039b4 <HAL_RCC_ClockConfig+0x2e8>)
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <HAL_RCC_ClockConfig+0x2e8>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4912      	ldr	r1, [pc, #72]	; (80039b4 <HAL_RCC_ClockConfig+0x2e8>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800396e:	f000 f829 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003972:	4601      	mov	r1, r0
 8003974:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <HAL_RCC_ClockConfig+0x2e8>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800397c:	22f0      	movs	r2, #240	; 0xf0
 800397e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	fa92 f2a2 	rbit	r2, r2
 8003986:	60fa      	str	r2, [r7, #12]
  return result;
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	fab2 f282 	clz	r2, r2
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	40d3      	lsrs	r3, r2
 8003992:	4a09      	ldr	r2, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x2ec>)
 8003994:	5cd3      	ldrb	r3, [r2, r3]
 8003996:	fa21 f303 	lsr.w	r3, r1, r3
 800399a:	4a08      	ldr	r2, [pc, #32]	; (80039bc <HAL_RCC_ClockConfig+0x2f0>)
 800399c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <HAL_RCC_ClockConfig+0x2f4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd fafa 	bl	8000f9c <HAL_InitTick>
  
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3778      	adds	r7, #120	; 0x78
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000
 80039b8:	08006538 	.word	0x08006538
 80039bc:	20000000 	.word	0x20000000
 80039c0:	20000004 	.word	0x20000004

080039c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b08b      	sub	sp, #44	; 0x2c
 80039c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	2300      	movs	r3, #0
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80039de:	4b29      	ldr	r3, [pc, #164]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d002      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x30>
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d003      	beq.n	80039fa <HAL_RCC_GetSysClockFreq+0x36>
 80039f2:	e03c      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039f4:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039f6:	623b      	str	r3, [r7, #32]
      break;
 80039f8:	e03c      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a04:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	fa92 f2a2 	rbit	r2, r2
 8003a0c:	607a      	str	r2, [r7, #4]
  return result;
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	fab2 f282 	clz	r2, r2
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	40d3      	lsrs	r3, r2
 8003a18:	4a1c      	ldr	r2, [pc, #112]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a1e:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	220f      	movs	r2, #15
 8003a28:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	fa92 f2a2 	rbit	r2, r2
 8003a30:	60fa      	str	r2, [r7, #12]
  return result;
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	fab2 f282 	clz	r2, r2
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	40d3      	lsrs	r3, r2
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a3e:	5cd3      	ldrb	r3, [r2, r3]
 8003a40:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a4c:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5c:	e004      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	4a0c      	ldr	r2, [pc, #48]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	623b      	str	r3, [r7, #32]
      break;
 8003a6c:	e002      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a70:	623b      	str	r3, [r7, #32]
      break;
 8003a72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a74:	6a3b      	ldr	r3, [r7, #32]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	372c      	adds	r7, #44	; 0x2c
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
 8003a88:	007a1200 	.word	0x007a1200
 8003a8c:	08006550 	.word	0x08006550
 8003a90:	08006560 	.word	0x08006560
 8003a94:	003d0900 	.word	0x003d0900

08003a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_RCC_GetHCLKFreq+0x14>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000000 	.word	0x20000000

08003ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ab6:	f7ff ffef 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003aba:	4601      	mov	r1, r0
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ac4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ac8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	fa92 f2a2 	rbit	r2, r2
 8003ad0:	603a      	str	r2, [r7, #0]
  return result;
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	fab2 f282 	clz	r2, r2
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	40d3      	lsrs	r3, r2
 8003adc:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ade:	5cd3      	ldrb	r3, [r2, r3]
 8003ae0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	08006548 	.word	0x08006548

08003af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003afa:	f7ff ffcd 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003afe:	4601      	mov	r1, r0
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b08:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	fa92 f2a2 	rbit	r2, r2
 8003b14:	603a      	str	r2, [r7, #0]
  return result;
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	fab2 f282 	clz	r2, r2
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	40d3      	lsrs	r3, r2
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b22:	5cd3      	ldrb	r3, [r2, r3]
 8003b24:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	08006548 	.word	0x08006548

08003b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b092      	sub	sp, #72	; 0x48
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80cd 	beq.w	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5c:	4b86      	ldr	r3, [pc, #536]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10e      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b68:	4b83      	ldr	r3, [pc, #524]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	4a82      	ldr	r2, [pc, #520]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b72:	61d3      	str	r3, [r2, #28]
 8003b74:	4b80      	ldr	r3, [pc, #512]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b86:	4b7d      	ldr	r3, [pc, #500]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d118      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b92:	4b7a      	ldr	r3, [pc, #488]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a79      	ldr	r2, [pc, #484]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9e:	f7fd fa41 	bl	8001024 <HAL_GetTick>
 8003ba2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba6:	f7fd fa3d 	bl	8001024 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b64      	cmp	r3, #100	; 0x64
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e0db      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb8:	4b70      	ldr	r3, [pc, #448]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bc4:	4b6c      	ldr	r3, [pc, #432]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d07d      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d076      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003be2:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bf0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	fa93 f3a3 	rbit	r3, r3
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bfc:	fab3 f383 	clz	r3, r3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b5e      	ldr	r3, [pc, #376]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b55      	ldr	r3, [pc, #340]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2300      	movs	r3, #0
 8003c32:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c34:	4a50      	ldr	r2, [pc, #320]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c38:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d045      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7fd f9ee 	bl	8001024 <HAL_GetTick>
 8003c48:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fd f9ea 	bl	8001024 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e086      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003c62:	2302      	movs	r3, #2
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	2302      	movs	r3, #2
 8003c70:	623b      	str	r3, [r7, #32]
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	61fb      	str	r3, [r7, #28]
  return result;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7c:	fab3 f383 	clz	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f043 0302 	orr.w	r3, r3, #2
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d102      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c90:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	e007      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003c96:	2302      	movs	r3, #2
 8003c98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	4b35      	ldr	r3, [pc, #212]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	613a      	str	r2, [r7, #16]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	fa92 f2a2 	rbit	r2, r2
 8003cb0:	60fa      	str	r2, [r7, #12]
  return result;
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	fab2 f282 	clz	r2, r2
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	f002 021f 	and.w	r2, r2, #31
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0bd      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cd0:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4926      	ldr	r1, [pc, #152]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d105      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cea:	4b23      	ldr	r3, [pc, #140]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d02:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f023 0203 	bic.w	r2, r3, #3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	491a      	ldr	r1, [pc, #104]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d20:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	f023 0210 	bic.w	r2, r3, #16
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4912      	ldr	r1, [pc, #72]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	490b      	ldr	r1, [pc, #44]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	4903      	ldr	r1, [pc, #12]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3748      	adds	r7, #72	; 0x48
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	10908100 	.word	0x10908100

08003d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e049      	b.n	8003e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fc ff38 	bl	8000c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f000 fd5a 	bl	800487c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d001      	beq.n	8003e4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e038      	b.n	8003ebe <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <HAL_TIM_Base_Start+0x98>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00e      	beq.n	8003e7c <HAL_TIM_Base_Start+0x48>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e66:	d009      	beq.n	8003e7c <HAL_TIM_Base_Start+0x48>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <HAL_TIM_Base_Start+0x9c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_TIM_Base_Start+0x48>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <HAL_TIM_Base_Start+0xa0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d115      	bne.n	8003ea8 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <HAL_TIM_Base_Start+0xa4>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b06      	cmp	r3, #6
 8003e8c:	d015      	beq.n	8003eba <HAL_TIM_Base_Start+0x86>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e94:	d011      	beq.n	8003eba <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea6:	e008      	b.n	8003eba <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e000      	b.n	8003ebc <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	00010007 	.word	0x00010007

08003edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d001      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e040      	b.n	8003f76 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <HAL_TIM_Base_Start_IT+0xa8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00e      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x58>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d009      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x58>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <HAL_TIM_Base_Start_IT+0xac>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d004      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x58>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a17      	ldr	r2, [pc, #92]	; (8003f8c <HAL_TIM_Base_Start_IT+0xb0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d115      	bne.n	8003f60 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d015      	beq.n	8003f72 <HAL_TIM_Base_Start_IT+0x96>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d011      	beq.n	8003f72 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0201 	orr.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5e:	e008      	b.n	8003f72 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	e000      	b.n	8003f74 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	00010007 	.word	0x00010007

08003f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e049      	b.n	800403a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f841 	bl	8004042 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f000 fc52 	bl	800487c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_TIM_PWM_Start+0x24>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	bf14      	ite	ne
 8004074:	2301      	movne	r3, #1
 8004076:	2300      	moveq	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e03c      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b04      	cmp	r3, #4
 8004080:	d109      	bne.n	8004096 <HAL_TIM_PWM_Start+0x3e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b01      	cmp	r3, #1
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	e02f      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d109      	bne.n	80040b0 <HAL_TIM_PWM_Start+0x58>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e022      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	d109      	bne.n	80040ca <HAL_TIM_PWM_Start+0x72>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	bf14      	ite	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2300      	moveq	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e015      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_PWM_Start+0x8c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e008      	b.n	80040f6 <HAL_TIM_PWM_Start+0x9e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e088      	b.n	8004210 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <HAL_TIM_PWM_Start+0xb6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410c:	e023      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b04      	cmp	r3, #4
 8004112:	d104      	bne.n	800411e <HAL_TIM_PWM_Start+0xc6>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411c:	e01b      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b08      	cmp	r3, #8
 8004122:	d104      	bne.n	800412e <HAL_TIM_PWM_Start+0xd6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800412c:	e013      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b0c      	cmp	r3, #12
 8004132:	d104      	bne.n	800413e <HAL_TIM_PWM_Start+0xe6>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800413c:	e00b      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b10      	cmp	r3, #16
 8004142:	d104      	bne.n	800414e <HAL_TIM_PWM_Start+0xf6>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800414c:	e003      	b.n	8004156 <HAL_TIM_PWM_Start+0xfe>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2201      	movs	r2, #1
 800415c:	6839      	ldr	r1, [r7, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 ff44 	bl	8004fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a2b      	ldr	r2, [pc, #172]	; (8004218 <HAL_TIM_PWM_Start+0x1c0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <HAL_TIM_PWM_Start+0x134>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2a      	ldr	r2, [pc, #168]	; (800421c <HAL_TIM_PWM_Start+0x1c4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_TIM_PWM_Start+0x134>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a28      	ldr	r2, [pc, #160]	; (8004220 <HAL_TIM_PWM_Start+0x1c8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_TIM_PWM_Start+0x134>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a27      	ldr	r2, [pc, #156]	; (8004224 <HAL_TIM_PWM_Start+0x1cc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d101      	bne.n	8004190 <HAL_TIM_PWM_Start+0x138>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <HAL_TIM_PWM_Start+0x13a>
 8004190:	2300      	movs	r3, #0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1b      	ldr	r2, [pc, #108]	; (8004218 <HAL_TIM_PWM_Start+0x1c0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00e      	beq.n	80041ce <HAL_TIM_PWM_Start+0x176>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d009      	beq.n	80041ce <HAL_TIM_PWM_Start+0x176>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1a      	ldr	r2, [pc, #104]	; (8004228 <HAL_TIM_PWM_Start+0x1d0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d004      	beq.n	80041ce <HAL_TIM_PWM_Start+0x176>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <HAL_TIM_PWM_Start+0x1c4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d115      	bne.n	80041fa <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	4b15      	ldr	r3, [pc, #84]	; (800422c <HAL_TIM_PWM_Start+0x1d4>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b06      	cmp	r3, #6
 80041de:	d015      	beq.n	800420c <HAL_TIM_PWM_Start+0x1b4>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e6:	d011      	beq.n	800420c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f8:	e008      	b.n	800420c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	e000      	b.n	800420e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40012c00 	.word	0x40012c00
 800421c:	40014000 	.word	0x40014000
 8004220:	40014400 	.word	0x40014400
 8004224:	40014800 	.word	0x40014800
 8004228:	40000400 	.word	0x40000400
 800422c:	00010007 	.word	0x00010007

08004230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b02      	cmp	r3, #2
 8004244:	d122      	bne.n	800428c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b02      	cmp	r3, #2
 8004252:	d11b      	bne.n	800428c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0202 	mvn.w	r2, #2
 800425c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fae3 	bl	800483e <HAL_TIM_IC_CaptureCallback>
 8004278:	e005      	b.n	8004286 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fad5 	bl	800482a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fae6 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b04      	cmp	r3, #4
 8004298:	d122      	bne.n	80042e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d11b      	bne.n	80042e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0204 	mvn.w	r2, #4
 80042b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2202      	movs	r2, #2
 80042b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fab9 	bl	800483e <HAL_TIM_IC_CaptureCallback>
 80042cc:	e005      	b.n	80042da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 faab 	bl	800482a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fabc 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d122      	bne.n	8004334 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d11b      	bne.n	8004334 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0208 	mvn.w	r2, #8
 8004304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2204      	movs	r2, #4
 800430a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa8f 	bl	800483e <HAL_TIM_IC_CaptureCallback>
 8004320:	e005      	b.n	800432e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fa81 	bl	800482a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fa92 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b10      	cmp	r3, #16
 8004340:	d122      	bne.n	8004388 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b10      	cmp	r3, #16
 800434e:	d11b      	bne.n	8004388 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0210 	mvn.w	r2, #16
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2208      	movs	r2, #8
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa65 	bl	800483e <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa57 	bl	800482a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fa68 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d10e      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0201 	mvn.w	r2, #1
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fb ff3a 	bl	8000228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b80      	cmp	r3, #128	; 0x80
 80043c0:	d10e      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043cc:	2b80      	cmp	r3, #128	; 0x80
 80043ce:	d107      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 ff1c 	bl	8005218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ee:	d10e      	bne.n	800440e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	2b80      	cmp	r3, #128	; 0x80
 80043fc:	d107      	bne.n	800440e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 ff0f 	bl	800522c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	d10e      	bne.n	800443a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d107      	bne.n	800443a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fa16 	bl	8004866 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b20      	cmp	r3, #32
 8004446:	d10e      	bne.n	8004466 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b20      	cmp	r3, #32
 8004454:	d107      	bne.n	8004466 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f06f 0220 	mvn.w	r2, #32
 800445e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fecf 	bl	8005204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800448a:	2302      	movs	r3, #2
 800448c:	e0ff      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b14      	cmp	r3, #20
 800449a:	f200 80f0 	bhi.w	800467e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044f9 	.word	0x080044f9
 80044a8:	0800467f 	.word	0x0800467f
 80044ac:	0800467f 	.word	0x0800467f
 80044b0:	0800467f 	.word	0x0800467f
 80044b4:	08004539 	.word	0x08004539
 80044b8:	0800467f 	.word	0x0800467f
 80044bc:	0800467f 	.word	0x0800467f
 80044c0:	0800467f 	.word	0x0800467f
 80044c4:	0800457b 	.word	0x0800457b
 80044c8:	0800467f 	.word	0x0800467f
 80044cc:	0800467f 	.word	0x0800467f
 80044d0:	0800467f 	.word	0x0800467f
 80044d4:	080045bb 	.word	0x080045bb
 80044d8:	0800467f 	.word	0x0800467f
 80044dc:	0800467f 	.word	0x0800467f
 80044e0:	0800467f 	.word	0x0800467f
 80044e4:	080045fd 	.word	0x080045fd
 80044e8:	0800467f 	.word	0x0800467f
 80044ec:	0800467f 	.word	0x0800467f
 80044f0:	0800467f 	.word	0x0800467f
 80044f4:	0800463d 	.word	0x0800463d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fa34 	bl	800496c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0208 	orr.w	r2, r2, #8
 8004512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0204 	bic.w	r2, r2, #4
 8004522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6999      	ldr	r1, [r3, #24]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	619a      	str	r2, [r3, #24]
      break;
 8004536:	e0a5      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fa9a 	bl	8004a78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6999      	ldr	r1, [r3, #24]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	021a      	lsls	r2, r3, #8
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	619a      	str	r2, [r3, #24]
      break;
 8004578:	e084      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 faf9 	bl	8004b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 0208 	orr.w	r2, r2, #8
 8004594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0204 	bic.w	r2, r2, #4
 80045a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69d9      	ldr	r1, [r3, #28]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	61da      	str	r2, [r3, #28]
      break;
 80045b8:	e064      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fb57 	bl	8004c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69d9      	ldr	r1, [r3, #28]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	021a      	lsls	r2, r3, #8
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	61da      	str	r2, [r3, #28]
      break;
 80045fa:	e043      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fb9a 	bl	8004d3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0208 	orr.w	r2, r2, #8
 8004616:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0204 	bic.w	r2, r2, #4
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800463a:	e023      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fbd8 	bl	8004df8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	021a      	lsls	r2, r3, #8
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800467c:	e002      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	75fb      	strb	r3, [r7, #23]
      break;
 8004682:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800468c:	7dfb      	ldrb	r3, [r7, #23]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop

08004698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_TIM_ConfigClockSource+0x1c>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e0b6      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x18a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f0:	d03e      	beq.n	8004770 <HAL_TIM_ConfigClockSource+0xd8>
 80046f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f6:	f200 8087 	bhi.w	8004808 <HAL_TIM_ConfigClockSource+0x170>
 80046fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fe:	f000 8086 	beq.w	800480e <HAL_TIM_ConfigClockSource+0x176>
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004706:	d87f      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x170>
 8004708:	2b70      	cmp	r3, #112	; 0x70
 800470a:	d01a      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0xaa>
 800470c:	2b70      	cmp	r3, #112	; 0x70
 800470e:	d87b      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x170>
 8004710:	2b60      	cmp	r3, #96	; 0x60
 8004712:	d050      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x11e>
 8004714:	2b60      	cmp	r3, #96	; 0x60
 8004716:	d877      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x170>
 8004718:	2b50      	cmp	r3, #80	; 0x50
 800471a:	d03c      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0xfe>
 800471c:	2b50      	cmp	r3, #80	; 0x50
 800471e:	d873      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x170>
 8004720:	2b40      	cmp	r3, #64	; 0x40
 8004722:	d058      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x13e>
 8004724:	2b40      	cmp	r3, #64	; 0x40
 8004726:	d86f      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x170>
 8004728:	2b30      	cmp	r3, #48	; 0x30
 800472a:	d064      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x15e>
 800472c:	2b30      	cmp	r3, #48	; 0x30
 800472e:	d86b      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x170>
 8004730:	2b20      	cmp	r3, #32
 8004732:	d060      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x15e>
 8004734:	2b20      	cmp	r3, #32
 8004736:	d867      	bhi.n	8004808 <HAL_TIM_ConfigClockSource+0x170>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d05c      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x15e>
 800473c:	2b10      	cmp	r3, #16
 800473e:	d05a      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x15e>
 8004740:	e062      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6899      	ldr	r1, [r3, #8]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f000 fc2b 	bl	8004fac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004764:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	609a      	str	r2, [r3, #8]
      break;
 800476e:	e04f      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6899      	ldr	r1, [r3, #8]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f000 fc14 	bl	8004fac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004792:	609a      	str	r2, [r3, #8]
      break;
 8004794:	e03c      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6859      	ldr	r1, [r3, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f000 fb88 	bl	8004eb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2150      	movs	r1, #80	; 0x50
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fbe1 	bl	8004f76 <TIM_ITRx_SetConfig>
      break;
 80047b4:	e02c      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6859      	ldr	r1, [r3, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f000 fba7 	bl	8004f16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2160      	movs	r1, #96	; 0x60
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fbd1 	bl	8004f76 <TIM_ITRx_SetConfig>
      break;
 80047d4:	e01c      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6859      	ldr	r1, [r3, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f000 fb68 	bl	8004eb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2140      	movs	r1, #64	; 0x40
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fbc1 	bl	8004f76 <TIM_ITRx_SetConfig>
      break;
 80047f4:	e00c      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f000 fbb8 	bl	8004f76 <TIM_ITRx_SetConfig>
      break;
 8004806:	e003      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      break;
 800480c:	e000      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800480e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a32      	ldr	r2, [pc, #200]	; (8004958 <TIM_Base_SetConfig+0xdc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d007      	beq.n	80048a4 <TIM_Base_SetConfig+0x28>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489a:	d003      	beq.n	80048a4 <TIM_Base_SetConfig+0x28>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a2f      	ldr	r2, [pc, #188]	; (800495c <TIM_Base_SetConfig+0xe0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d108      	bne.n	80048b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a27      	ldr	r2, [pc, #156]	; (8004958 <TIM_Base_SetConfig+0xdc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <TIM_Base_SetConfig+0x6a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c4:	d00f      	beq.n	80048e6 <TIM_Base_SetConfig+0x6a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a24      	ldr	r2, [pc, #144]	; (800495c <TIM_Base_SetConfig+0xe0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00b      	beq.n	80048e6 <TIM_Base_SetConfig+0x6a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a23      	ldr	r2, [pc, #140]	; (8004960 <TIM_Base_SetConfig+0xe4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <TIM_Base_SetConfig+0x6a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a22      	ldr	r2, [pc, #136]	; (8004964 <TIM_Base_SetConfig+0xe8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <TIM_Base_SetConfig+0x6a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a21      	ldr	r2, [pc, #132]	; (8004968 <TIM_Base_SetConfig+0xec>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d108      	bne.n	80048f8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a0e      	ldr	r2, [pc, #56]	; (8004958 <TIM_Base_SetConfig+0xdc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00b      	beq.n	800493c <TIM_Base_SetConfig+0xc0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <TIM_Base_SetConfig+0xe4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d007      	beq.n	800493c <TIM_Base_SetConfig+0xc0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0d      	ldr	r2, [pc, #52]	; (8004964 <TIM_Base_SetConfig+0xe8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <TIM_Base_SetConfig+0xc0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a0c      	ldr	r2, [pc, #48]	; (8004968 <TIM_Base_SetConfig+0xec>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d103      	bne.n	8004944 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	615a      	str	r2, [r3, #20]
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40000400 	.word	0x40000400
 8004960:	40014000 	.word	0x40014000
 8004964:	40014400 	.word	0x40014400
 8004968:	40014800 	.word	0x40014800

0800496c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f023 0201 	bic.w	r2, r3, #1
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0303 	bic.w	r3, r3, #3
 80049a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f023 0302 	bic.w	r3, r3, #2
 80049b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a28      	ldr	r2, [pc, #160]	; (8004a68 <TIM_OC1_SetConfig+0xfc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00b      	beq.n	80049e4 <TIM_OC1_SetConfig+0x78>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a27      	ldr	r2, [pc, #156]	; (8004a6c <TIM_OC1_SetConfig+0x100>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d007      	beq.n	80049e4 <TIM_OC1_SetConfig+0x78>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <TIM_OC1_SetConfig+0x104>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_OC1_SetConfig+0x78>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a25      	ldr	r2, [pc, #148]	; (8004a74 <TIM_OC1_SetConfig+0x108>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10c      	bne.n	80049fe <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0308 	bic.w	r3, r3, #8
 80049ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <TIM_OC1_SetConfig+0xfc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <TIM_OC1_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a18      	ldr	r2, [pc, #96]	; (8004a6c <TIM_OC1_SetConfig+0x100>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d007      	beq.n	8004a1e <TIM_OC1_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <TIM_OC1_SetConfig+0x104>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_OC1_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <TIM_OC1_SetConfig+0x108>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d111      	bne.n	8004a42 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	621a      	str	r2, [r3, #32]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40014400 	.word	0x40014400
 8004a74:	40014800 	.word	0x40014800

08004a78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f023 0210 	bic.w	r2, r3, #16
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f023 0320 	bic.w	r3, r3, #32
 8004ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a24      	ldr	r2, [pc, #144]	; (8004b68 <TIM_OC2_SetConfig+0xf0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d10d      	bne.n	8004af8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a1b      	ldr	r2, [pc, #108]	; (8004b68 <TIM_OC2_SetConfig+0xf0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00b      	beq.n	8004b18 <TIM_OC2_SetConfig+0xa0>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <TIM_OC2_SetConfig+0xf4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d007      	beq.n	8004b18 <TIM_OC2_SetConfig+0xa0>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a19      	ldr	r2, [pc, #100]	; (8004b70 <TIM_OC2_SetConfig+0xf8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_OC2_SetConfig+0xa0>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <TIM_OC2_SetConfig+0xfc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d113      	bne.n	8004b40 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b1e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b26:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	40014400 	.word	0x40014400
 8004b74:	40014800 	.word	0x40014800

08004b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0303 	bic.w	r3, r3, #3
 8004bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a23      	ldr	r2, [pc, #140]	; (8004c64 <TIM_OC3_SetConfig+0xec>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d10d      	bne.n	8004bf6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bf4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a1a      	ldr	r2, [pc, #104]	; (8004c64 <TIM_OC3_SetConfig+0xec>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00b      	beq.n	8004c16 <TIM_OC3_SetConfig+0x9e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <TIM_OC3_SetConfig+0xf0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d007      	beq.n	8004c16 <TIM_OC3_SetConfig+0x9e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <TIM_OC3_SetConfig+0xf4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_OC3_SetConfig+0x9e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a17      	ldr	r2, [pc, #92]	; (8004c70 <TIM_OC3_SetConfig+0xf8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d113      	bne.n	8004c3e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	621a      	str	r2, [r3, #32]
}
 8004c58:	bf00      	nop
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800

08004c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	031b      	lsls	r3, r3, #12
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a16      	ldr	r2, [pc, #88]	; (8004d2c <TIM_OC4_SetConfig+0xb8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00b      	beq.n	8004cf0 <TIM_OC4_SetConfig+0x7c>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a15      	ldr	r2, [pc, #84]	; (8004d30 <TIM_OC4_SetConfig+0xbc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d007      	beq.n	8004cf0 <TIM_OC4_SetConfig+0x7c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a14      	ldr	r2, [pc, #80]	; (8004d34 <TIM_OC4_SetConfig+0xc0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC4_SetConfig+0x7c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a13      	ldr	r2, [pc, #76]	; (8004d38 <TIM_OC4_SetConfig+0xc4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d109      	bne.n	8004d04 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	019b      	lsls	r3, r3, #6
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800

08004d3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <TIM_OC5_SetConfig+0xac>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00b      	beq.n	8004dae <TIM_OC5_SetConfig+0x72>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a14      	ldr	r2, [pc, #80]	; (8004dec <TIM_OC5_SetConfig+0xb0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <TIM_OC5_SetConfig+0x72>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <TIM_OC5_SetConfig+0xb4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d003      	beq.n	8004dae <TIM_OC5_SetConfig+0x72>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <TIM_OC5_SetConfig+0xb8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d109      	bne.n	8004dc2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	621a      	str	r2, [r3, #32]
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	40012c00 	.word	0x40012c00
 8004dec:	40014000 	.word	0x40014000
 8004df0:	40014400 	.word	0x40014400
 8004df4:	40014800 	.word	0x40014800

08004df8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	051b      	lsls	r3, r3, #20
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a16      	ldr	r2, [pc, #88]	; (8004ea8 <TIM_OC6_SetConfig+0xb0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00b      	beq.n	8004e6c <TIM_OC6_SetConfig+0x74>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a15      	ldr	r2, [pc, #84]	; (8004eac <TIM_OC6_SetConfig+0xb4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d007      	beq.n	8004e6c <TIM_OC6_SetConfig+0x74>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a14      	ldr	r2, [pc, #80]	; (8004eb0 <TIM_OC6_SetConfig+0xb8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_OC6_SetConfig+0x74>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <TIM_OC6_SetConfig+0xbc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d109      	bne.n	8004e80 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	029b      	lsls	r3, r3, #10
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40014400 	.word	0x40014400
 8004eb4:	40014800 	.word	0x40014800

08004eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f023 0201 	bic.w	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 030a 	bic.w	r3, r3, #10
 8004ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b087      	sub	sp, #28
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f023 0210 	bic.w	r2, r3, #16
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	031b      	lsls	r3, r3, #12
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f043 0307 	orr.w	r3, r3, #7
 8004f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	609a      	str	r2, [r3, #8]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	021a      	lsls	r2, r3, #8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	609a      	str	r2, [r3, #8]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2201      	movs	r2, #1
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1a      	ldr	r2, [r3, #32]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	43db      	mvns	r3, r3
 800500e:	401a      	ands	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1a      	ldr	r2, [r3, #32]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 031f 	and.w	r3, r3, #31
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	fa01 f303 	lsl.w	r3, r1, r3
 8005024:	431a      	orrs	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	621a      	str	r2, [r3, #32]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800504c:	2302      	movs	r3, #2
 800504e:	e054      	b.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a24      	ldr	r2, [pc, #144]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d108      	bne.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005080:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a17      	ldr	r2, [pc, #92]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00e      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b8:	d009      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a13      	ldr	r2, [pc, #76]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a11      	ldr	r2, [pc, #68]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10c      	bne.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40000400 	.word	0x40000400
 8005110:	40014000 	.word	0x40014000

08005114 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800512c:	2302      	movs	r3, #2
 800512e:	e060      	b.n	80051f2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a14      	ldr	r2, [pc, #80]	; (8005200 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d115      	bne.n	80051e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	051b      	lsls	r3, r3, #20
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40012c00 	.word	0x40012c00

08005204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e040      	b.n	80052d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fb fd72 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2224      	movs	r2, #36	; 0x24
 800526c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fb78 	bl	8005974 <UART_SetConfig>
 8005284:	4603      	mov	r3, r0
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e022      	b.n	80052d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fca2 	bl	8005be0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fd29 	bl	8005d24 <UART_CheckIdleState>
 80052d2:	4603      	mov	r3, r0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	; 0x28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d13d      	bne.n	800536e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_UART_Receive_IT+0x22>
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e036      	b.n	8005370 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_UART_Receive_IT+0x34>
 800530c:	2302      	movs	r3, #2
 800530e:	e02f      	b.n	8005370 <HAL_UART_Receive_IT+0x94>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d018      	beq.n	800535e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	613b      	str	r3, [r7, #16]
   return(result);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	623b      	str	r3, [r7, #32]
 800534c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	69f9      	ldr	r1, [r7, #28]
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	61bb      	str	r3, [r7, #24]
   return(result);
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e6      	bne.n	800532c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	461a      	mov	r2, r3
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 fdeb 	bl	8005f40 <UART_Start_Receive_IT>
 800536a:	4603      	mov	r3, r0
 800536c:	e000      	b.n	8005370 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800536e:	2302      	movs	r3, #2
  }
}
 8005370:	4618      	mov	r0, r3
 8005372:	3728      	adds	r7, #40	; 0x28
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b0ba      	sub	sp, #232	; 0xe8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800539e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80053a6:	4013      	ands	r3, r2
 80053a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80053ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d115      	bne.n	80053e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00f      	beq.n	80053e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d009      	beq.n	80053e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 82a3 	beq.w	800591c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
      }
      return;
 80053de:	e29d      	b.n	800591c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8117 	beq.w	8005618 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80053fa:	4b85      	ldr	r3, [pc, #532]	; (8005610 <HAL_UART_IRQHandler+0x298>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 810a 	beq.w	8005618 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d011      	beq.n	8005434 <HAL_UART_IRQHandler+0xbc>
 8005410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2201      	movs	r2, #1
 8005422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542a:	f043 0201 	orr.w	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d011      	beq.n	8005464 <HAL_UART_IRQHandler+0xec>
 8005440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00b      	beq.n	8005464 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2202      	movs	r2, #2
 8005452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800545a:	f043 0204 	orr.w	r2, r3, #4
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d011      	beq.n	8005494 <HAL_UART_IRQHandler+0x11c>
 8005470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2204      	movs	r2, #4
 8005482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548a:	f043 0202 	orr.w	r2, r3, #2
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d017      	beq.n	80054d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d105      	bne.n	80054b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00b      	beq.n	80054d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2208      	movs	r2, #8
 80054be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c6:	f043 0208 	orr.w	r2, r3, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d012      	beq.n	8005502 <HAL_UART_IRQHandler+0x18a>
 80054dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00c      	beq.n	8005502 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f8:	f043 0220 	orr.w	r2, r3, #32
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 8209 	beq.w	8005920 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00d      	beq.n	8005536 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800551a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800553c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d005      	beq.n	800555a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800554e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005552:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005556:	2b00      	cmp	r3, #0
 8005558:	d04f      	beq.n	80055fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fd9c 	bl	8006098 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d141      	bne.n	80055f2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3308      	adds	r3, #8
 8005574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800559a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800559e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1d9      	bne.n	800556e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d013      	beq.n	80055ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c6:	4a13      	ldr	r2, [pc, #76]	; (8005614 <HAL_UART_IRQHandler+0x29c>)
 80055c8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fc ffac 	bl	800252c <HAL_DMA_Abort_IT>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d017      	beq.n	800560a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	e00f      	b.n	800560a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f9ac 	bl	8005948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	e00b      	b.n	800560a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f9a8 	bl	8005948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f8:	e007      	b.n	800560a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f9a4 	bl	8005948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005608:	e18a      	b.n	8005920 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560a:	bf00      	nop
    return;
 800560c:	e188      	b.n	8005920 <HAL_UART_IRQHandler+0x5a8>
 800560e:	bf00      	nop
 8005610:	04000120 	.word	0x04000120
 8005614:	0800615f 	.word	0x0800615f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561c:	2b01      	cmp	r3, #1
 800561e:	f040 8143 	bne.w	80058a8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 813c 	beq.w	80058a8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8135 	beq.w	80058a8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2210      	movs	r2, #16
 8005644:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	f040 80b1 	bne.w	80057b8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005662:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 815c 	beq.w	8005924 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005676:	429a      	cmp	r2, r3
 8005678:	f080 8154 	bcs.w	8005924 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005682:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	2b20      	cmp	r3, #32
 800568e:	f000 8085 	beq.w	800579c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1da      	bne.n	8005692 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3308      	adds	r3, #8
 80056e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056ee:	f023 0301 	bic.w	r3, r3, #1
 80056f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005700:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005704:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005708:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e1      	bne.n	80056dc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3308      	adds	r3, #8
 800571e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800572a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800573c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800573e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005742:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800574a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e3      	bne.n	8005718 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800576a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800576c:	f023 0310 	bic.w	r3, r3, #16
 8005770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800577e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005780:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005784:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800578c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e4      	bne.n	800575c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	4618      	mov	r0, r3
 8005798:	f7fc fe8f 	bl	80024ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8d3 	bl	800595c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057b6:	e0b5      	b.n	8005924 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80a7 	beq.w	8005928 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80057da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80a2 	beq.w	8005928 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005806:	647b      	str	r3, [r7, #68]	; 0x44
 8005808:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800580c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e4      	bne.n	80057e4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3308      	adds	r3, #8
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	623b      	str	r3, [r7, #32]
   return(result);
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3308      	adds	r3, #8
 800583a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800583e:	633a      	str	r2, [r7, #48]	; 0x30
 8005840:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e3      	bne.n	800581a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	60fb      	str	r3, [r7, #12]
   return(result);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f023 0310 	bic.w	r3, r3, #16
 8005878:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	69b9      	ldr	r1, [r7, #24]
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	617b      	str	r3, [r7, #20]
   return(result);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e4      	bne.n	8005864 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800589a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f85b 	bl	800595c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058a6:	e03f      	b.n	8005928 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00e      	beq.n	80058d2 <HAL_UART_IRQHandler+0x55a>
 80058b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fde3 	bl	8006496 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058d0:	e02d      	b.n	800592e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00e      	beq.n	80058fc <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d008      	beq.n	80058fc <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01c      	beq.n	800592c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
    }
    return;
 80058fa:	e017      	b.n	800592c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d012      	beq.n	800592e <HAL_UART_IRQHandler+0x5b6>
 8005908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00c      	beq.n	800592e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fc38 	bl	800618a <UART_EndTransmit_IT>
    return;
 800591a:	e008      	b.n	800592e <HAL_UART_IRQHandler+0x5b6>
      return;
 800591c:	bf00      	nop
 800591e:	e006      	b.n	800592e <HAL_UART_IRQHandler+0x5b6>
    return;
 8005920:	bf00      	nop
 8005922:	e004      	b.n	800592e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005924:	bf00      	nop
 8005926:	e002      	b.n	800592e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005928:	bf00      	nop
 800592a:	e000      	b.n	800592e <HAL_UART_IRQHandler+0x5b6>
    return;
 800592c:	bf00      	nop
  }

}
 800592e:	37e8      	adds	r7, #232	; 0xe8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b8a      	ldr	r3, [pc, #552]	; (8005bc8 <UART_SetConfig+0x254>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	430b      	orrs	r3, r1
 80059aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a78      	ldr	r2, [pc, #480]	; (8005bcc <UART_SetConfig+0x258>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d120      	bne.n	8005a32 <UART_SetConfig+0xbe>
 80059f0:	4b77      	ldr	r3, [pc, #476]	; (8005bd0 <UART_SetConfig+0x25c>)
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	f003 0303 	and.w	r3, r3, #3
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d817      	bhi.n	8005a2c <UART_SetConfig+0xb8>
 80059fc:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <UART_SetConfig+0x90>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a15 	.word	0x08005a15
 8005a08:	08005a21 	.word	0x08005a21
 8005a0c:	08005a27 	.word	0x08005a27
 8005a10:	08005a1b 	.word	0x08005a1b
 8005a14:	2300      	movs	r3, #0
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e01d      	b.n	8005a56 <UART_SetConfig+0xe2>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e01a      	b.n	8005a56 <UART_SetConfig+0xe2>
 8005a20:	2304      	movs	r3, #4
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e017      	b.n	8005a56 <UART_SetConfig+0xe2>
 8005a26:	2308      	movs	r3, #8
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e014      	b.n	8005a56 <UART_SetConfig+0xe2>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	77fb      	strb	r3, [r7, #31]
 8005a30:	e011      	b.n	8005a56 <UART_SetConfig+0xe2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a67      	ldr	r2, [pc, #412]	; (8005bd4 <UART_SetConfig+0x260>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d102      	bne.n	8005a42 <UART_SetConfig+0xce>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e009      	b.n	8005a56 <UART_SetConfig+0xe2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a64      	ldr	r2, [pc, #400]	; (8005bd8 <UART_SetConfig+0x264>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d102      	bne.n	8005a52 <UART_SetConfig+0xde>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	77fb      	strb	r3, [r7, #31]
 8005a50:	e001      	b.n	8005a56 <UART_SetConfig+0xe2>
 8005a52:	2310      	movs	r3, #16
 8005a54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a5e:	d15b      	bne.n	8005b18 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005a60:	7ffb      	ldrb	r3, [r7, #31]
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d827      	bhi.n	8005ab6 <UART_SetConfig+0x142>
 8005a66:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <UART_SetConfig+0xf8>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005a91 	.word	0x08005a91
 8005a70:	08005a99 	.word	0x08005a99
 8005a74:	08005aa1 	.word	0x08005aa1
 8005a78:	08005ab7 	.word	0x08005ab7
 8005a7c:	08005aa7 	.word	0x08005aa7
 8005a80:	08005ab7 	.word	0x08005ab7
 8005a84:	08005ab7 	.word	0x08005ab7
 8005a88:	08005ab7 	.word	0x08005ab7
 8005a8c:	08005aaf 	.word	0x08005aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a90:	f7fe f80e 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 8005a94:	61b8      	str	r0, [r7, #24]
        break;
 8005a96:	e013      	b.n	8005ac0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a98:	f7fe f82c 	bl	8003af4 <HAL_RCC_GetPCLK2Freq>
 8005a9c:	61b8      	str	r0, [r7, #24]
        break;
 8005a9e:	e00f      	b.n	8005ac0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aa0:	4b4e      	ldr	r3, [pc, #312]	; (8005bdc <UART_SetConfig+0x268>)
 8005aa2:	61bb      	str	r3, [r7, #24]
        break;
 8005aa4:	e00c      	b.n	8005ac0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aa6:	f7fd ff8d 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8005aaa:	61b8      	str	r0, [r7, #24]
        break;
 8005aac:	e008      	b.n	8005ac0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab2:	61bb      	str	r3, [r7, #24]
        break;
 8005ab4:	e004      	b.n	8005ac0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	77bb      	strb	r3, [r7, #30]
        break;
 8005abe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d074      	beq.n	8005bb0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	005a      	lsls	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	085b      	lsrs	r3, r3, #1
 8005ad0:	441a      	add	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b0f      	cmp	r3, #15
 8005ae2:	d916      	bls.n	8005b12 <UART_SetConfig+0x19e>
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aea:	d212      	bcs.n	8005b12 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f023 030f 	bic.w	r3, r3, #15
 8005af4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	085b      	lsrs	r3, r3, #1
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	89fb      	ldrh	r3, [r7, #14]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	89fa      	ldrh	r2, [r7, #14]
 8005b0e:	60da      	str	r2, [r3, #12]
 8005b10:	e04e      	b.n	8005bb0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	77bb      	strb	r3, [r7, #30]
 8005b16:	e04b      	b.n	8005bb0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b18:	7ffb      	ldrb	r3, [r7, #31]
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d827      	bhi.n	8005b6e <UART_SetConfig+0x1fa>
 8005b1e:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <UART_SetConfig+0x1b0>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b51 	.word	0x08005b51
 8005b2c:	08005b59 	.word	0x08005b59
 8005b30:	08005b6f 	.word	0x08005b6f
 8005b34:	08005b5f 	.word	0x08005b5f
 8005b38:	08005b6f 	.word	0x08005b6f
 8005b3c:	08005b6f 	.word	0x08005b6f
 8005b40:	08005b6f 	.word	0x08005b6f
 8005b44:	08005b67 	.word	0x08005b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b48:	f7fd ffb2 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 8005b4c:	61b8      	str	r0, [r7, #24]
        break;
 8005b4e:	e013      	b.n	8005b78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b50:	f7fd ffd0 	bl	8003af4 <HAL_RCC_GetPCLK2Freq>
 8005b54:	61b8      	str	r0, [r7, #24]
        break;
 8005b56:	e00f      	b.n	8005b78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b58:	4b20      	ldr	r3, [pc, #128]	; (8005bdc <UART_SetConfig+0x268>)
 8005b5a:	61bb      	str	r3, [r7, #24]
        break;
 8005b5c:	e00c      	b.n	8005b78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b5e:	f7fd ff31 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8005b62:	61b8      	str	r0, [r7, #24]
        break;
 8005b64:	e008      	b.n	8005b78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b6a:	61bb      	str	r3, [r7, #24]
        break;
 8005b6c:	e004      	b.n	8005b78 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	77bb      	strb	r3, [r7, #30]
        break;
 8005b76:	bf00      	nop
    }

    if (pclk != 0U)
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d018      	beq.n	8005bb0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	085a      	lsrs	r2, r3, #1
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	441a      	add	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b0f      	cmp	r3, #15
 8005b98:	d908      	bls.n	8005bac <UART_SetConfig+0x238>
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba0:	d204      	bcs.n	8005bac <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	e001      	b.n	8005bb0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005bbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	efff69f3 	.word	0xefff69f3
 8005bcc:	40013800 	.word	0x40013800
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	40004400 	.word	0x40004400
 8005bd8:	40004800 	.word	0x40004800
 8005bdc:	007a1200 	.word	0x007a1200

08005be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01a      	beq.n	8005cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cde:	d10a      	bne.n	8005cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	605a      	str	r2, [r3, #4]
  }
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d34:	f7fb f976 	bl	8001024 <HAL_GetTick>
 8005d38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d10e      	bne.n	8005d66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f82d 	bl	8005db6 <UART_WaitOnFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e023      	b.n	8005dae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d10e      	bne.n	8005d92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f817 	bl	8005db6 <UART_WaitOnFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e00d      	b.n	8005dae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b09c      	sub	sp, #112	; 0x70
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc6:	e0a5      	b.n	8005f14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	f000 80a1 	beq.w	8005f14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd2:	f7fb f927 	bl	8001024 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d302      	bcc.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d13e      	bne.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dfc:	667b      	str	r3, [r7, #100]	; 0x64
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e6      	bne.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3308      	adds	r3, #8
 8005e20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	663b      	str	r3, [r7, #96]	; 0x60
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3308      	adds	r3, #8
 8005e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e5      	bne.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2220      	movs	r2, #32
 8005e52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e067      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d04f      	beq.n	8005f14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e82:	d147      	bne.n	8005f14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	e853 3f00 	ldrex	r3, [r3]
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
 8005eae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eb4:	e841 2300 	strex	r3, r2, [r1]
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1e6      	bne.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3308      	adds	r3, #8
 8005ede:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ee0:	623a      	str	r2, [r7, #32]
 8005ee2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	69f9      	ldr	r1, [r7, #28]
 8005ee6:	6a3a      	ldr	r2, [r7, #32]
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e5      	bne.n	8005ec0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e010      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69da      	ldr	r2, [r3, #28]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	bf0c      	ite	eq
 8005f24:	2301      	moveq	r3, #1
 8005f26:	2300      	movne	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	f43f af4a 	beq.w	8005dc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3770      	adds	r7, #112	; 0x70
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b091      	sub	sp, #68	; 0x44
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	88fa      	ldrh	r2, [r7, #6]
 8005f58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f72:	d10e      	bne.n	8005f92 <UART_Start_Receive_IT+0x52>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d105      	bne.n	8005f88 <UART_Start_Receive_IT+0x48>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005f82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f86:	e02d      	b.n	8005fe4 <UART_Start_Receive_IT+0xa4>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	22ff      	movs	r2, #255	; 0xff
 8005f8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f90:	e028      	b.n	8005fe4 <UART_Start_Receive_IT+0xa4>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10d      	bne.n	8005fb6 <UART_Start_Receive_IT+0x76>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <UART_Start_Receive_IT+0x6c>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	22ff      	movs	r2, #255	; 0xff
 8005fa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005faa:	e01b      	b.n	8005fe4 <UART_Start_Receive_IT+0xa4>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	227f      	movs	r2, #127	; 0x7f
 8005fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fb4:	e016      	b.n	8005fe4 <UART_Start_Receive_IT+0xa4>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fbe:	d10d      	bne.n	8005fdc <UART_Start_Receive_IT+0x9c>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d104      	bne.n	8005fd2 <UART_Start_Receive_IT+0x92>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	227f      	movs	r2, #127	; 0x7f
 8005fcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fd0:	e008      	b.n	8005fe4 <UART_Start_Receive_IT+0xa4>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	223f      	movs	r2, #63	; 0x3f
 8005fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fda:	e003      	b.n	8005fe4 <UART_Start_Receive_IT+0xa4>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2222      	movs	r2, #34	; 0x22
 8005ff0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3308      	adds	r3, #8
 8006010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006012:	637a      	str	r2, [r7, #52]	; 0x34
 8006014:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e5      	bne.n	8005ff2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602e:	d107      	bne.n	8006040 <UART_Start_Receive_IT+0x100>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d103      	bne.n	8006040 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4a15      	ldr	r2, [pc, #84]	; (8006090 <UART_Start_Receive_IT+0x150>)
 800603c:	665a      	str	r2, [r3, #100]	; 0x64
 800603e:	e002      	b.n	8006046 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4a14      	ldr	r2, [pc, #80]	; (8006094 <UART_Start_Receive_IT+0x154>)
 8006044:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	613b      	str	r3, [r7, #16]
   return(result);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006062:	63bb      	str	r3, [r7, #56]	; 0x38
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	461a      	mov	r2, r3
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	623b      	str	r3, [r7, #32]
 800606e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	69f9      	ldr	r1, [r7, #28]
 8006072:	6a3a      	ldr	r2, [r7, #32]
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	61bb      	str	r3, [r7, #24]
   return(result);
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e6      	bne.n	800604e <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3744      	adds	r7, #68	; 0x44
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	0800633b 	.word	0x0800633b
 8006094:	080061df 	.word	0x080061df

08006098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b095      	sub	sp, #84	; 0x54
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060be:	643b      	str	r3, [r7, #64]	; 0x40
 80060c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e6      	bne.n	80060a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3308      	adds	r3, #8
 80060d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3308      	adds	r3, #8
 80060f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e5      	bne.n	80060d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610a:	2b01      	cmp	r3, #1
 800610c:	d118      	bne.n	8006140 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	60bb      	str	r3, [r7, #8]
   return(result);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f023 0310 	bic.w	r3, r3, #16
 8006122:	647b      	str	r3, [r7, #68]	; 0x44
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6979      	ldr	r1, [r7, #20]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	613b      	str	r3, [r7, #16]
   return(result);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e6      	bne.n	800610e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006152:	bf00      	nop
 8006154:	3754      	adds	r7, #84	; 0x54
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f7ff fbe3 	bl	8005948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006182:	bf00      	nop
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b088      	sub	sp, #32
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	60bb      	str	r3, [r7, #8]
   return(result);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a6:	61fb      	str	r3, [r7, #28]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	6979      	ldr	r1, [r7, #20]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	e841 2300 	strex	r3, r2, [r1]
 80061bc:	613b      	str	r3, [r7, #16]
   return(result);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e6      	bne.n	8006192 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff fbaf 	bl	8005934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061d6:	bf00      	nop
 80061d8:	3720      	adds	r7, #32
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b096      	sub	sp, #88	; 0x58
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061f4:	2b22      	cmp	r3, #34	; 0x22
 80061f6:	f040 8094 	bne.w	8006322 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006200:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006204:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006208:	b2d9      	uxtb	r1, r3
 800620a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800620e:	b2da      	uxtb	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006214:	400a      	ands	r2, r1
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d177      	bne.n	8006332 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	e853 3f00 	ldrex	r3, [r3]
 800624e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006252:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006256:	653b      	str	r3, [r7, #80]	; 0x50
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006260:	647b      	str	r3, [r7, #68]	; 0x44
 8006262:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800626e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e6      	bne.n	8006242 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3308      	adds	r3, #8
 800627a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	623b      	str	r3, [r7, #32]
   return(result);
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	f023 0301 	bic.w	r3, r3, #1
 800628a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3308      	adds	r3, #8
 8006292:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006294:	633a      	str	r2, [r7, #48]	; 0x30
 8006296:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800629a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e5      	bne.n	8006274 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d12e      	bne.n	800631a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	e853 3f00 	ldrex	r3, [r3]
 80062ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0310 	bic.w	r3, r3, #16
 80062d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	69b9      	ldr	r1, [r7, #24]
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	617b      	str	r3, [r7, #20]
   return(result);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e6      	bne.n	80062c2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d103      	bne.n	800630a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2210      	movs	r2, #16
 8006308:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff fb22 	bl	800595c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006318:	e00b      	b.n	8006332 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7f9 ff54 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8006320:	e007      	b.n	8006332 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699a      	ldr	r2, [r3, #24]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0208 	orr.w	r2, r2, #8
 8006330:	619a      	str	r2, [r3, #24]
}
 8006332:	bf00      	nop
 8006334:	3758      	adds	r7, #88	; 0x58
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b096      	sub	sp, #88	; 0x58
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006348:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006350:	2b22      	cmp	r3, #34	; 0x22
 8006352:	f040 8094 	bne.w	800647e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800635c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006366:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800636a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800636e:	4013      	ands	r3, r2
 8006370:	b29a      	uxth	r2, r3
 8006372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006374:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637a:	1c9a      	adds	r2, r3, #2
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006398:	b29b      	uxth	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d177      	bne.n	800648e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063bc:	643b      	str	r3, [r7, #64]	; 0x40
 80063be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e6      	bne.n	800639e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3308      	adds	r3, #8
 80063d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3308      	adds	r3, #8
 80063ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e5      	bne.n	80063d0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006414:	2b01      	cmp	r3, #1
 8006416:	d12e      	bne.n	8006476 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	60bb      	str	r3, [r7, #8]
   return(result);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f023 0310 	bic.w	r3, r3, #16
 8006432:	647b      	str	r3, [r7, #68]	; 0x44
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	6979      	ldr	r1, [r7, #20]
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	613b      	str	r3, [r7, #16]
   return(result);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e6      	bne.n	800641e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b10      	cmp	r3, #16
 800645c:	d103      	bne.n	8006466 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2210      	movs	r2, #16
 8006464:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff fa74 	bl	800595c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006474:	e00b      	b.n	800648e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7f9 fea6 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 800647c:	e007      	b.n	800648e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0208 	orr.w	r2, r2, #8
 800648c:	619a      	str	r2, [r3, #24]
}
 800648e:	bf00      	nop
 8006490:	3758      	adds	r7, #88	; 0x58
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <__libc_init_array>:
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	4d0d      	ldr	r5, [pc, #52]	; (80064e4 <__libc_init_array+0x38>)
 80064b0:	4c0d      	ldr	r4, [pc, #52]	; (80064e8 <__libc_init_array+0x3c>)
 80064b2:	1b64      	subs	r4, r4, r5
 80064b4:	10a4      	asrs	r4, r4, #2
 80064b6:	2600      	movs	r6, #0
 80064b8:	42a6      	cmp	r6, r4
 80064ba:	d109      	bne.n	80064d0 <__libc_init_array+0x24>
 80064bc:	4d0b      	ldr	r5, [pc, #44]	; (80064ec <__libc_init_array+0x40>)
 80064be:	4c0c      	ldr	r4, [pc, #48]	; (80064f0 <__libc_init_array+0x44>)
 80064c0:	f000 f82e 	bl	8006520 <_init>
 80064c4:	1b64      	subs	r4, r4, r5
 80064c6:	10a4      	asrs	r4, r4, #2
 80064c8:	2600      	movs	r6, #0
 80064ca:	42a6      	cmp	r6, r4
 80064cc:	d105      	bne.n	80064da <__libc_init_array+0x2e>
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d4:	4798      	blx	r3
 80064d6:	3601      	adds	r6, #1
 80064d8:	e7ee      	b.n	80064b8 <__libc_init_array+0xc>
 80064da:	f855 3b04 	ldr.w	r3, [r5], #4
 80064de:	4798      	blx	r3
 80064e0:	3601      	adds	r6, #1
 80064e2:	e7f2      	b.n	80064ca <__libc_init_array+0x1e>
 80064e4:	08006570 	.word	0x08006570
 80064e8:	08006570 	.word	0x08006570
 80064ec:	08006570 	.word	0x08006570
 80064f0:	08006574 	.word	0x08006574

080064f4 <memcpy>:
 80064f4:	440a      	add	r2, r1
 80064f6:	4291      	cmp	r1, r2
 80064f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80064fc:	d100      	bne.n	8006500 <memcpy+0xc>
 80064fe:	4770      	bx	lr
 8006500:	b510      	push	{r4, lr}
 8006502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800650a:	4291      	cmp	r1, r2
 800650c:	d1f9      	bne.n	8006502 <memcpy+0xe>
 800650e:	bd10      	pop	{r4, pc}

08006510 <memset>:
 8006510:	4402      	add	r2, r0
 8006512:	4603      	mov	r3, r0
 8006514:	4293      	cmp	r3, r2
 8006516:	d100      	bne.n	800651a <memset+0xa>
 8006518:	4770      	bx	lr
 800651a:	f803 1b01 	strb.w	r1, [r3], #1
 800651e:	e7f9      	b.n	8006514 <memset+0x4>

08006520 <_init>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	bf00      	nop
 8006524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006526:	bc08      	pop	{r3}
 8006528:	469e      	mov	lr, r3
 800652a:	4770      	bx	lr

0800652c <_fini>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	bf00      	nop
 8006530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006532:	bc08      	pop	{r3}
 8006534:	469e      	mov	lr, r3
 8006536:	4770      	bx	lr
