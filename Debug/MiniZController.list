
MiniZController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007180  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007340  08007340  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08007340  08007340  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007340  08007340  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007344  08007344  00017344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  2000001c  08007364  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08007364  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141c5  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002701  00000000  00000000  00034211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00036918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  000378e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c477  00000000  00000000  000387c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001344f  00000000  00000000  00054c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abb85  00000000  00000000  00068086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113c0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004298  00000000  00000000  00113c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080072f0 	.word	0x080072f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080072f0 	.word	0x080072f0

080001c8 <HAL_UART_RxCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a2a      	ldr	r2, [pc, #168]	; (800027c <HAL_UART_RxCpltCallback+0xb4>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d14c      	bne.n	8000272 <HAL_UART_RxCpltCallback+0xaa>
		{
			// Reset timeout
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 80001d8:	4b29      	ldr	r3, [pc, #164]	; (8000280 <HAL_UART_RxCpltCallback+0xb8>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2200      	movs	r2, #0
 80001de:	625a      	str	r2, [r3, #36]	; 0x24

			// Add received byte to sbus FIFO
			SBUS_AddByte(gSBUSByte);
 80001e0:	4b28      	ldr	r3, [pc, #160]	; (8000284 <HAL_UART_RxCpltCallback+0xbc>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 fed9 	bl	8000f9c <SBUS_AddByte>

			// Available sbus frame ?

			if (SBUS_GetChannel(&gSBUSChannels) == FRAME_COMPLETE)
 80001ea:	4827      	ldr	r0, [pc, #156]	; (8000288 <HAL_UART_RxCpltCallback+0xc0>)
 80001ec:	f000 fef6 	bl	8000fdc <SBUS_GetChannel>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d138      	bne.n	8000268 <HAL_UART_RxCpltCallback+0xa0>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000200:	f003 f8e2 	bl	80033c8 <HAL_GPIO_WritePin>
				Throttle = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_2, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
 8000204:	4b20      	ldr	r3, [pc, #128]	; (8000288 <HAL_UART_RxCpltCallback+0xc0>)
 8000206:	789a      	ldrb	r2, [r3, #2]
 8000208:	0992      	lsrs	r2, r2, #6
 800020a:	b2d2      	uxtb	r2, r2
 800020c:	78d9      	ldrb	r1, [r3, #3]
 800020e:	0089      	lsls	r1, r1, #2
 8000210:	430a      	orrs	r2, r1
 8000212:	791b      	ldrb	r3, [r3, #4]
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	029b      	lsls	r3, r3, #10
 800021a:	4313      	orrs	r3, r2
 800021c:	b29b      	uxth	r3, r3
 800021e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000222:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000226:	4618      	mov	r0, r3
 8000228:	f000 ff1c 	bl	8001064 <SBUS_NormalizeChannel>
 800022c:	4603      	mov	r3, r0
 800022e:	b21b      	sxth	r3, r3
 8000230:	461a      	mov	r2, r3
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <HAL_UART_RxCpltCallback+0xc4>)
 8000234:	601a      	str	r2, [r3, #0]
				Direction = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_3, MIN_SERVO_VALUE, MAX_SERVO_VALUE);
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <HAL_UART_RxCpltCallback+0xc0>)
 8000238:	791a      	ldrb	r2, [r3, #4]
 800023a:	0852      	lsrs	r2, r2, #1
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	795b      	ldrb	r3, [r3, #5]
 8000240:	f003 030f 	and.w	r3, r3, #15
 8000244:	01db      	lsls	r3, r3, #7
 8000246:	4313      	orrs	r3, r2
 8000248:	b29b      	uxth	r3, r3
 800024a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800024e:	f240 61d6 	movw	r1, #1750	; 0x6d6
 8000252:	4618      	mov	r0, r3
 8000254:	f000 ff06 	bl	8001064 <SBUS_NormalizeChannel>
 8000258:	4603      	mov	r3, r0
 800025a:	b21b      	sxth	r3, r3
 800025c:	461a      	mov	r2, r3
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <HAL_UART_RxCpltCallback+0xc8>)
 8000260:	601a      	str	r2, [r3, #0]
				FailSafe = 0;
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <HAL_UART_RxCpltCallback+0xcc>)
 8000264:	2200      	movs	r2, #0
 8000266:	701a      	strb	r2, [r3, #0]
			else
			{
				//FailSafe = 1;
			}
			// Restart IT
			HAL_UART_Receive_IT(huart, &gSBUSByte, 1);
 8000268:	2201      	movs	r2, #1
 800026a:	4906      	ldr	r1, [pc, #24]	; (8000284 <HAL_UART_RxCpltCallback+0xbc>)
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f005 ff1d 	bl	80060ac <HAL_UART_Receive_IT>
		}
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000288 	.word	0x20000288
 8000280:	20000354 	.word	0x20000354
 8000284:	200000bc 	.word	0x200000bc
 8000288:	2000010c 	.word	0x2000010c
 800028c:	20000050 	.word	0x20000050
 8000290:	20000008 	.word	0x20000008
 8000294:	20000000 	.word	0x20000000

08000298 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d107      	bne.n	80002b8 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		SBUS_TimeoutCallback();
 80002a8:	f000 ff12 	bl	80010d0 <SBUS_TimeoutCallback>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80002ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b4:	f003 f8a0 	bl	80033f8 <HAL_GPIO_TogglePin>
	}
	if (htim == &htim3)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a09      	ldr	r2, [pc, #36]	; (80002e0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d108      	bne.n	80002d2 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		if (BrakeTimeout >0) BrakeTimeout--;
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	dd04      	ble.n	80002d2 <HAL_TIM_PeriodElapsedCallback+0x3a>
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80002d0:	6013      	str	r3, [r2, #0]
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
	}

}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000354 	.word	0x20000354
 80002e0:	200000c0 	.word	0x200000c0
 80002e4:	2000000c 	.word	0x2000000c

080002e8 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a06      	ldr	r2, [pc, #24]	; (800030c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d102      	bne.n	80002fe <HAL_TIM_PWM_PulseFinishedCallback+0x16>
	{
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
		UpdateOutput=1;
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	701a      	strb	r2, [r3, #0]
	}
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	200000c0 	.word	0x200000c0
 8000310:	2000004e 	.word	0x2000004e

08000314 <WriteMotorsSpeed>:
{
	return VBAT_GAIN*(float)RawValue;
}

void WriteMotorsSpeed(uint32_t ServoValue, uint8_t ServoDir, uint32_t MotorValue, uint8_t MotorDir)	//value is a per thousand value of max speed.
{
 8000314:	b480      	push	{r7}
 8000316:	b087      	sub	sp, #28
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	607a      	str	r2, [r7, #4]
 800031e:	461a      	mov	r2, r3
 8000320:	460b      	mov	r3, r1
 8000322:	72fb      	strb	r3, [r7, #11]
 8000324:	4613      	mov	r3, r2
 8000326:	72bb      	strb	r3, [r7, #10]
	uint32_t tmpccer;
	tmpccer = htim1.Instance->CCER; // Get the TIMx CCER register value
 8000328:	4b3e      	ldr	r3, [pc, #248]	; (8000424 <WriteMotorsSpeed+0x110>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	6a1b      	ldr	r3, [r3, #32]
 800032e:	617b      	str	r3, [r7, #20]

#ifdef MOTOR_REVERSE
	MotorDir = !MotorDir;
 8000330:	7abb      	ldrb	r3, [r7, #10]
 8000332:	2b00      	cmp	r3, #0
 8000334:	bf0c      	ite	eq
 8000336:	2301      	moveq	r3, #1
 8000338:	2300      	movne	r3, #0
 800033a:	b2db      	uxtb	r3, r3
 800033c:	72bb      	strb	r3, [r7, #10]
#endif

	if (MotorDir==0)
 800033e:	7abb      	ldrb	r3, [r7, #10]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d108      	bne.n	8000356 <WriteMotorsSpeed+0x42>
	{
		tmpccer &= ~TIM_CCER_CC1E;
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	f023 0301 	bic.w	r3, r3, #1
 800034a:	617b      	str	r3, [r7, #20]
		tmpccer |= TIM_CCER_CC1NE;
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	617b      	str	r3, [r7, #20]
 8000354:	e00a      	b.n	800036c <WriteMotorsSpeed+0x58>
	}
	else if (MotorDir==1)
 8000356:	7abb      	ldrb	r3, [r7, #10]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d107      	bne.n	800036c <WriteMotorsSpeed+0x58>
	{
		tmpccer &= ~TIM_CCER_CC1NE;
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	f023 0304 	bic.w	r3, r3, #4
 8000362:	617b      	str	r3, [r7, #20]
		tmpccer |= TIM_CCER_CC1E;
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	617b      	str	r3, [r7, #20]
	}

	if (ServoDir==0)
 800036c:	7afb      	ldrb	r3, [r7, #11]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d108      	bne.n	8000384 <WriteMotorsSpeed+0x70>
	{
		tmpccer &= ~TIM_CCER_CC2E;
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	f023 0310 	bic.w	r3, r3, #16
 8000378:	617b      	str	r3, [r7, #20]
		tmpccer |= TIM_CCER_CC2NE;
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000380:	617b      	str	r3, [r7, #20]
 8000382:	e00a      	b.n	800039a <WriteMotorsSpeed+0x86>
	}
	else if (ServoDir==1)
 8000384:	7afb      	ldrb	r3, [r7, #11]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d107      	bne.n	800039a <WriteMotorsSpeed+0x86>
	{
		tmpccer &= ~TIM_CCER_CC2NE;
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000390:	617b      	str	r3, [r7, #20]
		tmpccer |= TIM_CCER_CC2E;
 8000392:	697b      	ldr	r3, [r7, #20]
 8000394:	f043 0310 	orr.w	r3, r3, #16
 8000398:	617b      	str	r3, [r7, #20]
	}

	float maxVal = (float)htim1.Instance->ARR*MAX_SERVO_SPEED_GAIN/1000.0f;
 800039a:	4b22      	ldr	r3, [pc, #136]	; (8000424 <WriteMotorsSpeed+0x110>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a0:	ee07 3a90 	vmov	s15, r3
 80003a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80003ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80003b0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000428 <WriteMotorsSpeed+0x114>
 80003b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80003b8:	edc7 7a04 	vstr	s15, [r7, #16]
	if (MotorValue> MOTOR_OUT_DEADBAND)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2b32      	cmp	r3, #50	; 0x32
 80003c0:	d90e      	bls.n	80003e0 <WriteMotorsSpeed+0xcc>
	{
		MotorValue = (uint32_t)((float)MotorValue*maxVal);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	ee07 3a90 	vmov	s15, r3
 80003c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80003cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80003d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80003d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003d8:	ee17 3a90 	vmov	r3, s15
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	e001      	b.n	80003e4 <WriteMotorsSpeed+0xd0>
	}
	else
	{
		MotorValue = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	607b      	str	r3, [r7, #4]
	}

	ServoValue = (uint32_t)((float)ServoValue*maxVal);
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	ee07 3a90 	vmov	s15, r3
 80003ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80003ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80003f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80003f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003fa:	ee17 3a90 	vmov	r3, s15
 80003fe:	60fb      	str	r3, [r7, #12]

	htim1.Instance->CCER = tmpccer;
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <WriteMotorsSpeed+0x110>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	697a      	ldr	r2, [r7, #20]
 8000406:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCR1 = MotorValue;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <WriteMotorsSpeed+0x110>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = ServoValue;
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <WriteMotorsSpeed+0x110>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000418:	bf00      	nop
 800041a:	371c      	adds	r7, #28
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	2000023c 	.word	0x2000023c
 8000428:	447a0000 	.word	0x447a0000

0800042c <NormalizeThrottle>:

#define THROTTLE_NEUTRAL_LOW THROTTLE_NEUTRAL_VALUE - THROTTLE_DEADBAND/2
#define THROTTLE_NEUTRAL_HIGH THROTTLE_NEUTRAL_VALUE + THROTTLE_DEADBAND/2

void NormalizeThrottle(uint32_t ChannelInput, uint32_t *SpeedOutput, uint32_t *DirOutput)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
	if (ChannelInput < MIN_CHANNEL_VALUE || FailSafe)	//Failsafe
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800043e:	d303      	bcc.n	8000448 <NormalizeThrottle+0x1c>
 8000440:	4b3f      	ldr	r3, [pc, #252]	; (8000540 <NormalizeThrottle+0x114>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d00c      	beq.n	8000462 <NormalizeThrottle+0x36>
	{
		HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin, 0);
 8000448:	2200      	movs	r2, #0
 800044a:	2120      	movs	r1, #32
 800044c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000450:	f002 ffba 	bl	80033c8 <HAL_GPIO_WritePin>
		*SpeedOutput = 0;
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
		*DirOutput = 0;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
		return;
 8000460:	e06a      	b.n	8000538 <NormalizeThrottle+0x10c>
	}
	if (ChannelInput < THROTTLE_NEUTRAL_LOW)	//Braking
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	f240 427d 	movw	r2, #1149	; 0x47d
 8000468:	4293      	cmp	r3, r2
 800046a:	d82d      	bhi.n	80004c8 <NormalizeThrottle+0x9c>
	{
		if (BrakeTimeout <0 )	//Trigger the timeout
 800046c:	4b35      	ldr	r3, [pc, #212]	; (8000544 <NormalizeThrottle+0x118>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	da10      	bge.n	8000496 <NormalizeThrottle+0x6a>
		{
			BrakeTimeout = THROTTLE_REVERSE_DELAY;
 8000474:	4b33      	ldr	r3, [pc, #204]	; (8000544 <NormalizeThrottle+0x118>)
 8000476:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800047a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin, 1);
 800047c:	2201      	movs	r2, #1
 800047e:	2120      	movs	r1, #32
 8000480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000484:	f002 ffa0 	bl	80033c8 <HAL_GPIO_WritePin>
			*SpeedOutput = 0;
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
			*DirOutput = 0;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	e050      	b.n	8000538 <NormalizeThrottle+0x10c>
		}
		else if (BrakeTimeout == 0)	//if delay is ok, start reverse
 8000496:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <NormalizeThrottle+0x118>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d107      	bne.n	80004ae <NormalizeThrottle+0x82>
		{
			*SpeedOutput = 500;	//Set reverse speed == TODO
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004a4:	601a      	str	r2, [r3, #0]
			*DirOutput = 1;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2201      	movs	r2, #1
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	e044      	b.n	8000538 <NormalizeThrottle+0x10c>
		}
		else //Brake
		{
			HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin, 1);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2120      	movs	r1, #32
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f002 ff87 	bl	80033c8 <HAL_GPIO_WritePin>
			*SpeedOutput = 0;
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
			*DirOutput = 0;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	e037      	b.n	8000538 <NormalizeThrottle+0x10c>
		}
	}
	else if (ChannelInput > THROTTLE_NEUTRAL_HIGH)	//Accelerating
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d922      	bls.n	8000518 <NormalizeThrottle+0xec>
	{
		HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin, 1);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2120      	movs	r1, #32
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f002 ff75 	bl	80033c8 <HAL_GPIO_WritePin>
		BrakeTimeout = -1;
 80004de:	4b19      	ldr	r3, [pc, #100]	; (8000544 <NormalizeThrottle+0x118>)
 80004e0:	f04f 32ff 	mov.w	r2, #4294967295
 80004e4:	601a      	str	r2, [r3, #0]
		*SpeedOutput = (uint32_t)((float)(ChannelInput-THROTTLE_NEUTRAL_HIGH)*1000.0f/(float)(MAX_CHANNEL_VALUE-THROTTLE_NEUTRAL_HIGH)); //Set forward speed == TODO
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	f2a3 437e 	subw	r3, r3, #1150	; 0x47e
 80004ec:	ee07 3a90 	vmov	s15, r3
 80004f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004f4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000548 <NormalizeThrottle+0x11c>
 80004f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80004fc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800054c <NormalizeThrottle+0x120>
 8000500:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000508:	ee17 2a90 	vmov	r2, s15
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	601a      	str	r2, [r3, #0]
		*DirOutput = 0;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	e00f      	b.n	8000538 <NormalizeThrottle+0x10c>

	}
	else //Freewheeling
	{
		BrakeTimeout = -1;
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <NormalizeThrottle+0x118>)
 800051a:	f04f 32ff 	mov.w	r2, #4294967295
 800051e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2120      	movs	r1, #32
 8000524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000528:	f002 ff4e 	bl	80033c8 <HAL_GPIO_WritePin>

		*SpeedOutput = 0;
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
		*DirOutput = 0;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
	}
}
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000000 	.word	0x20000000
 8000544:	2000000c 	.word	0x2000000c
 8000548:	447a0000 	.word	0x447a0000
 800054c:	44a8c000 	.word	0x44a8c000

08000550 <UpdateServoPID>:

void UpdateServoPID(uint32_t *speed, uint8_t *dir)
{
 8000550:	b480      	push	{r7}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
	if (!ServoEnable)
 800055a:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <UpdateServoPID+0x164>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d106      	bne.n	8000570 <UpdateServoPID+0x20>
	{
		*dir = 0;
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
		*speed = 0;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
		return;
 800056e:	e09c      	b.n	80006aa <UpdateServoPID+0x15a>
	}
	float Servo_Target = ServoValue;
 8000570:	4b51      	ldr	r3, [pc, #324]	; (80006b8 <UpdateServoPID+0x168>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	ee07 3a90 	vmov	s15, r3
 8000578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800057c:	edc7 7a05 	vstr	s15, [r7, #20]
	Servo_Feedback = analogCapture1[1];
 8000580:	4b4e      	ldr	r3, [pc, #312]	; (80006bc <UpdateServoPID+0x16c>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	ee07 3a90 	vmov	s15, r3
 8000588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800058c:	4b4c      	ldr	r3, [pc, #304]	; (80006c0 <UpdateServoPID+0x170>)
 800058e:	edc3 7a00 	vstr	s15, [r3]

	static uint32_t previousPosition;
	static float Iterm;

	if (FirstLoop)
 8000592:	4b4c      	ldr	r3, [pc, #304]	; (80006c4 <UpdateServoPID+0x174>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00f      	beq.n	80005ba <UpdateServoPID+0x6a>
	{
		FirstLoop = 0;
 800059a:	4b4a      	ldr	r3, [pc, #296]	; (80006c4 <UpdateServoPID+0x174>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
		previousPosition =Servo_Feedback;
 80005a0:	4b47      	ldr	r3, [pc, #284]	; (80006c0 <UpdateServoPID+0x170>)
 80005a2:	edd3 7a00 	vldr	s15, [r3]
 80005a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005aa:	ee17 2a90 	vmov	r2, s15
 80005ae:	4b46      	ldr	r3, [pc, #280]	; (80006c8 <UpdateServoPID+0x178>)
 80005b0:	601a      	str	r2, [r3, #0]
		Iterm = 0;
 80005b2:	4b46      	ldr	r3, [pc, #280]	; (80006cc <UpdateServoPID+0x17c>)
 80005b4:	f04f 0200 	mov.w	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
	}

	float error = Servo_Target - Servo_Feedback;
 80005ba:	4b41      	ldr	r3, [pc, #260]	; (80006c0 <UpdateServoPID+0x170>)
 80005bc:	edd3 7a00 	vldr	s15, [r3]
 80005c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80005c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005c8:	edc7 7a04 	vstr	s15, [r7, #16]

	float Dterm = (Servo_Feedback - previousPosition)/SERVO_LOOPDURATION;
 80005cc:	4b3c      	ldr	r3, [pc, #240]	; (80006c0 <UpdateServoPID+0x170>)
 80005ce:	ed93 7a00 	vldr	s14, [r3]
 80005d2:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <UpdateServoPID+0x178>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	ee07 3a90 	vmov	s15, r3
 80005da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005e2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80006d0 <UpdateServoPID+0x180>
 80005e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005ea:	edc7 7a03 	vstr	s15, [r7, #12]
	Iterm += error;
 80005ee:	4b37      	ldr	r3, [pc, #220]	; (80006cc <UpdateServoPID+0x17c>)
 80005f0:	ed93 7a00 	vldr	s14, [r3]
 80005f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80005f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005fc:	4b33      	ldr	r3, [pc, #204]	; (80006cc <UpdateServoPID+0x17c>)
 80005fe:	edc3 7a00 	vstr	s15, [r3]

	if (Iterm > SERVO_ITERM_CAPVALUE) Iterm = SERVO_ITERM_CAPVALUE;
 8000602:	4b32      	ldr	r3, [pc, #200]	; (80006cc <UpdateServoPID+0x17c>)
 8000604:	edd3 7a00 	vldr	s15, [r3]
 8000608:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80006d4 <UpdateServoPID+0x184>
 800060c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000614:	dd03      	ble.n	800061e <UpdateServoPID+0xce>
 8000616:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <UpdateServoPID+0x17c>)
 8000618:	4a2f      	ldr	r2, [pc, #188]	; (80006d8 <UpdateServoPID+0x188>)
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	e00c      	b.n	8000638 <UpdateServoPID+0xe8>
	else if (Iterm < -SERVO_ITERM_CAPVALUE) Iterm = SERVO_ITERM_CAPVALUE;
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <UpdateServoPID+0x17c>)
 8000620:	edd3 7a00 	vldr	s15, [r3]
 8000624:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80006dc <UpdateServoPID+0x18c>
 8000628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800062c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000630:	d502      	bpl.n	8000638 <UpdateServoPID+0xe8>
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <UpdateServoPID+0x17c>)
 8000634:	4a28      	ldr	r2, [pc, #160]	; (80006d8 <UpdateServoPID+0x188>)
 8000636:	601a      	str	r2, [r3, #0]

	float out = error * SERVO_KP + Dterm * SERVO_KD + Iterm * SERVO_KI ;
 8000638:	edd7 7a04 	vldr	s15, [r7, #16]
 800063c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000640:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000644:	edd7 7a03 	vldr	s15, [r7, #12]
 8000648:	eddf 6a25 	vldr	s13, [pc, #148]	; 80006e0 <UpdateServoPID+0x190>
 800064c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000650:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <UpdateServoPID+0x17c>)
 8000656:	edd3 7a00 	vldr	s15, [r3]
 800065a:	eddf 6a21 	vldr	s13, [pc, #132]	; 80006e0 <UpdateServoPID+0x190>
 800065e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000666:	edc7 7a02 	vstr	s15, [r7, #8]

	if (out < 0)
 800066a:	edd7 7a02 	vldr	s15, [r7, #8]
 800066e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000676:	d50d      	bpl.n	8000694 <UpdateServoPID+0x144>
	{
		*dir = 0;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
		*speed = -out;
 800067e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000682:	eef1 7a67 	vneg.f32	s15, s15
 8000686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800068a:	ee17 2a90 	vmov	r2, s15
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	e00a      	b.n	80006aa <UpdateServoPID+0x15a>
	}
	else
	{
		*dir = 1;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
		*speed = out;
 800069a:	edd7 7a02 	vldr	s15, [r7, #8]
 800069e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006a2:	ee17 2a90 	vmov	r2, s15
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]
	}
}
 80006aa:	371c      	adds	r7, #28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	2000004d 	.word	0x2000004d
 80006b8:	20000004 	.word	0x20000004
 80006bc:	20000038 	.word	0x20000038
 80006c0:	20000068 	.word	0x20000068
 80006c4:	20000001 	.word	0x20000001
 80006c8:	2000005c 	.word	0x2000005c
 80006cc:	20000060 	.word	0x20000060
 80006d0:	3a83126f 	.word	0x3a83126f
 80006d4:	453b8000 	.word	0x453b8000
 80006d8:	453b8000 	.word	0x453b8000
 80006dc:	c53b8000 	.word	0xc53b8000
 80006e0:	00000000 	.word	0x00000000

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f000 ffe2 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f8e2 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f000 fc0e 	bl	8000f10 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f4:	f000 fbe6 	bl	8000ec4 <MX_DMA_Init>
  MX_ADC1_Init();
 80006f8:	f000 f93a 	bl	8000970 <MX_ADC1_Init>
  MX_TIM1_Init();
 80006fc:	f000 fa18 	bl	8000b30 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000700:	f000 fb70 	bl	8000de4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000704:	f000 fb9e 	bl	8000e44 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000708:	f000 f9b2 	bl	8000a70 <MX_ADC2_Init>
  MX_TIM3_Init();
 800070c:	f000 face 	bl	8000cac <MX_TIM3_Init>
  MX_TIM16_Init();
 8000710:	f000 fb42 	bl	8000d98 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, analogCapture1, 2);
 8000714:	2202      	movs	r2, #2
 8000716:	494f      	ldr	r1, [pc, #316]	; (8000854 <main+0x170>)
 8000718:	484f      	ldr	r0, [pc, #316]	; (8000858 <main+0x174>)
 800071a:	f001 f9e9 	bl	8001af0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, analogCapture2, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	494e      	ldr	r1, [pc, #312]	; (800085c <main+0x178>)
 8000722:	484f      	ldr	r0, [pc, #316]	; (8000860 <main+0x17c>)
 8000724:	f001 f9e4 	bl	8001af0 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim3);
 8000728:	484e      	ldr	r0, [pc, #312]	; (8000864 <main+0x180>)
 800072a:	f004 f98f 	bl	8004a4c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 800072e:	2100      	movs	r1, #0
 8000730:	484c      	ldr	r0, [pc, #304]	; (8000864 <main+0x180>)
 8000732:	f004 fb35 	bl	8004da0 <HAL_TIM_PWM_Start_IT>
  HAL_UART_Receive_IT(&huart2, &gSBUSByte, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	494b      	ldr	r1, [pc, #300]	; (8000868 <main+0x184>)
 800073a:	484c      	ldr	r0, [pc, #304]	; (800086c <main+0x188>)
 800073c:	f005 fcb6 	bl	80060ac <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000740:	484b      	ldr	r0, [pc, #300]	; (8000870 <main+0x18c>)
 8000742:	f004 f983 	bl	8004a4c <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim1);
 8000746:	484b      	ldr	r0, [pc, #300]	; (8000874 <main+0x190>)
 8000748:	f004 f92c 	bl	80049a4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800074c:	2100      	movs	r1, #0
 800074e:	4849      	ldr	r0, [pc, #292]	; (8000874 <main+0x190>)
 8000750:	f004 fa3a 	bl	8004bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000754:	2104      	movs	r1, #4
 8000756:	4847      	ldr	r0, [pc, #284]	; (8000874 <main+0x190>)
 8000758:	f004 fa36 	bl	8004bc8 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(Motor2_EN_GPIO_Port, Motor2_EN_Pin, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f002 fe30 	bl	80033c8 <HAL_GPIO_WritePin>
  WriteMotorsSpeed(0, 0, 0, 0);
 8000768:	2300      	movs	r3, #0
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff fdd0 	bl	8000314 <WriteMotorsSpeed>

  dirTrimGain = (float)DIR_TRIM_BAND/4095.0f;
 8000774:	4b40      	ldr	r3, [pc, #256]	; (8000878 <main+0x194>)
 8000776:	4a41      	ldr	r2, [pc, #260]	; (800087c <main+0x198>)
 8000778:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (UpdateOutput ==1)
 800077a:	4b41      	ldr	r3, [pc, #260]	; (8000880 <main+0x19c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d1fb      	bne.n	800077a <main+0x96>
	  {
		  if (Direction > MIN_SERVO_VALUE && Direction < MAX_SERVO_VALUE && !FailSafe)
 8000782:	4b40      	ldr	r3, [pc, #256]	; (8000884 <main+0x1a0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800078a:	4293      	cmp	r3, r2
 800078c:	d930      	bls.n	80007f0 <main+0x10c>
 800078e:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <main+0x1a0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000796:	4293      	cmp	r3, r2
 8000798:	d82a      	bhi.n	80007f0 <main+0x10c>
 800079a:	4b3b      	ldr	r3, [pc, #236]	; (8000888 <main+0x1a4>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d126      	bne.n	80007f0 <main+0x10c>
		  {
			  ServoValue = Direction + (uint32_t)((float)analogCapture2[0]*DIR_TRIM_BAND /4095.0f)-DIR_TRIM_BAND/2;
 80007a2:	4b2e      	ldr	r3, [pc, #184]	; (800085c <main+0x178>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	ee07 3a90 	vmov	s15, r3
 80007aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ae:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800088c <main+0x1a8>
 80007b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007b6:	eddf 6a36 	vldr	s13, [pc, #216]	; 8000890 <main+0x1ac>
 80007ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007c2:	ee17 2a90 	vmov	r2, s15
 80007c6:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <main+0x1a0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	ee07 3a90 	vmov	s15, r3
 80007d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000894 <main+0x1b0>
 80007d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80007dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007e0:	ee17 2a90 	vmov	r2, s15
 80007e4:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <main+0x1b4>)
 80007e6:	601a      	str	r2, [r3, #0]
			  ServoEnable = 1;
 80007e8:	4b2c      	ldr	r3, [pc, #176]	; (800089c <main+0x1b8>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	e002      	b.n	80007f6 <main+0x112>
		  }
		  else ServoEnable = 0;
 80007f0:	4b2a      	ldr	r3, [pc, #168]	; (800089c <main+0x1b8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]

		  if (ServoValue < MIN_SERVO_VALUE) ServoValue = MIN_SERVO_VALUE;
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <main+0x1b4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80007fe:	4293      	cmp	r3, r2
 8000800:	d804      	bhi.n	800080c <main+0x128>
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <main+0x1b4>)
 8000804:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	e009      	b.n	8000820 <main+0x13c>
		  else if (ServoValue > MAX_SERVO_VALUE) ServoValue = MAX_SERVO_VALUE;
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <main+0x1b4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000814:	4293      	cmp	r3, r2
 8000816:	d903      	bls.n	8000820 <main+0x13c>
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <main+0x1b4>)
 800081a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800081e:	601a      	str	r2, [r3, #0]

		  NormalizeThrottle(Throttle, &MainMotorSpeed, &MainMotorDir);
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <main+0x1bc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <main+0x1c0>)
 8000826:	4920      	ldr	r1, [pc, #128]	; (80008a8 <main+0x1c4>)
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fdff 	bl	800042c <NormalizeThrottle>

		  UpdateOutput=0;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <main+0x19c>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]

		  UpdateServoPID(&ServoSpeed, &ServoDir);
 8000834:	491d      	ldr	r1, [pc, #116]	; (80008ac <main+0x1c8>)
 8000836:	481e      	ldr	r0, [pc, #120]	; (80008b0 <main+0x1cc>)
 8000838:	f7ff fe8a 	bl	8000550 <UpdateServoPID>
		  WriteMotorsSpeed(ServoSpeed, ServoDir, MainMotorSpeed, MainMotorDir);
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <main+0x1cc>)
 800083e:	6818      	ldr	r0, [r3, #0]
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <main+0x1c8>)
 8000842:	7819      	ldrb	r1, [r3, #0]
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <main+0x1c4>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <main+0x1c0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f7ff fd61 	bl	8000314 <WriteMotorsSpeed>
	  if (UpdateOutput ==1)
 8000852:	e792      	b.n	800077a <main+0x96>
 8000854:	20000038 	.word	0x20000038
 8000858:	20000124 	.word	0x20000124
 800085c:	20000040 	.word	0x20000040
 8000860:	2000006c 	.word	0x2000006c
 8000864:	200000c0 	.word	0x200000c0
 8000868:	200000bc 	.word	0x200000bc
 800086c:	20000288 	.word	0x20000288
 8000870:	20000354 	.word	0x20000354
 8000874:	2000023c 	.word	0x2000023c
 8000878:	200003a0 	.word	0x200003a0
 800087c:	3d480c81 	.word	0x3d480c81
 8000880:	2000004e 	.word	0x2000004e
 8000884:	20000008 	.word	0x20000008
 8000888:	20000000 	.word	0x20000000
 800088c:	43480000 	.word	0x43480000
 8000890:	457ff000 	.word	0x457ff000
 8000894:	42c80000 	.word	0x42c80000
 8000898:	20000004 	.word	0x20000004
 800089c:	2000004d 	.word	0x2000004d
 80008a0:	20000050 	.word	0x20000050
 80008a4:	20000058 	.word	0x20000058
 80008a8:	20000054 	.word	0x20000054
 80008ac:	2000004c 	.word	0x2000004c
 80008b0:	20000048 	.word	0x20000048

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b096      	sub	sp, #88	; 0x58
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008be:	2228      	movs	r2, #40	; 0x28
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f006 fd0c 	bl	80072e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
 80008e6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e8:	2302      	movs	r3, #2
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f0:	2310      	movs	r3, #16
 80008f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f4:	2302      	movs	r3, #2
 80008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f8:	2300      	movs	r3, #0
 80008fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80008fc:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000900:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fd90 	bl	800342c <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000912:	f000 fb3d 	bl	8000f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	2101      	movs	r1, #1
 8000930:	4618      	mov	r0, r3
 8000932:	f003 fc83 	bl	800423c <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800093c:	f000 fb28 	bl	8000f90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000940:	f241 0381 	movw	r3, #4225	; 0x1081
 8000944:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800094a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4618      	mov	r0, r3
 8000958:	f003 fea6 	bl	80046a8 <HAL_RCCEx_PeriphCLKConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000962:	f000 fb15 	bl	8000f90 <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3758      	adds	r7, #88	; 0x58
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
 8000990:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000992:	4b36      	ldr	r3, [pc, #216]	; (8000a6c <MX_ADC1_Init+0xfc>)
 8000994:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000998:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800099a:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <MX_ADC1_Init+0xfc>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009a0:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009a6:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ac:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b2:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80009c2:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ca:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80009d0:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009d6:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009d8:	2201      	movs	r2, #1
 80009da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009de:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009e0:	2204      	movs	r2, #4
 80009e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009e4:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f0:	481e      	ldr	r0, [pc, #120]	; (8000a6c <MX_ADC1_Init+0xfc>)
 80009f2:	f000 feeb 	bl	80017cc <HAL_ADC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009fc:	f000 fac8 	bl	8000f90 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4818      	ldr	r0, [pc, #96]	; (8000a6c <MX_ADC1_Init+0xfc>)
 8000a0c:	f001 fe54 	bl	80026b8 <HAL_ADCEx_MultiModeConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a16:	f000 fabb 	bl	8000f90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000a26:	2303      	movs	r3, #3
 8000a28:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4619      	mov	r1, r3
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_ADC1_Init+0xfc>)
 8000a38:	f001 fb7c 	bl	8002134 <HAL_ADC_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000a42:	f000 faa5 	bl	8000f90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <MX_ADC1_Init+0xfc>)
 8000a54:	f001 fb6e 	bl	8002134 <HAL_ADC_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000a5e:	f000 fa97 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000124 	.word	0x20000124

08000a70 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a86:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000a88:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <MX_ADC2_Init+0xbc>)
 8000a8a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ae2:	4811      	ldr	r0, [pc, #68]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000ae4:	f000 fe72 	bl	80017cc <HAL_ADC_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000aee:	f000 fa4f 	bl	8000f90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000afe:	2303      	movs	r3, #3
 8000b00:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_ADC2_Init+0xb8>)
 8000b10:	f001 fb10 	bl	8002134 <HAL_ADC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000b1a:	f000 fa39 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000006c 	.word	0x2000006c
 8000b2c:	50000100 	.word	0x50000100

08000b30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b09a      	sub	sp, #104	; 0x68
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	222c      	movs	r2, #44	; 0x2c
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f006 fbb8 	bl	80072e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b70:	4b4c      	ldr	r3, [pc, #304]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000b72:	4a4d      	ldr	r2, [pc, #308]	; (8000ca8 <MX_TIM1_Init+0x178>)
 8000b74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b76:	4b4b      	ldr	r3, [pc, #300]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b49      	ldr	r3, [pc, #292]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000b82:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000b84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b90:	4b44      	ldr	r3, [pc, #272]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b96:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b9c:	4841      	ldr	r0, [pc, #260]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000b9e:	f003 fea9 	bl	80048f4 <HAL_TIM_Base_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ba8:	f000 f9f2 	bl	8000f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	483a      	ldr	r0, [pc, #232]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000bba:	f004 fc5f 	bl	800547c <HAL_TIM_ConfigClockSource>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000bc4:	f000 f9e4 	bl	8000f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bc8:	4836      	ldr	r0, [pc, #216]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000bca:	f003 ff9b 	bl	8004b04 <HAL_TIM_PWM_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000bd4:	f000 f9dc 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000be8:	4619      	mov	r1, r3
 8000bea:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000bec:	f005 f90c 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000bf6:	f000 f9cb 	bl	8000f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfa:	2360      	movs	r3, #96	; 0x60
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c06:	2300      	movs	r3, #0
 8000c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4820      	ldr	r0, [pc, #128]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000c22:	f004 fb17 	bl	8005254 <HAL_TIM_PWM_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000c2c:	f000 f9b0 	bl	8000f90 <Error_Handler>
  }
  sConfigOC.Pulse = 250;
 8000c30:	23fa      	movs	r3, #250	; 0xfa
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000c42:	f004 fb07 	bl	8005254 <HAL_TIM_PWM_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000c4c:	f000 f9a0 	bl	8000f90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000c86:	f005 f92d 	bl	8005ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000c90:	f000 f97e 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MX_TIM1_Init+0x174>)
 8000c96:	f000 fb8f 	bl	80013b8 <HAL_TIM_MspPostInit>

}
 8000c9a:	bf00      	nop
 8000c9c:	3768      	adds	r7, #104	; 0x68
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000023c 	.word	0x2000023c
 8000ca8:	40012c00 	.word	0x40012c00

08000cac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]
 8000cda:	615a      	str	r2, [r3, #20]
 8000cdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <MX_TIM3_Init+0xe4>)
 8000ce0:	4a2c      	ldr	r2, [pc, #176]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000ce2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <MX_TIM3_Init+0xe4>)
 8000ce6:	221f      	movs	r2, #31
 8000ce8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <MX_TIM3_Init+0xe4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000cf0:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <MX_TIM3_Init+0xe4>)
 8000cf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cf6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <MX_TIM3_Init+0xe4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <MX_TIM3_Init+0xe4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d04:	4822      	ldr	r0, [pc, #136]	; (8000d90 <MX_TIM3_Init+0xe4>)
 8000d06:	f003 fdf5 	bl	80048f4 <HAL_TIM_Base_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d10:	f000 f93e 	bl	8000f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481b      	ldr	r0, [pc, #108]	; (8000d90 <MX_TIM3_Init+0xe4>)
 8000d22:	f004 fbab 	bl	800547c <HAL_TIM_ConfigClockSource>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d2c:	f000 f930 	bl	8000f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d30:	4817      	ldr	r0, [pc, #92]	; (8000d90 <MX_TIM3_Init+0xe4>)
 8000d32:	f003 fee7 	bl	8004b04 <HAL_TIM_PWM_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d3c:	f000 f928 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d40:	2320      	movs	r3, #32
 8000d42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4810      	ldr	r0, [pc, #64]	; (8000d90 <MX_TIM3_Init+0xe4>)
 8000d50:	f005 f85a 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d5a:	f000 f919 	bl	8000f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5e:	2360      	movs	r3, #96	; 0x60
 8000d60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000d62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <MX_TIM3_Init+0xe4>)
 8000d78:	f004 fa6c 	bl	8005254 <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d82:	f000 f905 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	3738      	adds	r7, #56	; 0x38
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000c0 	.word	0x200000c0
 8000d94:	40000400 	.word	0x40000400

08000d98 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_TIM16_Init+0x44>)
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <MX_TIM16_Init+0x48>)
 8000da0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_TIM16_Init+0x44>)
 8000da4:	221f      	movs	r2, #31
 8000da6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_TIM16_Init+0x44>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_TIM16_Init+0x44>)
 8000db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000db4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_TIM16_Init+0x44>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <MX_TIM16_Init+0x44>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_TIM16_Init+0x44>)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_TIM16_Init+0x44>)
 8000dca:	f003 fd93 	bl	80048f4 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000dd4:	f000 f8dc 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000354 	.word	0x20000354
 8000de0:	40014400 	.word	0x40014400

08000de4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000dea:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <MX_USART1_UART_Init+0x5c>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000df0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000df4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_USART1_UART_Init+0x58>)
 8000e28:	f005 f8f2 	bl	8006010 <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e32:	f000 f8ad 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000174 	.word	0x20000174
 8000e40:	40013800 	.word	0x40013800

08000e44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <MX_USART2_UART_Init+0x78>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e50:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <MX_USART2_UART_Init+0x7c>)
 8000e52:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e62:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e6e:	2204      	movs	r2, #4
 8000e70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e86:	2232      	movs	r2, #50	; 0x32
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
                              |UART_ADVFEATURE_DMADISABLEONERROR_INIT;
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e98:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USART2_UART_Init+0x74>)
 8000ea4:	f005 f8b4 	bl	8006010 <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000eae:	f000 f86f 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000288 	.word	0x20000288
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	000186a0 	.word	0x000186a0

08000ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_DMA_Init+0x48>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <MX_DMA_Init+0x48>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6153      	str	r3, [r2, #20]
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <MX_DMA_Init+0x48>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	200b      	movs	r0, #11
 8000ee8:	f001 feb7 	bl	8002c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000eec:	200b      	movs	r0, #11
 8000eee:	f001 fed0 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	200c      	movs	r0, #12
 8000ef8:	f001 feaf 	bl	8002c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000efc:	200c      	movs	r0, #12
 8000efe:	f001 fec8 	bl	8002c92 <HAL_NVIC_EnableIRQ>

}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_GPIO_Init+0x7c>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <MX_GPIO_Init+0x7c>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	6153      	str	r3, [r2, #20]
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_GPIO_Init+0x7c>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_GPIO_Init+0x7c>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_GPIO_Init+0x7c>)
 8000f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f48:	6153      	str	r3, [r2, #20]
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_GPIO_Init+0x7c>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor1_EN_Pin|Motor2_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f002 fa32 	bl	80033c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_EN_Pin Motor2_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = Motor1_EN_Pin|Motor2_EN_Pin|LED_Pin;
 8000f64:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8000f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f002 f8b0 	bl	80030e4 <HAL_GPIO_Init>

}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <SBUS_AddByte>:
	return 0;
}


uint32_t SBUS_AddByte(uint8_t Byte)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	if (gByteBufferIndex < SBUS_FRAME_SIZE)
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <SBUS_AddByte+0x38>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b18      	cmp	r3, #24
 8000fac:	d809      	bhi.n	8000fc2 <SBUS_AddByte+0x26>
		gByteBuffer[gByteBufferIndex++] = Byte;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <SBUS_AddByte+0x38>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	b2d1      	uxtb	r1, r2
 8000fb6:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <SBUS_AddByte+0x38>)
 8000fb8:	7011      	strb	r1, [r2, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <SBUS_AddByte+0x3c>)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	5453      	strb	r3, [r2, r1]

	return gByteBufferIndex;
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SBUS_AddByte+0x38>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200003a4 	.word	0x200003a4
 8000fd8:	200003a8 	.word	0x200003a8

08000fdc <SBUS_GetChannel>:


uint32_t SBUS_GetChannel(struct sbuschannels *pChannels)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if (NULL == pChannels)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <SBUS_GetChannel+0x12>
		return FRAME_PENDING;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e030      	b.n	8001050 <SBUS_GetChannel+0x74>

	// Enough byte received
	if (gByteBufferIndex == SBUS_FRAME_SIZE)
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <SBUS_GetChannel+0x7c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b19      	cmp	r3, #25
 8000ff4:	d12b      	bne.n	800104e <SBUS_GetChannel+0x72>
	{
		// Frame with Header and Footer?
		struct sbusframe *pFrame = (struct sbusframe *) gByteBuffer;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <SBUS_GetChannel+0x80>)
 8000ff8:	60bb      	str	r3, [r7, #8]

		if (pFrame->Header == SBUS_HEADER && pFrame->Footer == SBUS_FOOTER)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	d125      	bne.n	800104e <SBUS_GetChannel+0x72>
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	7e1b      	ldrb	r3, [r3, #24]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d121      	bne.n	800104e <SBUS_GetChannel+0x72>
		{
			uint32_t ret = FRAME_COMPLETE;
 800100a:	2301      	movs	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]

			// Return the frame
			memcpy(&pChannels[0], &gByteBuffer[1], sizeof(struct sbuschannels));
 800100e:	2217      	movs	r2, #23
 8001010:	4913      	ldr	r1, [pc, #76]	; (8001060 <SBUS_GetChannel+0x84>)
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f006 f956 	bl	80072c4 <memcpy>

			// Check for frame errors
			if (pChannels->FrameLost)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7d9b      	ldrb	r3, [r3, #22]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <SBUS_GetChannel+0x52>
				ret |= FRAME_DROPPED;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	60fb      	str	r3, [r7, #12]

			if (pChannels->FailSafe)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7d9b      	ldrb	r3, [r3, #22]
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <SBUS_GetChannel+0x68>
				ret |= FRAME_FAILSAFE;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
//					pChannels->FailSafe,
//					pChannels->FrameLost);
//			CDC_Transmit_FS((uint8_t *)Str, strlen(Str));

			// Reset byte buffer
			gByteBufferIndex = 0;
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SBUS_GetChannel+0x7c>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]

			return ret;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	e000      	b.n	8001050 <SBUS_GetChannel+0x74>
		}
	}

	return FRAME_PENDING;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200003a4 	.word	0x200003a4
 800105c:	200003a8 	.word	0x200003a8
 8001060:	200003a9 	.word	0x200003a9

08001064 <SBUS_NormalizeChannel>:

#define SBUS_CHANNEL_VALUE_MIN	172
#define SBUS_CHANNEL_VALUE_MAX	1811

int32_t SBUS_NormalizeChannel(uint16_t ChannelValue, int32_t Min, int32_t Max)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	81fb      	strh	r3, [r7, #14]
	if (ChannelValue <SBUS_CHANNEL_VALUE_MIN) ChannelValue =SBUS_CHANNEL_VALUE_MIN;
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	2bab      	cmp	r3, #171	; 0xab
 8001076:	d801      	bhi.n	800107c <SBUS_NormalizeChannel+0x18>
 8001078:	23ac      	movs	r3, #172	; 0xac
 800107a:	81fb      	strh	r3, [r7, #14]
	if (ChannelValue >SBUS_CHANNEL_VALUE_MAX) ChannelValue =SBUS_CHANNEL_VALUE_MAX;
 800107c:	89fb      	ldrh	r3, [r7, #14]
 800107e:	f240 7213 	movw	r2, #1811	; 0x713
 8001082:	4293      	cmp	r3, r2
 8001084:	d902      	bls.n	800108c <SBUS_NormalizeChannel+0x28>
 8001086:	f240 7313 	movw	r3, #1811	; 0x713
 800108a:	81fb      	strh	r3, [r7, #14]

	int32_t ScaleA = Max - Min;
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	61fb      	str	r3, [r7, #28]
	int32_t ScaleB = (Min * SBUS_CHANNEL_VALUE_MAX) - (Max * SBUS_CHANNEL_VALUE_MIN);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f240 7213 	movw	r2, #1811	; 0x713
 800109a:	fb02 f203 	mul.w	r2, r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f06f 01ab 	mvn.w	r1, #171	; 0xab
 80010a4:	fb01 f303 	mul.w	r3, r1, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
	int32_t ScaleD = SBUS_CHANNEL_VALUE_MAX - SBUS_CHANNEL_VALUE_MIN;
 80010ac:	f240 6367 	movw	r3, #1639	; 0x667
 80010b0:	617b      	str	r3, [r7, #20]

	return ((int32_t) ChannelValue * ScaleA + ScaleB) / ScaleD;
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	fb02 f203 	mul.w	r2, r2, r3
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	441a      	add	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3724      	adds	r7, #36	; 0x24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SBUS_TimeoutCallback>:

void SBUS_TimeoutCallback(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	// Reset byte buffer
	gByteBufferIndex = 0;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <SBUS_TimeoutCallback+0x14>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	200003a4 	.word	0x200003a4

080010e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_MspInit+0x44>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_MspInit+0x44>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_MspInit+0x44>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_MspInit+0x44>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <HAL_MspInit+0x44>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_MspInit+0x44>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001150:	d15e      	bne.n	8001210 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001152:	4b63      	ldr	r3, [pc, #396]	; (80012e0 <HAL_ADC_MspInit+0x1b0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	4a61      	ldr	r2, [pc, #388]	; (80012e0 <HAL_ADC_MspInit+0x1b0>)
 800115a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800115c:	4b60      	ldr	r3, [pc, #384]	; (80012e0 <HAL_ADC_MspInit+0x1b0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d10b      	bne.n	800117c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001164:	4b5f      	ldr	r3, [pc, #380]	; (80012e4 <HAL_ADC_MspInit+0x1b4>)
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	4a5e      	ldr	r2, [pc, #376]	; (80012e4 <HAL_ADC_MspInit+0x1b4>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116e:	6153      	str	r3, [r2, #20]
 8001170:	4b5c      	ldr	r3, [pc, #368]	; (80012e4 <HAL_ADC_MspInit+0x1b4>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	61bb      	str	r3, [r7, #24]
 800117a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b59      	ldr	r3, [pc, #356]	; (80012e4 <HAL_ADC_MspInit+0x1b4>)
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	4a58      	ldr	r2, [pc, #352]	; (80012e4 <HAL_ADC_MspInit+0x1b4>)
 8001182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001186:	6153      	str	r3, [r2, #20]
 8001188:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <HAL_ADC_MspInit+0x1b4>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Servo_FB_Pin|Vbat_Meas_Pin;
 8001194:	2303      	movs	r3, #3
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f001 ff9b 	bl	80030e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011ae:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <HAL_ADC_MspInit+0x1b8>)
 80011b0:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <HAL_ADC_MspInit+0x1bc>)
 80011b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b4:	4b4c      	ldr	r3, [pc, #304]	; (80012e8 <HAL_ADC_MspInit+0x1b8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ba:	4b4b      	ldr	r3, [pc, #300]	; (80012e8 <HAL_ADC_MspInit+0x1b8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c0:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <HAL_ADC_MspInit+0x1b8>)
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c6:	4b48      	ldr	r3, [pc, #288]	; (80012e8 <HAL_ADC_MspInit+0x1b8>)
 80011c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011ce:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <HAL_ADC_MspInit+0x1b8>)
 80011d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <HAL_ADC_MspInit+0x1b8>)
 80011d8:	2220      	movs	r2, #32
 80011da:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011dc:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <HAL_ADC_MspInit+0x1b8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011e2:	4841      	ldr	r0, [pc, #260]	; (80012e8 <HAL_ADC_MspInit+0x1b8>)
 80011e4:	f001 fd6f 	bl	8002cc6 <HAL_DMA_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80011ee:	f7ff fecf 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a3c      	ldr	r2, [pc, #240]	; (80012e8 <HAL_ADC_MspInit+0x1b8>)
 80011f6:	639a      	str	r2, [r3, #56]	; 0x38
 80011f8:	4a3b      	ldr	r2, [pc, #236]	; (80012e8 <HAL_ADC_MspInit+0x1b8>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2012      	movs	r0, #18
 8001204:	f001 fd29 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001208:	2012      	movs	r0, #18
 800120a:	f001 fd42 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800120e:	e062      	b.n	80012d6 <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a36      	ldr	r2, [pc, #216]	; (80012f0 <HAL_ADC_MspInit+0x1c0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d15d      	bne.n	80012d6 <HAL_ADC_MspInit+0x1a6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <HAL_ADC_MspInit+0x1b0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a2f      	ldr	r2, [pc, #188]	; (80012e0 <HAL_ADC_MspInit+0x1b0>)
 8001222:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001224:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <HAL_ADC_MspInit+0x1b0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d10b      	bne.n	8001244 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HAL_ADC_MspInit+0x1b4>)
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	4a2c      	ldr	r2, [pc, #176]	; (80012e4 <HAL_ADC_MspInit+0x1b4>)
 8001232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001236:	6153      	str	r3, [r2, #20]
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <HAL_ADC_MspInit+0x1b4>)
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <HAL_ADC_MspInit+0x1b4>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	4a26      	ldr	r2, [pc, #152]	; (80012e4 <HAL_ADC_MspInit+0x1b4>)
 800124a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124e:	6153      	str	r3, [r2, #20]
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <HAL_ADC_MspInit+0x1b4>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Trim_Pin;
 800125c:	2310      	movs	r3, #16
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo_Trim_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f001 ff37 	bl	80030e4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <HAL_ADC_MspInit+0x1c4>)
 8001278:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <HAL_ADC_MspInit+0x1c8>)
 800127a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_ADC_MspInit+0x1c4>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <HAL_ADC_MspInit+0x1c4>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HAL_ADC_MspInit+0x1c4>)
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_ADC_MspInit+0x1c4>)
 8001290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001294:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_ADC_MspInit+0x1c4>)
 8001298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800129c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_ADC_MspInit+0x1c4>)
 80012a0:	2220      	movs	r2, #32
 80012a2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_ADC_MspInit+0x1c4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012aa:	4812      	ldr	r0, [pc, #72]	; (80012f4 <HAL_ADC_MspInit+0x1c4>)
 80012ac:	f001 fd0b 	bl	8002cc6 <HAL_DMA_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 80012b6:	f7ff fe6b 	bl	8000f90 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <HAL_ADC_MspInit+0x1c4>)
 80012be:	639a      	str	r2, [r3, #56]	; 0x38
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <HAL_ADC_MspInit+0x1c4>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2012      	movs	r0, #18
 80012cc:	f001 fcc5 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012d0:	2012      	movs	r0, #18
 80012d2:	f001 fcde 	bl	8002c92 <HAL_NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3730      	adds	r7, #48	; 0x30
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000064 	.word	0x20000064
 80012e4:	40021000 	.word	0x40021000
 80012e8:	200001f8 	.word	0x200001f8
 80012ec:	40020008 	.word	0x40020008
 80012f0:	50000100 	.word	0x50000100
 80012f4:	2000030c 	.word	0x2000030c
 80012f8:	4002001c 	.word	0x4002001c

080012fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <HAL_TIM_Base_MspInit+0xac>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d114      	bne.n	8001338 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800130e:	4b27      	ldr	r3, [pc, #156]	; (80013ac <HAL_TIM_Base_MspInit+0xb0>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4a26      	ldr	r2, [pc, #152]	; (80013ac <HAL_TIM_Base_MspInit+0xb0>)
 8001314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <HAL_TIM_Base_MspInit+0xb0>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2019      	movs	r0, #25
 800132c:	f001 fc95 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001330:	2019      	movs	r0, #25
 8001332:	f001 fcae 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001336:	e032      	b.n	800139e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <HAL_TIM_Base_MspInit+0xb4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d114      	bne.n	800136c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <HAL_TIM_Base_MspInit+0xb0>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_TIM_Base_MspInit+0xb0>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_TIM_Base_MspInit+0xb0>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	201d      	movs	r0, #29
 8001360:	f001 fc7b 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001364:	201d      	movs	r0, #29
 8001366:	f001 fc94 	bl	8002c92 <HAL_NVIC_EnableIRQ>
}
 800136a:	e018      	b.n	800139e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_TIM_Base_MspInit+0xb8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d113      	bne.n	800139e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <HAL_TIM_Base_MspInit+0xb0>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <HAL_TIM_Base_MspInit+0xb0>)
 800137c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001380:	6193      	str	r3, [r2, #24]
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_TIM_Base_MspInit+0xb0>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	2019      	movs	r0, #25
 8001394:	f001 fc61 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001398:	2019      	movs	r0, #25
 800139a:	f001 fc7a 	bl	8002c92 <HAL_NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40012c00 	.word	0x40012c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40000400 	.word	0x40000400
 80013b4:	40014400 	.word	0x40014400

080013b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a20      	ldr	r2, [pc, #128]	; (8001458 <HAL_TIM_MspPostInit+0xa0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d139      	bne.n	800144e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <HAL_TIM_MspPostInit+0xa4>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	4a1f      	ldr	r2, [pc, #124]	; (800145c <HAL_TIM_MspPostInit+0xa4>)
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	6153      	str	r3, [r2, #20]
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <HAL_TIM_MspPostInit+0xa4>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_TIM_MspPostInit+0xa4>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4a19      	ldr	r2, [pc, #100]	; (800145c <HAL_TIM_MspPostInit+0xa4>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fc:	6153      	str	r3, [r2, #20]
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_TIM_MspPostInit+0xa4>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor1_2_Pin|Motor1_1_Pin|GPIO_PIN_9;
 800140a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800141c:	2306      	movs	r3, #6
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142a:	f001 fe5b 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800142e:	2301      	movs	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800143e:	2306      	movs	r3, #6
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_TIM_MspPostInit+0xa8>)
 800144a:	f001 fe4b 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40012c00 	.word	0x40012c00
 800145c:	40021000 	.word	0x40021000
 8001460:	48000400 	.word	0x48000400

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a32      	ldr	r2, [pc, #200]	; (800154c <HAL_UART_MspInit+0xe8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d128      	bne.n	80014d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001486:	4b32      	ldr	r3, [pc, #200]	; (8001550 <HAL_UART_MspInit+0xec>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a31      	ldr	r2, [pc, #196]	; (8001550 <HAL_UART_MspInit+0xec>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <HAL_UART_MspInit+0xec>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HAL_UART_MspInit+0xec>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4a2b      	ldr	r2, [pc, #172]	; (8001550 <HAL_UART_MspInit+0xec>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a8:	6153      	str	r3, [r2, #20]
 80014aa:	4b29      	ldr	r3, [pc, #164]	; (8001550 <HAL_UART_MspInit+0xec>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014b6:	23c0      	movs	r3, #192	; 0xc0
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c6:	2307      	movs	r3, #7
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	4820      	ldr	r0, [pc, #128]	; (8001554 <HAL_UART_MspInit+0xf0>)
 80014d2:	f001 fe07 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d6:	e035      	b.n	8001544 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1e      	ldr	r2, [pc, #120]	; (8001558 <HAL_UART_MspInit+0xf4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d130      	bne.n	8001544 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_UART_MspInit+0xec>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_UART_MspInit+0xec>)
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	61d3      	str	r3, [r2, #28]
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_UART_MspInit+0xec>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_UART_MspInit+0xec>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_UART_MspInit+0xec>)
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	6153      	str	r3, [r2, #20]
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_UART_MspInit+0xec>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001512:	230c      	movs	r3, #12
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001522:	2307      	movs	r3, #7
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f001 fdd8 	bl	80030e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	2026      	movs	r0, #38	; 0x26
 800153a:	f001 fb8e 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800153e:	2026      	movs	r0, #38	; 0x26
 8001540:	f001 fba7 	bl	8002c92 <HAL_NVIC_EnableIRQ>
}
 8001544:	bf00      	nop
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40013800 	.word	0x40013800
 8001550:	40021000 	.word	0x40021000
 8001554:	48000400 	.word	0x48000400
 8001558:	40004400 	.word	0x40004400

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <NMI_Handler+0x4>

08001562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <HardFault_Handler+0x4>

08001568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <MemManage_Handler+0x4>

0800156e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <UsageFault_Handler+0x4>

0800157a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a8:	f000 f8c8 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <DMA1_Channel1_IRQHandler+0x10>)
 80015b6:	f001 fca3 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200001f8 	.word	0x200001f8

080015c4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <DMA1_Channel2_IRQHandler+0x10>)
 80015ca:	f001 fc99 	bl	8002f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000030c 	.word	0x2000030c

080015d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <ADC1_2_IRQHandler+0x14>)
 80015de:	f000 fb61 	bl	8001ca4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <ADC1_2_IRQHandler+0x18>)
 80015e4:	f000 fb5e 	bl	8001ca4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000124 	.word	0x20000124
 80015f0:	2000006c 	.word	0x2000006c

080015f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80015fa:	f003 fd0b 	bl	8005014 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001600:	f003 fd08 	bl	8005014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000023c 	.word	0x2000023c
 800160c:	20000354 	.word	0x20000354

08001610 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <TIM3_IRQHandler+0x10>)
 8001616:	f003 fcfd 	bl	8005014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200000c0 	.word	0x200000c0

08001624 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <USART2_IRQHandler+0x10>)
 800162a:	f004 fd8d 	bl	8006148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000288 	.word	0x20000288

08001638 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopForever+0x6>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <LoopForever+0xe>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	; (80016a8 <LoopForever+0x16>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001686:	f7ff ffd7 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f005 fdf7 	bl	800727c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800168e:	f7ff f829 	bl	80006e4 <main>

08001692 <LoopForever>:

LoopForever:
    b LoopForever
 8001692:	e7fe      	b.n	8001692 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001694:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80016a0:	08007348 	.word	0x08007348
  ldr r2, =_sbss
 80016a4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80016a8:	200003c8 	.word	0x200003c8

080016ac <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <CAN_RX0_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_Init+0x28>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_Init+0x28>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c0:	2003      	movs	r0, #3
 80016c2:	f001 fabf 	bl	8002c44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f808 	bl	80016dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016cc:	f7ff fd0c 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40022000 	.word	0x40022000

080016dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x54>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x58>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 fad7 	bl	8002cae <HAL_SYSTICK_Config>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e00e      	b.n	8001728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d80a      	bhi.n	8001726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f001 fa9f 	bl	8002c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <HAL_InitTick+0x5c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e000      	b.n	8001728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000010 	.word	0x20000010
 8001734:	20000018 	.word	0x20000018
 8001738:	20000014 	.word	0x20000014

0800173c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x20>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x24>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_IncTick+0x24>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000018 	.word	0x20000018
 8001760:	200003c4 	.word	0x200003c4

08001764 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;  
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	200003c4 	.word	0x200003c4

0800177c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b09a      	sub	sp, #104	; 0x68
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e172      	b.n	8001ad2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d176      	bne.n	80018ec <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	2b00      	cmp	r3, #0
 8001804:	d152      	bne.n	80018ac <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fc85 	bl	8001130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d13b      	bne.n	80018ac <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f001 f8cf 	bl	80029d8 <ADC_Disable>
 800183a:	4603      	mov	r3, r0
 800183c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	d12f      	bne.n	80018ac <HAL_ADC_Init+0xe0>
 800184c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001850:	2b00      	cmp	r3, #0
 8001852:	d12b      	bne.n	80018ac <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800185c:	f023 0302 	bic.w	r3, r3, #2
 8001860:	f043 0202 	orr.w	r2, r3, #2
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001876:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001886:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001888:	4b94      	ldr	r3, [pc, #592]	; (8001adc <HAL_ADC_Init+0x310>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a94      	ldr	r2, [pc, #592]	; (8001ae0 <HAL_ADC_Init+0x314>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0c9a      	lsrs	r2, r3, #18
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800189e:	e002      	b.n	80018a6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f9      	bne.n	80018a0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018c8:	d110      	bne.n	80018ec <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f023 0312 	bic.w	r3, r3, #18
 80018d2:	f043 0210 	orr.w	r2, r3, #16
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f043 0201 	orr.w	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f003 0310 	and.w	r3, r3, #16
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f040 80df 	bne.w	8001ab8 <HAL_ADC_Init+0x2ec>
 80018fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 80da 	bne.w	8001ab8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800190e:	2b00      	cmp	r3, #0
 8001910:	f040 80d2 	bne.w	8001ab8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800191c:	f043 0202 	orr.w	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001924:	4b6f      	ldr	r3, [pc, #444]	; (8001ae4 <HAL_ADC_Init+0x318>)
 8001926:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001930:	d102      	bne.n	8001938 <HAL_ADC_Init+0x16c>
 8001932:	4b6d      	ldr	r3, [pc, #436]	; (8001ae8 <HAL_ADC_Init+0x31c>)
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e002      	b.n	800193e <HAL_ADC_Init+0x172>
 8001938:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800193c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d108      	bne.n	800195e <HAL_ADC_Init+0x192>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_ADC_Init+0x192>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_ADC_Init+0x194>
 800195e:	2300      	movs	r3, #0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11c      	bne.n	800199e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001964:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001966:	2b00      	cmp	r3, #0
 8001968:	d010      	beq.n	800198c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <HAL_ADC_Init+0x1ba>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_ADC_Init+0x1ba>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_ADC_Init+0x1bc>
 8001986:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001988:	2b00      	cmp	r3, #0
 800198a:	d108      	bne.n	800199e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800198c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	431a      	orrs	r2, r3
 800199a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800199c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7e5b      	ldrb	r3, [r3, #25]
 80019a2:	035b      	lsls	r3, r3, #13
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019a8:	2a01      	cmp	r2, #1
 80019aa:	d002      	beq.n	80019b2 <HAL_ADC_Init+0x1e6>
 80019ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019b0:	e000      	b.n	80019b4 <HAL_ADC_Init+0x1e8>
 80019b2:	2200      	movs	r2, #0
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019c4:	4313      	orrs	r3, r2
 80019c6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d11b      	bne.n	8001a0a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7e5b      	ldrb	r3, [r3, #25]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	3b01      	subs	r3, #1
 80019e0:	045a      	lsls	r2, r3, #17
 80019e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019e4:	4313      	orrs	r3, r2
 80019e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ea:	663b      	str	r3, [r7, #96]	; 0x60
 80019ec:	e00d      	b.n	8001a0a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80019f6:	f043 0220 	orr.w	r2, r3, #32
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f043 0201 	orr.w	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d007      	beq.n	8001a22 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d114      	bne.n	8001a5a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a3e:	f023 0302 	bic.w	r3, r3, #2
 8001a42:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7e1b      	ldrb	r3, [r3, #24]
 8001a48:	039a      	lsls	r2, r3, #14
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4313      	orrs	r3, r2
 8001a54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a56:	4313      	orrs	r3, r2
 8001a58:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <HAL_ADC_Init+0x320>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d10c      	bne.n	8001a90 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f023 010f 	bic.w	r1, r3, #15
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a8e:	e007      	b.n	8001aa0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 020f 	bic.w	r2, r2, #15
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ab6:	e00a      	b.n	8001ace <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f023 0312 	bic.w	r3, r3, #18
 8001ac0:	f043 0210 	orr.w	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001ace:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3768      	adds	r7, #104	; 0x68
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000010 	.word	0x20000010
 8001ae0:	431bde83 	.word	0x431bde83
 8001ae4:	50000300 	.word	0x50000300
 8001ae8:	50000100 	.word	0x50000100
 8001aec:	fff0c007 	.word	0xfff0c007

08001af0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f040 80b9 	bne.w	8001c82 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_Start_DMA+0x2e>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e0b4      	b.n	8001c88 <HAL_ADC_Start_DMA+0x198>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001b26:	4b5a      	ldr	r3, [pc, #360]	; (8001c90 <HAL_ADC_Start_DMA+0x1a0>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 80a0 	bne.w	8001c74 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 feeb 	bl	8002910 <ADC_Enable>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f040 8092 	bne.w	8001c6a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b5a:	4b4d      	ldr	r3, [pc, #308]	; (8001c90 <HAL_ADC_Start_DMA+0x1a0>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <HAL_ADC_Start_DMA+0x80>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b6e:	d115      	bne.n	8001b9c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d027      	beq.n	8001bda <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b9a:	e01e      	b.n	8001bda <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bb0:	d004      	beq.n	8001bbc <HAL_ADC_Start_DMA+0xcc>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a37      	ldr	r2, [pc, #220]	; (8001c94 <HAL_ADC_Start_DMA+0x1a4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d10e      	bne.n	8001bda <HAL_ADC_Start_DMA+0xea>
 8001bbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be6:	d106      	bne.n	8001bf6 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	f023 0206 	bic.w	r2, r3, #6
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	645a      	str	r2, [r3, #68]	; 0x44
 8001bf4:	e002      	b.n	8001bfc <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c08:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <HAL_ADC_Start_DMA+0x1a8>)
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <HAL_ADC_Start_DMA+0x1ac>)
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <HAL_ADC_Start_DMA+0x1b0>)
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	221c      	movs	r2, #28
 8001c22:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0210 	orr.w	r2, r2, #16
 8001c32:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3340      	adds	r3, #64	; 0x40
 8001c4e:	4619      	mov	r1, r3
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f001 f87e 	bl	8002d54 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0204 	orr.w	r2, r2, #4
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	e00d      	b.n	8001c86 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c72:	e008      	b.n	8001c86 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c80:	e001      	b.n	8001c86 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
 8001c84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	50000300 	.word	0x50000300
 8001c94:	50000100 	.word	0x50000100
 8001c98:	08002845 	.word	0x08002845
 8001c9c:	080028bf 	.word	0x080028bf
 8001ca0:	080028db 	.word	0x080028db

08001ca4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d106      	bne.n	8001cd4 <HAL_ADC_IRQHandler+0x30>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d17a      	bne.n	8001dd8 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d173      	bne.n	8001dd8 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001d08:	4b88      	ldr	r3, [pc, #544]	; (8001f2c <HAL_ADC_IRQHandler+0x288>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d010      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x92>
 8001d14:	4b85      	ldr	r3, [pc, #532]	; (8001f2c <HAL_ADC_IRQHandler+0x288>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d00a      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x92>
 8001d20:	4b82      	ldr	r3, [pc, #520]	; (8001f2c <HAL_ADC_IRQHandler+0x288>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2b09      	cmp	r3, #9
 8001d2a:	d004      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x92>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d34:	d104      	bne.n	8001d40 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	e003      	b.n	8001d48 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001d40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d139      	bne.n	8001dca <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d134      	bne.n	8001dca <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d12d      	bne.n	8001dca <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d11a      	bne.n	8001db2 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 020c 	bic.w	r2, r2, #12
 8001d8a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d112      	bne.n	8001dca <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
 8001db0:	e00b      	b.n	8001dca <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff fcd6 	bl	800177c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d106      	bne.n	8001df4 <HAL_ADC_IRQHandler+0x150>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d00f      	beq.n	8001e14 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001dfe:	2b40      	cmp	r3, #64	; 0x40
 8001e00:	f040 80a9 	bne.w	8001f56 <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	2b40      	cmp	r3, #64	; 0x40
 8001e10:	f040 80a1 	bne.w	8001f56 <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001e20:	4b42      	ldr	r3, [pc, #264]	; (8001f2c <HAL_ADC_IRQHandler+0x288>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x1aa>
 8001e2c:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_ADC_IRQHandler+0x288>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d00a      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x1aa>
 8001e38:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <HAL_ADC_IRQHandler+0x288>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	2b09      	cmp	r3, #9
 8001e42:	d004      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x1aa>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e4c:	d104      	bne.n	8001e58 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	e003      	b.n	8001e60 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001e58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d16c      	bne.n	8001f48 <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00b      	beq.n	8001e90 <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d160      	bne.n	8001f48 <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d15b      	bne.n	8001f48 <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9a:	2b40      	cmp	r3, #64	; 0x40
 8001e9c:	d154      	bne.n	8001f48 <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_ADC_IRQHandler+0x288>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d010      	beq.n	8001ecc <HAL_ADC_IRQHandler+0x228>
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_ADC_IRQHandler+0x288>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d00a      	beq.n	8001ecc <HAL_ADC_IRQHandler+0x228>
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_ADC_IRQHandler+0x288>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	2b07      	cmp	r3, #7
 8001ec0:	d004      	beq.n	8001ecc <HAL_ADC_IRQHandler+0x228>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eca:	d104      	bne.n	8001ed6 <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	e003      	b.n	8001ede <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ed6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d12f      	bne.n	8001f48 <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d11c      	bne.n	8001f30 <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f04:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d114      	bne.n	8001f48 <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
 8001f2a:	e00d      	b.n	8001f48 <HAL_ADC_IRQHandler+0x2a4>
 8001f2c:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f043 0210 	orr.w	r2, r3, #16
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f8cb 	bl	80020e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2260      	movs	r2, #96	; 0x60
 8001f54:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	d113      	bne.n	8001f8c <HAL_ADC_IRQHandler+0x2e8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b80      	cmp	r3, #128	; 0x80
 8001f70:	d10c      	bne.n	8001f8c <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fc10 	bl	80017a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f9a:	d115      	bne.n	8001fc8 <HAL_ADC_IRQHandler+0x324>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001faa:	d10d      	bne.n	8001fc8 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f8a7 	bl	800210c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc6:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd6:	d115      	bne.n	8002004 <HAL_ADC_IRQHandler+0x360>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe6:	d10d      	bne.n	8002004 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f893 	bl	8002120 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002002:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b10      	cmp	r3, #16
 8002010:	d13d      	bne.n	800208e <HAL_ADC_IRQHandler+0x3ea>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b10      	cmp	r3, #16
 800201e:	d136      	bne.n	800208e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002024:	2b01      	cmp	r3, #1
 8002026:	d102      	bne.n	800202e <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 8002028:	2301      	movs	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	e019      	b.n	8002062 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <HAL_ADC_IRQHandler+0x43c>)
 8002030:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10a      	bne.n	8002062 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 800204c:	2301      	movs	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e007      	b.n	8002062 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 800205e:	2301      	movs	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d10e      	bne.n	8002086 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	f043 0202 	orr.w	r2, r3, #2
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fb99 	bl	80017b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2210      	movs	r2, #16
 800208c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209c:	d11b      	bne.n	80020d6 <HAL_ADC_IRQHandler+0x432>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ac:	d113      	bne.n	80020d6 <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f043 0208 	orr.w	r2, r3, #8
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ce:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f811 	bl	80020f8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	50000300 	.word	0x50000300

080020e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002134:	b480      	push	{r7}
 8002136:	b09b      	sub	sp, #108	; 0x6c
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x22>
 8002152:	2302      	movs	r3, #2
 8002154:	e2a5      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x56e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	f040 8289 	bne.w	8002680 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b04      	cmp	r3, #4
 8002174:	d81c      	bhi.n	80021b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	461a      	mov	r2, r3
 800218a:	231f      	movs	r3, #31
 800218c:	4093      	lsls	r3, r2
 800218e:	43db      	mvns	r3, r3
 8002190:	4019      	ands	r1, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
 80021ae:	e063      	b.n	8002278 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b09      	cmp	r3, #9
 80021b6:	d81e      	bhi.n	80021f6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	3b1e      	subs	r3, #30
 80021cc:	221f      	movs	r2, #31
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	4019      	ands	r1, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	3b1e      	subs	r3, #30
 80021e8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34
 80021f4:	e040      	b.n	8002278 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b0e      	cmp	r3, #14
 80021fc:	d81e      	bhi.n	800223c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	3b3c      	subs	r3, #60	; 0x3c
 8002212:	221f      	movs	r2, #31
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	4019      	ands	r1, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	3b3c      	subs	r3, #60	; 0x3c
 800222e:	fa00 f203 	lsl.w	r2, r0, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
 800223a:	e01d      	b.n	8002278 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	3b5a      	subs	r3, #90	; 0x5a
 8002250:	221f      	movs	r2, #31
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	4019      	ands	r1, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	3b5a      	subs	r3, #90	; 0x5a
 800226c:	fa00 f203 	lsl.w	r2, r0, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 80e5 	bne.w	8002452 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b09      	cmp	r3, #9
 800228e:	d91c      	bls.n	80022ca <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6999      	ldr	r1, [r3, #24]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	3b1e      	subs	r3, #30
 80022a2:	2207      	movs	r2, #7
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4019      	ands	r1, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6898      	ldr	r0, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	3b1e      	subs	r3, #30
 80022bc:	fa00 f203 	lsl.w	r2, r0, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	619a      	str	r2, [r3, #24]
 80022c8:	e019      	b.n	80022fe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6959      	ldr	r1, [r3, #20]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	2207      	movs	r2, #7
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	4019      	ands	r1, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6898      	ldr	r0, [r3, #8]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	fa00 f203 	lsl.w	r2, r0, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	08db      	lsrs	r3, r3, #3
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	3b01      	subs	r3, #1
 800231c:	2b03      	cmp	r3, #3
 800231e:	d84f      	bhi.n	80023c0 <HAL_ADC_ConfigChannel+0x28c>
 8002320:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <HAL_ADC_ConfigChannel+0x1f4>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	08002339 	.word	0x08002339
 800232c:	0800235b 	.word	0x0800235b
 8002330:	0800237d 	.word	0x0800237d
 8002334:	0800239f 	.word	0x0800239f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800233e:	4b9e      	ldr	r3, [pc, #632]	; (80025b8 <HAL_ADC_ConfigChannel+0x484>)
 8002340:	4013      	ands	r3, r2
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	0691      	lsls	r1, r2, #26
 8002348:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800234a:	430a      	orrs	r2, r1
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002356:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002358:	e07e      	b.n	8002458 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002360:	4b95      	ldr	r3, [pc, #596]	; (80025b8 <HAL_ADC_ConfigChannel+0x484>)
 8002362:	4013      	ands	r3, r2
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	0691      	lsls	r1, r2, #26
 800236a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800236c:	430a      	orrs	r2, r1
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002378:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800237a:	e06d      	b.n	8002458 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002382:	4b8d      	ldr	r3, [pc, #564]	; (80025b8 <HAL_ADC_ConfigChannel+0x484>)
 8002384:	4013      	ands	r3, r2
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	0691      	lsls	r1, r2, #26
 800238c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800238e:	430a      	orrs	r2, r1
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800239a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800239c:	e05c      	b.n	8002458 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023a4:	4b84      	ldr	r3, [pc, #528]	; (80025b8 <HAL_ADC_ConfigChannel+0x484>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	0691      	lsls	r1, r2, #26
 80023ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023b0:	430a      	orrs	r2, r1
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023bc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023be:	e04b      	b.n	8002458 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	069b      	lsls	r3, r3, #26
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d107      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023e2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	069b      	lsls	r3, r3, #26
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d107      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002406:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800240e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	069b      	lsls	r3, r3, #26
 8002418:	429a      	cmp	r2, r3
 800241a:	d107      	bne.n	800242c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800242a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002432:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	069b      	lsls	r3, r3, #26
 800243c:	429a      	cmp	r2, r3
 800243e:	d10a      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800244e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002450:	e001      	b.n	8002456 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002452:	bf00      	nop
 8002454:	e000      	b.n	8002458 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002456:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d108      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x344>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x344>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_ADC_ConfigChannel+0x346>
 8002478:	2300      	movs	r3, #0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 810b 	bne.w	8002696 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d00f      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	400a      	ands	r2, r1
 80024a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80024a6:	e049      	b.n	800253c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	409a      	lsls	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b09      	cmp	r3, #9
 80024c8:	d91c      	bls.n	8002504 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6999      	ldr	r1, [r3, #24]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	3b1b      	subs	r3, #27
 80024dc:	2207      	movs	r2, #7
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	4019      	ands	r1, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6898      	ldr	r0, [r3, #8]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	3b1b      	subs	r3, #27
 80024f6:	fa00 f203 	lsl.w	r2, r0, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	619a      	str	r2, [r3, #24]
 8002502:	e01b      	b.n	800253c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6959      	ldr	r1, [r3, #20]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	2207      	movs	r2, #7
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	4019      	ands	r1, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6898      	ldr	r0, [r3, #8]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	fa00 f203 	lsl.w	r2, r0, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800253c:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <HAL_ADC_ConfigChannel+0x488>)
 800253e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b10      	cmp	r3, #16
 8002546:	d105      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002550:	2b00      	cmp	r3, #0
 8002552:	d015      	beq.n	8002580 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002558:	2b11      	cmp	r3, #17
 800255a:	d105      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800255c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800256c:	2b12      	cmp	r3, #18
 800256e:	f040 8092 	bne.w	8002696 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 808b 	bne.w	8002696 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002588:	d102      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x45c>
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_ADC_ConfigChannel+0x48c>)
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	e002      	b.n	8002596 <HAL_ADC_ConfigChannel+0x462>
 8002590:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002594:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10f      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x490>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d108      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x490>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e007      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x492>
 80025b6:	bf00      	nop
 80025b8:	83fff000 	.word	0x83fff000
 80025bc:	50000300 	.word	0x50000300
 80025c0:	50000100 	.word	0x50000100
 80025c4:	2300      	movs	r3, #0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d150      	bne.n	800266c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d010      	beq.n	80025f2 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d107      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x4b8>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x4b8>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_ADC_ConfigChannel+0x4ba>
 80025ec:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d13c      	bne.n	800266c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d11d      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x502>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002602:	d118      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800260c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800260e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_ADC_ConfigChannel+0x57c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <HAL_ADC_ConfigChannel+0x580>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0c9a      	lsrs	r2, r3, #18
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002626:	e002      	b.n	800262e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	3b01      	subs	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f9      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002634:	e02e      	b.n	8002694 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b11      	cmp	r3, #17
 800263c:	d10b      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x522>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002646:	d106      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002652:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002654:	e01e      	b.n	8002694 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b12      	cmp	r3, #18
 800265c:	d11a      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800265e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002668:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800266a:	e013      	b.n	8002694 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f043 0220 	orr.w	r2, r3, #32
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800267e:	e00a      	b.n	8002696 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f043 0220 	orr.w	r2, r3, #32
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002692:	e000      	b.n	8002696 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002694:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800269e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	376c      	adds	r7, #108	; 0x6c
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000010 	.word	0x20000010
 80026b4:	431bde83 	.word	0x431bde83

080026b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b099      	sub	sp, #100	; 0x64
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026d0:	d102      	bne.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80026d2:	4b5a      	ldr	r3, [pc, #360]	; (800283c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	e002      	b.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80026d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026dc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0a2      	b.n	800282e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e09b      	b.n	800282e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d17f      	bne.n	800280c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d179      	bne.n	800280c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002718:	4b49      	ldr	r3, [pc, #292]	; (8002840 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800271a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d040      	beq.n	80027a6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002736:	035b      	lsls	r3, r3, #13
 8002738:	430b      	orrs	r3, r1
 800273a:	431a      	orrs	r2, r3
 800273c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d108      	bne.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002760:	2300      	movs	r3, #0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d15c      	bne.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d107      	bne.n	8002782 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002782:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002784:	2b00      	cmp	r3, #0
 8002786:	d14b      	bne.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002790:	f023 030f 	bic.w	r3, r3, #15
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	6811      	ldr	r1, [r2, #0]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	6892      	ldr	r2, [r2, #8]
 800279c:	430a      	orrs	r2, r1
 800279e:	431a      	orrs	r2, r3
 80027a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027a4:	e03c      	b.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d108      	bne.n	80027d2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d123      	bne.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d107      	bne.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80027f4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d112      	bne.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80027fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002802:	f023 030f 	bic.w	r3, r3, #15
 8002806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002808:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800280a:	e009      	b.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800281e:	e000      	b.n	8002822 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002820:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800282a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800282e:	4618      	mov	r0, r3
 8002830:	3764      	adds	r7, #100	; 0x64
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	50000100 	.word	0x50000100
 8002840:	50000300 	.word	0x50000300

08002844 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800285a:	2b00      	cmp	r3, #0
 800285c:	d126      	bne.n	80028ac <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002874:	2b00      	cmp	r3, #0
 8002876:	d115      	bne.n	80028a4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7fe ff69 	bl	800177c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80028aa:	e004      	b.n	80028b6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7fe ff5f 	bl	8001790 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	f043 0204 	orr.w	r2, r3, #4
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7fe ff59 	bl	80017b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b01      	cmp	r3, #1
 8002928:	d108      	bne.n	800293c <ADC_Enable+0x2c>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <ADC_Enable+0x2c>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <ADC_Enable+0x2e>
 800293c:	2300      	movs	r3, #0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d143      	bne.n	80029ca <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <ADC_Enable+0xc4>)
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00d      	beq.n	800296c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f043 0210 	orr.w	r2, r3, #16
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e02f      	b.n	80029cc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800297c:	f7fe fef2 	bl	8001764 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002982:	e01b      	b.n	80029bc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002984:	f7fe feee 	bl	8001764 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d914      	bls.n	80029bc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d00d      	beq.n	80029bc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f043 0210 	orr.w	r2, r3, #16
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e007      	b.n	80029cc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d1dc      	bne.n	8002984 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	8000003f 	.word	0x8000003f

080029d8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d108      	bne.n	8002a04 <ADC_Disable+0x2c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <ADC_Disable+0x2c>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <ADC_Disable+0x2e>
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d047      	beq.n	8002a9a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030d 	and.w	r3, r3, #13
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d10f      	bne.n	8002a38 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0202 	orr.w	r2, r2, #2
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002a30:	f7fe fe98 	bl	8001764 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a36:	e029      	b.n	8002a8c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f043 0210 	orr.w	r2, r3, #16
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	f043 0201 	orr.w	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e023      	b.n	8002a9c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a54:	f7fe fe86 	bl	8001764 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d914      	bls.n	8002a8c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d10d      	bne.n	8002a8c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f043 0210 	orr.w	r2, r3, #16
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e007      	b.n	8002a9c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d0dc      	beq.n	8002a54 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad6:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	60d3      	str	r3, [r2, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <__NVIC_GetPriorityGrouping+0x18>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 0307 	and.w	r3, r3, #7
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db0b      	blt.n	8002b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	4907      	ldr	r1, [pc, #28]	; (8002b40 <__NVIC_EnableIRQ+0x38>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2001      	movs	r0, #1
 8002b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000e100 	.word	0xe000e100

08002b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	db0a      	blt.n	8002b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	490c      	ldr	r1, [pc, #48]	; (8002b90 <__NVIC_SetPriority+0x4c>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	440b      	add	r3, r1
 8002b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b6c:	e00a      	b.n	8002b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4908      	ldr	r1, [pc, #32]	; (8002b94 <__NVIC_SetPriority+0x50>)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	440b      	add	r3, r1
 8002b82:	761a      	strb	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f1c3 0307 	rsb	r3, r3, #7
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	bf28      	it	cs
 8002bb6:	2304      	movcs	r3, #4
 8002bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d902      	bls.n	8002bc8 <NVIC_EncodePriority+0x30>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3b03      	subs	r3, #3
 8002bc6:	e000      	b.n	8002bca <NVIC_EncodePriority+0x32>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	401a      	ands	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	43d9      	mvns	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	4313      	orrs	r3, r2
         );
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c10:	d301      	bcc.n	8002c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00f      	b.n	8002c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <SysTick_Config+0x40>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1e:	210f      	movs	r1, #15
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	f7ff ff8e 	bl	8002b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <SysTick_Config+0x40>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <SysTick_Config+0x40>)
 8002c30:	2207      	movs	r2, #7
 8002c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	e000e010 	.word	0xe000e010

08002c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff29 	bl	8002aa4 <__NVIC_SetPriorityGrouping>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c6c:	f7ff ff3e 	bl	8002aec <__NVIC_GetPriorityGrouping>
 8002c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	6978      	ldr	r0, [r7, #20]
 8002c78:	f7ff ff8e 	bl	8002b98 <NVIC_EncodePriority>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff5d 	bl	8002b44 <__NVIC_SetPriority>
}
 8002c8a:	bf00      	nop
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff31 	bl	8002b08 <__NVIC_EnableIRQ>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ffa2 	bl	8002c00 <SysTick_Config>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e037      	b.n	8002d4c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cf2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cf6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f9b8 	bl	80030a4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}  
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_DMA_Start_IT+0x20>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e04a      	b.n	8002e0a <HAL_DMA_Start_IT+0xb6>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d13a      	bne.n	8002dfc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f94b 	bl	8003046 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 020e 	orr.w	r2, r2, #14
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e00f      	b.n	8002dea <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 020a 	orr.w	r2, r2, #10
 8002dd8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0204 	bic.w	r2, r2, #4
 8002de8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e005      	b.n	8002e08 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
 8002e06:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d008      	beq.n	8002e36 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2204      	movs	r2, #4
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e020      	b.n	8002e78 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 020e 	bic.w	r2, r2, #14
 8002e44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f202 	lsl.w	r2, r1, r2
 8002e64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d005      	beq.n	8002ea6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	e027      	b.n	8002ef6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 020e 	bic.w	r2, r2, #14
 8002eb4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
    } 
  }
  return status;
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d024      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x72>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01f      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0204 	bic.w	r2, r2, #4
 8002f4e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	2104      	movs	r1, #4
 8002f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d06a      	beq.n	800303e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f70:	e065      	b.n	800303e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2202      	movs	r2, #2
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d02c      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xdc>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d027      	beq.n	8002fdc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 020a 	bic.w	r2, r2, #10
 8002fa8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	2102      	movs	r1, #2
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d035      	beq.n	800303e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002fda:	e030      	b.n	800303e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d028      	beq.n	800303e <HAL_DMA_IRQHandler+0x13e>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d023      	beq.n	800303e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 020e 	bic.w	r2, r2, #14
 8003004:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f202 	lsl.w	r2, r1, r2
 8003014:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	4798      	blx	r3
    }
  }
}  
 800303c:	e7ff      	b.n	800303e <HAL_DMA_IRQHandler+0x13e>
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	2101      	movs	r1, #1
 800305e:	fa01 f202 	lsl.w	r2, r1, r2
 8003062:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b10      	cmp	r3, #16
 8003072:	d108      	bne.n	8003086 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003084:	e007      	b.n	8003096 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	60da      	str	r2, [r3, #12]
}
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <DMA_CalcBaseAndBitshift+0x34>)
 80030b4:	4413      	add	r3, r2
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <DMA_CalcBaseAndBitshift+0x38>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	009a      	lsls	r2, r3, #2
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a06      	ldr	r2, [pc, #24]	; (80030e0 <DMA_CalcBaseAndBitshift+0x3c>)
 80030c8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	bffdfff8 	.word	0xbffdfff8
 80030dc:	cccccccd 	.word	0xcccccccd
 80030e0:	40020000 	.word	0x40020000

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f2:	e14e      	b.n	8003392 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	4013      	ands	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8140 	beq.w	800338c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d005      	beq.n	8003124 <HAL_GPIO_Init+0x40>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d130      	bne.n	8003186 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800315a:	2201      	movs	r2, #1
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f003 0201 	and.w	r2, r3, #1
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b03      	cmp	r3, #3
 8003190:	d017      	beq.n	80031c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d123      	bne.n	8003216 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	08da      	lsrs	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3208      	adds	r2, #8
 80031d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	08da      	lsrs	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3208      	adds	r2, #8
 8003210:	6939      	ldr	r1, [r7, #16]
 8003212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	2203      	movs	r2, #3
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0203 	and.w	r2, r3, #3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 809a 	beq.w	800338c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003258:	4b55      	ldr	r3, [pc, #340]	; (80033b0 <HAL_GPIO_Init+0x2cc>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	4a54      	ldr	r2, [pc, #336]	; (80033b0 <HAL_GPIO_Init+0x2cc>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6193      	str	r3, [r2, #24]
 8003264:	4b52      	ldr	r3, [pc, #328]	; (80033b0 <HAL_GPIO_Init+0x2cc>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003270:	4a50      	ldr	r2, [pc, #320]	; (80033b4 <HAL_GPIO_Init+0x2d0>)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	3302      	adds	r3, #2
 8003278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	220f      	movs	r2, #15
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800329a:	d013      	beq.n	80032c4 <HAL_GPIO_Init+0x1e0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a46      	ldr	r2, [pc, #280]	; (80033b8 <HAL_GPIO_Init+0x2d4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00d      	beq.n	80032c0 <HAL_GPIO_Init+0x1dc>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a45      	ldr	r2, [pc, #276]	; (80033bc <HAL_GPIO_Init+0x2d8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <HAL_GPIO_Init+0x1d8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a44      	ldr	r2, [pc, #272]	; (80033c0 <HAL_GPIO_Init+0x2dc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d101      	bne.n	80032b8 <HAL_GPIO_Init+0x1d4>
 80032b4:	2303      	movs	r3, #3
 80032b6:	e006      	b.n	80032c6 <HAL_GPIO_Init+0x1e2>
 80032b8:	2305      	movs	r3, #5
 80032ba:	e004      	b.n	80032c6 <HAL_GPIO_Init+0x1e2>
 80032bc:	2302      	movs	r3, #2
 80032be:	e002      	b.n	80032c6 <HAL_GPIO_Init+0x1e2>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_GPIO_Init+0x1e2>
 80032c4:	2300      	movs	r3, #0
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	f002 0203 	and.w	r2, r2, #3
 80032cc:	0092      	lsls	r2, r2, #2
 80032ce:	4093      	lsls	r3, r2
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032d6:	4937      	ldr	r1, [pc, #220]	; (80033b4 <HAL_GPIO_Init+0x2d0>)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032e4:	4b37      	ldr	r3, [pc, #220]	; (80033c4 <HAL_GPIO_Init+0x2e0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003308:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <HAL_GPIO_Init+0x2e0>)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800330e:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <HAL_GPIO_Init+0x2e0>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	43db      	mvns	r3, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4013      	ands	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003332:	4a24      	ldr	r2, [pc, #144]	; (80033c4 <HAL_GPIO_Init+0x2e0>)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003338:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <HAL_GPIO_Init+0x2e0>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	43db      	mvns	r3, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800335c:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <HAL_GPIO_Init+0x2e0>)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003362:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <HAL_GPIO_Init+0x2e0>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003386:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <HAL_GPIO_Init+0x2e0>)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3301      	adds	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	f47f aea9 	bne.w	80030f4 <HAL_GPIO_Init+0x10>
  }
}
 80033a2:	bf00      	nop
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40010000 	.word	0x40010000
 80033b8:	48000400 	.word	0x48000400
 80033bc:	48000800 	.word	0x48000800
 80033c0:	48000c00 	.word	0x48000c00
 80033c4:	40010400 	.word	0x40010400

080033c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
 80033d4:	4613      	mov	r3, r2
 80033d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033d8:	787b      	ldrb	r3, [r7, #1]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033e4:	e002      	b.n	80033ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4013      	ands	r3, r2
 8003410:	041a      	lsls	r2, r3, #16
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	43d9      	mvns	r1, r3
 8003416:	887b      	ldrh	r3, [r7, #2]
 8003418:	400b      	ands	r3, r1
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	619a      	str	r2, [r3, #24]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003432:	af00      	add	r7, sp, #0
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	f000 bef4 	b.w	800422e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 816a 	beq.w	800372a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003456:	4bb3      	ldr	r3, [pc, #716]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b04      	cmp	r3, #4
 8003460:	d00c      	beq.n	800347c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003462:	4bb0      	ldr	r3, [pc, #704]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b08      	cmp	r3, #8
 800346c:	d159      	bne.n	8003522 <HAL_RCC_OscConfig+0xf6>
 800346e:	4bad      	ldr	r3, [pc, #692]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347a:	d152      	bne.n	8003522 <HAL_RCC_OscConfig+0xf6>
 800347c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003480:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003490:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	fab3 f383 	clz	r3, r3
 8003498:	b2db      	uxtb	r3, r3
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <HAL_RCC_OscConfig+0x82>
 80034a8:	4b9e      	ldr	r3, [pc, #632]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	e015      	b.n	80034da <HAL_RCC_OscConfig+0xae>
 80034ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80034c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80034ca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80034ce:	fa93 f3a3 	rbit	r3, r3
 80034d2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80034d6:	4b93      	ldr	r3, [pc, #588]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80034e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80034e6:	fa92 f2a2 	rbit	r2, r2
 80034ea:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80034ee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80034f2:	fab2 f282 	clz	r2, r2
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	f042 0220 	orr.w	r2, r2, #32
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	f002 021f 	and.w	r2, r2, #31
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f202 	lsl.w	r2, r1, r2
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 810c 	beq.w	8003728 <HAL_RCC_OscConfig+0x2fc>
 8003510:	1d3b      	adds	r3, r7, #4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 8106 	bne.w	8003728 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f000 be86 	b.w	800422e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d106      	bne.n	800353c <HAL_RCC_OscConfig+0x110>
 800352e:	4b7d      	ldr	r3, [pc, #500]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7c      	ldr	r2, [pc, #496]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e030      	b.n	800359e <HAL_RCC_OscConfig+0x172>
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0x134>
 8003546:	4b77      	ldr	r3, [pc, #476]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a76      	ldr	r2, [pc, #472]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 800354c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b74      	ldr	r3, [pc, #464]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a73      	ldr	r2, [pc, #460]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e01e      	b.n	800359e <HAL_RCC_OscConfig+0x172>
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800356a:	d10c      	bne.n	8003586 <HAL_RCC_OscConfig+0x15a>
 800356c:	4b6d      	ldr	r3, [pc, #436]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a6c      	ldr	r2, [pc, #432]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003572:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b6a      	ldr	r3, [pc, #424]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a69      	ldr	r2, [pc, #420]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	e00b      	b.n	800359e <HAL_RCC_OscConfig+0x172>
 8003586:	4b67      	ldr	r3, [pc, #412]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a66      	ldr	r2, [pc, #408]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 800358c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4b64      	ldr	r3, [pc, #400]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a63      	ldr	r2, [pc, #396]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800359c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800359e:	4b61      	ldr	r3, [pc, #388]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	f023 020f 	bic.w	r2, r3, #15
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	495d      	ldr	r1, [pc, #372]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d059      	beq.n	8003670 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe f8d2 	bl	8001764 <HAL_GetTick>
 80035c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c4:	e00a      	b.n	80035dc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c6:	f7fe f8cd 	bl	8001764 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d902      	bls.n	80035dc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	f000 be29 	b.w	800422e <HAL_RCC_OscConfig+0xe02>
 80035dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80035f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d102      	bne.n	800360e <HAL_RCC_OscConfig+0x1e2>
 8003608:	4b46      	ldr	r3, [pc, #280]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	e015      	b.n	800363a <HAL_RCC_OscConfig+0x20e>
 800360e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003612:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003626:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800362a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003636:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800363e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003642:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003646:	fa92 f2a2 	rbit	r2, r2
 800364a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800364e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003652:	fab2 f282 	clz	r2, r2
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	f042 0220 	orr.w	r2, r2, #32
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	f002 021f 	and.w	r2, r2, #31
 8003662:	2101      	movs	r1, #1
 8003664:	fa01 f202 	lsl.w	r2, r1, r2
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0ab      	beq.n	80035c6 <HAL_RCC_OscConfig+0x19a>
 800366e:	e05c      	b.n	800372a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe f878 	bl	8001764 <HAL_GetTick>
 8003674:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800367a:	f7fe f873 	bl	8001764 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	; 0x64
 8003688:	d902      	bls.n	8003690 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	f000 bdcf 	b.w	800422e <HAL_RCC_OscConfig+0xe02>
 8003690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003694:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80036a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_OscConfig+0x296>
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	e015      	b.n	80036ee <HAL_RCC_OscConfig+0x2c2>
 80036c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80036d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80036de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80036ea:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <HAL_RCC_OscConfig+0x2f8>)
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80036f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80036fa:	fa92 f2a2 	rbit	r2, r2
 80036fe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003702:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003706:	fab2 f282 	clz	r2, r2
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	f042 0220 	orr.w	r2, r2, #32
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	f002 021f 	and.w	r2, r2, #31
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f202 	lsl.w	r2, r1, r2
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ab      	bne.n	800367a <HAL_RCC_OscConfig+0x24e>
 8003722:	e002      	b.n	800372a <HAL_RCC_OscConfig+0x2fe>
 8003724:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372a:	1d3b      	adds	r3, r7, #4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 816f 	beq.w	8003a18 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800373a:	4bd0      	ldr	r3, [pc, #832]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003746:	4bcd      	ldr	r3, [pc, #820]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d16c      	bne.n	800382c <HAL_RCC_OscConfig+0x400>
 8003752:	4bca      	ldr	r3, [pc, #808]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d166      	bne.n	800382c <HAL_RCC_OscConfig+0x400>
 800375e:	2302      	movs	r3, #2
 8003760:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003770:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003774:	fab3 f383 	clz	r3, r3
 8003778:	b2db      	uxtb	r3, r3
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d102      	bne.n	800378e <HAL_RCC_OscConfig+0x362>
 8003788:	4bbc      	ldr	r3, [pc, #752]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	e013      	b.n	80037b6 <HAL_RCC_OscConfig+0x38a>
 800378e:	2302      	movs	r3, #2
 8003790:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80037a0:	2302      	movs	r3, #2
 80037a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80037a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80037b2:	4bb2      	ldr	r3, [pc, #712]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2202      	movs	r2, #2
 80037b8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80037bc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80037c0:	fa92 f2a2 	rbit	r2, r2
 80037c4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80037c8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80037cc:	fab2 f282 	clz	r2, r2
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	f042 0220 	orr.w	r2, r2, #32
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	f002 021f 	and.w	r2, r2, #31
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f202 	lsl.w	r2, r1, r2
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <HAL_RCC_OscConfig+0x3cc>
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d002      	beq.n	80037f8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f000 bd1b 	b.w	800422e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f8:	4ba0      	ldr	r3, [pc, #640]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003800:	1d3b      	adds	r3, r7, #4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	21f8      	movs	r1, #248	; 0xf8
 8003808:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003810:	fa91 f1a1 	rbit	r1, r1
 8003814:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003818:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800381c:	fab1 f181 	clz	r1, r1
 8003820:	b2c9      	uxtb	r1, r1
 8003822:	408b      	lsls	r3, r1
 8003824:	4995      	ldr	r1, [pc, #596]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382a:	e0f5      	b.n	8003a18 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8085 	beq.w	8003942 <HAL_RCC_OscConfig+0x516>
 8003838:	2301      	movs	r3, #1
 800383a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800384a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003858:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	461a      	mov	r2, r3
 8003860:	2301      	movs	r3, #1
 8003862:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7fd ff7e 	bl	8001764 <HAL_GetTick>
 8003868:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800386e:	f7fd ff79 	bl	8001764 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d902      	bls.n	8003884 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	f000 bcd5 	b.w	800422e <HAL_RCC_OscConfig+0xe02>
 8003884:	2302      	movs	r3, #2
 8003886:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003896:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d102      	bne.n	80038b4 <HAL_RCC_OscConfig+0x488>
 80038ae:	4b73      	ldr	r3, [pc, #460]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	e013      	b.n	80038dc <HAL_RCC_OscConfig+0x4b0>
 80038b4:	2302      	movs	r3, #2
 80038b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038c6:	2302      	movs	r3, #2
 80038c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80038d8:	4b68      	ldr	r3, [pc, #416]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	2202      	movs	r2, #2
 80038de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80038e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80038e6:	fa92 f2a2 	rbit	r2, r2
 80038ea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80038ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038f2:	fab2 f282 	clz	r2, r2
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	f042 0220 	orr.w	r2, r2, #32
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	f002 021f 	and.w	r2, r2, #31
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f202 	lsl.w	r2, r1, r2
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0af      	beq.n	800386e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390e:	4b5b      	ldr	r3, [pc, #364]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	21f8      	movs	r1, #248	; 0xf8
 800391e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003926:	fa91 f1a1 	rbit	r1, r1
 800392a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800392e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003932:	fab1 f181 	clz	r1, r1
 8003936:	b2c9      	uxtb	r1, r1
 8003938:	408b      	lsls	r3, r1
 800393a:	4950      	ldr	r1, [pc, #320]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 800393c:	4313      	orrs	r3, r2
 800393e:	600b      	str	r3, [r1, #0]
 8003940:	e06a      	b.n	8003a18 <HAL_RCC_OscConfig+0x5ec>
 8003942:	2301      	movs	r3, #1
 8003944:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003954:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003962:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	461a      	mov	r2, r3
 800396a:	2300      	movs	r3, #0
 800396c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396e:	f7fd fef9 	bl	8001764 <HAL_GetTick>
 8003972:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003976:	e00a      	b.n	800398e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003978:	f7fd fef4 	bl	8001764 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d902      	bls.n	800398e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	f000 bc50 	b.w	800422e <HAL_RCC_OscConfig+0xe02>
 800398e:	2302      	movs	r3, #2
 8003990:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80039a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a4:	fab3 f383 	clz	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d102      	bne.n	80039be <HAL_RCC_OscConfig+0x592>
 80039b8:	4b30      	ldr	r3, [pc, #192]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	e013      	b.n	80039e6 <HAL_RCC_OscConfig+0x5ba>
 80039be:	2302      	movs	r3, #2
 80039c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039c8:	fa93 f3a3 	rbit	r3, r3
 80039cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039d0:	2302      	movs	r3, #2
 80039d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80039d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80039e2:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <HAL_RCC_OscConfig+0x650>)
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	2202      	movs	r2, #2
 80039e8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80039ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80039f0:	fa92 f2a2 	rbit	r2, r2
 80039f4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80039f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80039fc:	fab2 f282 	clz	r2, r2
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	f042 0220 	orr.w	r2, r2, #32
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	f002 021f 	and.w	r2, r2, #31
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1af      	bne.n	8003978 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80da 	beq.w	8003bdc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d069      	beq.n	8003b06 <HAL_RCC_OscConfig+0x6da>
 8003a32:	2301      	movs	r3, #1
 8003a34:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a48:	fab3 f383 	clz	r3, r3
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCC_OscConfig+0x654>)
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	461a      	mov	r2, r3
 8003a58:	2301      	movs	r3, #1
 8003a5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7fd fe82 	bl	8001764 <HAL_GetTick>
 8003a60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a64:	e00e      	b.n	8003a84 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a66:	f7fd fe7d 	bl	8001764 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d906      	bls.n	8003a84 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e3d9      	b.n	800422e <HAL_RCC_OscConfig+0xe02>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	10908120 	.word	0x10908120
 8003a84:	2302      	movs	r3, #2
 8003a86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a8e:	fa93 f3a3 	rbit	r3, r3
 8003a92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	fa93 f2a3 	rbit	r2, r3
 8003aa8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	fa93 f2a3 	rbit	r2, r3
 8003ac0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003ac4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	4ba5      	ldr	r3, [pc, #660]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ace:	2102      	movs	r1, #2
 8003ad0:	6019      	str	r1, [r3, #0]
 8003ad2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	fa93 f1a3 	rbit	r1, r3
 8003adc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003ae0:	6019      	str	r1, [r3, #0]
  return result;
 8003ae2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	fab3 f383 	clz	r3, r3
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2101      	movs	r1, #1
 8003afa:	fa01 f303 	lsl.w	r3, r1, r3
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0b0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x63a>
 8003b04:	e06a      	b.n	8003bdc <HAL_RCC_OscConfig+0x7b0>
 8003b06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	fa93 f2a3 	rbit	r2, r3
 8003b18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b1c:	601a      	str	r2, [r3, #0]
  return result;
 8003b1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b22:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4b8c      	ldr	r3, [pc, #560]	; (8003d60 <HAL_RCC_OscConfig+0x934>)
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	461a      	mov	r2, r3
 8003b34:	2300      	movs	r3, #0
 8003b36:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b38:	f7fd fe14 	bl	8001764 <HAL_GetTick>
 8003b3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	e009      	b.n	8003b56 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b42:	f7fd fe0f 	bl	8001764 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e36b      	b.n	800422e <HAL_RCC_OscConfig+0xe02>
 8003b56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	fa93 f2a3 	rbit	r2, r3
 8003b68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b72:	2202      	movs	r2, #2
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	fa93 f2a3 	rbit	r2, r3
 8003b80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	fa93 f2a3 	rbit	r2, r3
 8003b98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9e:	4b6f      	ldr	r3, [pc, #444]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	6019      	str	r1, [r3, #0]
 8003baa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	fa93 f1a3 	rbit	r1, r3
 8003bb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003bb8:	6019      	str	r1, [r3, #0]
  return result;
 8003bba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1b2      	bne.n	8003b42 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bdc:	1d3b      	adds	r3, r7, #4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8158 	beq.w	8003e9c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf2:	4b5a      	ldr	r3, [pc, #360]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d112      	bne.n	8003c24 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	4b57      	ldr	r3, [pc, #348]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	4a56      	ldr	r2, [pc, #344]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c08:	61d3      	str	r3, [r2, #28]
 8003c0a:	4b54      	ldr	r3, [pc, #336]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003c12:	f107 0308 	add.w	r3, r7, #8
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f107 0308 	add.w	r3, r7, #8
 8003c1c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c24:	4b4f      	ldr	r3, [pc, #316]	; (8003d64 <HAL_RCC_OscConfig+0x938>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d11a      	bne.n	8003c66 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c30:	4b4c      	ldr	r3, [pc, #304]	; (8003d64 <HAL_RCC_OscConfig+0x938>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a4b      	ldr	r2, [pc, #300]	; (8003d64 <HAL_RCC_OscConfig+0x938>)
 8003c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3c:	f7fd fd92 	bl	8001764 <HAL_GetTick>
 8003c40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c44:	e009      	b.n	8003c5a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c46:	f7fd fd8d 	bl	8001764 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e2e9      	b.n	800422e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5a:	4b42      	ldr	r3, [pc, #264]	; (8003d64 <HAL_RCC_OscConfig+0x938>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ef      	beq.n	8003c46 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c66:	1d3b      	adds	r3, r7, #4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x852>
 8003c70:	4b3a      	ldr	r3, [pc, #232]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	4a39      	ldr	r2, [pc, #228]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6213      	str	r3, [r2, #32]
 8003c7c:	e02f      	b.n	8003cde <HAL_RCC_OscConfig+0x8b2>
 8003c7e:	1d3b      	adds	r3, r7, #4
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10c      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x876>
 8003c88:	4b34      	ldr	r3, [pc, #208]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	4a33      	ldr	r2, [pc, #204]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	6213      	str	r3, [r2, #32]
 8003c94:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	4a30      	ldr	r2, [pc, #192]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003c9a:	f023 0304 	bic.w	r3, r3, #4
 8003c9e:	6213      	str	r3, [r2, #32]
 8003ca0:	e01d      	b.n	8003cde <HAL_RCC_OscConfig+0x8b2>
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	d10c      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x89a>
 8003cac:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	4a2a      	ldr	r2, [pc, #168]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003cb2:	f043 0304 	orr.w	r3, r3, #4
 8003cb6:	6213      	str	r3, [r2, #32]
 8003cb8:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	4a27      	ldr	r2, [pc, #156]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6213      	str	r3, [r2, #32]
 8003cc4:	e00b      	b.n	8003cde <HAL_RCC_OscConfig+0x8b2>
 8003cc6:	4b25      	ldr	r3, [pc, #148]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4a24      	ldr	r2, [pc, #144]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6213      	str	r3, [r2, #32]
 8003cd2:	4b22      	ldr	r3, [pc, #136]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	4a21      	ldr	r2, [pc, #132]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003cd8:	f023 0304 	bic.w	r3, r3, #4
 8003cdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cde:	1d3b      	adds	r3, r7, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d06b      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce8:	f7fd fd3c 	bl	8001764 <HAL_GetTick>
 8003cec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf0:	e00b      	b.n	8003d0a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fd fd37 	bl	8001764 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e291      	b.n	800422e <HAL_RCC_OscConfig+0xe02>
 8003d0a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003d0e:	2202      	movs	r2, #2
 8003d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	fa93 f2a3 	rbit	r2, r3
 8003d1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003d26:	2202      	movs	r2, #2
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	fa93 f2a3 	rbit	r2, r3
 8003d34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003d38:	601a      	str	r2, [r3, #0]
  return result;
 8003d3a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003d3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d40:	fab3 f383 	clz	r3, r3
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f043 0302 	orr.w	r3, r3, #2
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d109      	bne.n	8003d68 <HAL_RCC_OscConfig+0x93c>
 8003d54:	4b01      	ldr	r3, [pc, #4]	; (8003d5c <HAL_RCC_OscConfig+0x930>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	e014      	b.n	8003d84 <HAL_RCC_OscConfig+0x958>
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	10908120 	.word	0x10908120
 8003d64:	40007000 	.word	0x40007000
 8003d68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	fa93 f2a3 	rbit	r2, r3
 8003d7a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	4bbb      	ldr	r3, [pc, #748]	; (8004070 <HAL_RCC_OscConfig+0xc44>)
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d88:	2102      	movs	r1, #2
 8003d8a:	6011      	str	r1, [r2, #0]
 8003d8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	fa92 f1a2 	rbit	r1, r2
 8003d96:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d9a:	6011      	str	r1, [r2, #0]
  return result;
 8003d9c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	fab2 f282 	clz	r2, r2
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	f002 021f 	and.w	r2, r2, #31
 8003db2:	2101      	movs	r1, #1
 8003db4:	fa01 f202 	lsl.w	r2, r1, r2
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d099      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x8c6>
 8003dbe:	e063      	b.n	8003e88 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc0:	f7fd fcd0 	bl	8001764 <HAL_GetTick>
 8003dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc8:	e00b      	b.n	8003de2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dca:	f7fd fccb 	bl	8001764 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e225      	b.n	800422e <HAL_RCC_OscConfig+0xe02>
 8003de2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003de6:	2202      	movs	r2, #2
 8003de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	fa93 f2a3 	rbit	r2, r3
 8003df4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003dfe:	2202      	movs	r2, #2
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	fa93 f2a3 	rbit	r2, r3
 8003e0c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e10:	601a      	str	r2, [r3, #0]
  return result;
 8003e12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f043 0302 	orr.w	r3, r3, #2
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d102      	bne.n	8003e32 <HAL_RCC_OscConfig+0xa06>
 8003e2c:	4b90      	ldr	r3, [pc, #576]	; (8004070 <HAL_RCC_OscConfig+0xc44>)
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	e00d      	b.n	8003e4e <HAL_RCC_OscConfig+0xa22>
 8003e32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003e36:	2202      	movs	r2, #2
 8003e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	fa93 f2a3 	rbit	r2, r3
 8003e44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	4b89      	ldr	r3, [pc, #548]	; (8004070 <HAL_RCC_OscConfig+0xc44>)
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e52:	2102      	movs	r1, #2
 8003e54:	6011      	str	r1, [r2, #0]
 8003e56:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	fa92 f1a2 	rbit	r1, r2
 8003e60:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003e64:	6011      	str	r1, [r2, #0]
  return result;
 8003e66:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	fab2 f282 	clz	r2, r2
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	f002 021f 	and.w	r2, r2, #31
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1a0      	bne.n	8003dca <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e88:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d105      	bne.n	8003e9c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e90:	4b77      	ldr	r3, [pc, #476]	; (8004070 <HAL_RCC_OscConfig+0xc44>)
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	4a76      	ldr	r2, [pc, #472]	; (8004070 <HAL_RCC_OscConfig+0xc44>)
 8003e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e9c:	1d3b      	adds	r3, r7, #4
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 81c2 	beq.w	800422c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ea8:	4b71      	ldr	r3, [pc, #452]	; (8004070 <HAL_RCC_OscConfig+0xc44>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	f000 819c 	beq.w	80041ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	f040 8114 	bne.w	80040ea <HAL_RCC_OscConfig+0xcbe>
 8003ec2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ec6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ecc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	fa93 f2a3 	rbit	r2, r3
 8003ed6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003eda:	601a      	str	r2, [r3, #0]
  return result;
 8003edc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ee0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fc34 	bl	8001764 <HAL_GetTick>
 8003efc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f00:	e009      	b.n	8003f16 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f02:	f7fd fc2f 	bl	8001764 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e18b      	b.n	800422e <HAL_RCC_OscConfig+0xe02>
 8003f16:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	fa93 f2a3 	rbit	r2, r3
 8003f2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f2e:	601a      	str	r2, [r3, #0]
  return result;
 8003f30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d102      	bne.n	8003f50 <HAL_RCC_OscConfig+0xb24>
 8003f4a:	4b49      	ldr	r3, [pc, #292]	; (8004070 <HAL_RCC_OscConfig+0xc44>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	e01b      	b.n	8003f88 <HAL_RCC_OscConfig+0xb5c>
 8003f50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	fa93 f2a3 	rbit	r2, r3
 8003f64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	fa93 f2a3 	rbit	r2, r3
 8003f7e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	4b3a      	ldr	r3, [pc, #232]	; (8004070 <HAL_RCC_OscConfig+0xc44>)
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f90:	6011      	str	r1, [r2, #0]
 8003f92:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	fa92 f1a2 	rbit	r1, r2
 8003f9c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003fa0:	6011      	str	r1, [r2, #0]
  return result;
 8003fa2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	fab2 f282 	clz	r2, r2
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	f042 0220 	orr.w	r2, r2, #32
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	f002 021f 	and.w	r2, r2, #31
 8003fb8:	2101      	movs	r1, #1
 8003fba:	fa01 f202 	lsl.w	r2, r1, r2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d19e      	bne.n	8003f02 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <HAL_RCC_OscConfig+0xc44>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fd2:	1d3b      	adds	r3, r7, #4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	4925      	ldr	r1, [pc, #148]	; (8004070 <HAL_RCC_OscConfig+0xc44>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
 8003fe0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	fa93 f2a3 	rbit	r2, r3
 8003ff4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ff8:	601a      	str	r2, [r3, #0]
  return result;
 8003ffa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ffe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004000:	fab3 f383 	clz	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800400a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	461a      	mov	r2, r3
 8004012:	2301      	movs	r3, #1
 8004014:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004016:	f7fd fba5 	bl	8001764 <HAL_GetTick>
 800401a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800401e:	e009      	b.n	8004034 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd fba0 	bl	8001764 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e0fc      	b.n	800422e <HAL_RCC_OscConfig+0xe02>
 8004034:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800403c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	fa93 f2a3 	rbit	r2, r3
 8004048:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800404c:	601a      	str	r2, [r3, #0]
  return result;
 800404e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004052:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004054:	fab3 f383 	clz	r3, r3
 8004058:	b2db      	uxtb	r3, r3
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d105      	bne.n	8004074 <HAL_RCC_OscConfig+0xc48>
 8004068:	4b01      	ldr	r3, [pc, #4]	; (8004070 <HAL_RCC_OscConfig+0xc44>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	e01e      	b.n	80040ac <HAL_RCC_OscConfig+0xc80>
 800406e:	bf00      	nop
 8004070:	40021000 	.word	0x40021000
 8004074:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800407c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	fa93 f2a3 	rbit	r2, r3
 8004088:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004092:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	fa93 f2a3 	rbit	r2, r3
 80040a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	4b63      	ldr	r3, [pc, #396]	; (8004238 <HAL_RCC_OscConfig+0xe0c>)
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040b4:	6011      	str	r1, [r2, #0]
 80040b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	fa92 f1a2 	rbit	r1, r2
 80040c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80040c4:	6011      	str	r1, [r2, #0]
  return result;
 80040c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	fab2 f282 	clz	r2, r2
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	f042 0220 	orr.w	r2, r2, #32
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	f002 021f 	and.w	r2, r2, #31
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f202 	lsl.w	r2, r1, r2
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d09b      	beq.n	8004020 <HAL_RCC_OscConfig+0xbf4>
 80040e8:	e0a0      	b.n	800422c <HAL_RCC_OscConfig+0xe00>
 80040ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	fa93 f2a3 	rbit	r2, r3
 80040fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004102:	601a      	str	r2, [r3, #0]
  return result;
 8004104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004108:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410a:	fab3 f383 	clz	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004114:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	461a      	mov	r2, r3
 800411c:	2300      	movs	r3, #0
 800411e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fd fb20 	bl	8001764 <HAL_GetTick>
 8004124:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004128:	e009      	b.n	800413e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412a:	f7fd fb1b 	bl	8001764 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e077      	b.n	800422e <HAL_RCC_OscConfig+0xe02>
 800413e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004142:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	fa93 f2a3 	rbit	r2, r3
 8004152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004156:	601a      	str	r2, [r3, #0]
  return result;
 8004158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800415c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d102      	bne.n	8004178 <HAL_RCC_OscConfig+0xd4c>
 8004172:	4b31      	ldr	r3, [pc, #196]	; (8004238 <HAL_RCC_OscConfig+0xe0c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	e01b      	b.n	80041b0 <HAL_RCC_OscConfig+0xd84>
 8004178:	f107 0320 	add.w	r3, r7, #32
 800417c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	f107 0320 	add.w	r3, r7, #32
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	fa93 f2a3 	rbit	r2, r3
 800418c:	f107 031c 	add.w	r3, r7, #28
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f107 0318 	add.w	r3, r7, #24
 8004196:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	f107 0318 	add.w	r3, r7, #24
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	fa93 f2a3 	rbit	r2, r3
 80041a6:	f107 0314 	add.w	r3, r7, #20
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_RCC_OscConfig+0xe0c>)
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	f107 0210 	add.w	r2, r7, #16
 80041b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041b8:	6011      	str	r1, [r2, #0]
 80041ba:	f107 0210 	add.w	r2, r7, #16
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	fa92 f1a2 	rbit	r1, r2
 80041c4:	f107 020c 	add.w	r2, r7, #12
 80041c8:	6011      	str	r1, [r2, #0]
  return result;
 80041ca:	f107 020c 	add.w	r2, r7, #12
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	fab2 f282 	clz	r2, r2
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	f042 0220 	orr.w	r2, r2, #32
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	f002 021f 	and.w	r2, r2, #31
 80041e0:	2101      	movs	r1, #1
 80041e2:	fa01 f202 	lsl.w	r2, r1, r2
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d19e      	bne.n	800412a <HAL_RCC_OscConfig+0xcfe>
 80041ec:	e01e      	b.n	800422c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ee:	1d3b      	adds	r3, r7, #4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e018      	b.n	800422e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041fc:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <HAL_RCC_OscConfig+0xe0c>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004204:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004208:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800420c:	1d3b      	adds	r3, r7, #4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	429a      	cmp	r2, r3
 8004214:	d108      	bne.n	8004228 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004216:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800421a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000

0800423c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b09e      	sub	sp, #120	; 0x78
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e162      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b90      	ldr	r3, [pc, #576]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d910      	bls.n	8004284 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b8d      	ldr	r3, [pc, #564]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 0207 	bic.w	r2, r3, #7
 800426a:	498b      	ldr	r1, [pc, #556]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b89      	ldr	r3, [pc, #548]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e14a      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004290:	4b82      	ldr	r3, [pc, #520]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	497f      	ldr	r1, [pc, #508]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80dc 	beq.w	8004468 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d13c      	bne.n	8004332 <HAL_RCC_ClockConfig+0xf6>
 80042b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d102      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xa6>
 80042dc:	4b6f      	ldr	r3, [pc, #444]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	e00f      	b.n	8004302 <HAL_RCC_ClockConfig+0xc6>
 80042e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	667b      	str	r3, [r7, #100]	; 0x64
 80042f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f4:	663b      	str	r3, [r7, #96]	; 0x60
 80042f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042fe:	4b67      	ldr	r3, [pc, #412]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004306:	65ba      	str	r2, [r7, #88]	; 0x58
 8004308:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800430a:	fa92 f2a2 	rbit	r2, r2
 800430e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004310:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004312:	fab2 f282 	clz	r2, r2
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	f042 0220 	orr.w	r2, r2, #32
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	f002 021f 	and.w	r2, r2, #31
 8004322:	2101      	movs	r1, #1
 8004324:	fa01 f202 	lsl.w	r2, r1, r2
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d17b      	bne.n	8004426 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0f3      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d13c      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x178>
 800433a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434a:	fab3 f383 	clz	r3, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	b2db      	uxtb	r3, r3
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b01      	cmp	r3, #1
 800435c:	d102      	bne.n	8004364 <HAL_RCC_ClockConfig+0x128>
 800435e:	4b4f      	ldr	r3, [pc, #316]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	e00f      	b.n	8004384 <HAL_RCC_ClockConfig+0x148>
 8004364:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004368:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800436c:	fa93 f3a3 	rbit	r3, r3
 8004370:	647b      	str	r3, [r7, #68]	; 0x44
 8004372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004376:	643b      	str	r3, [r7, #64]	; 0x40
 8004378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004380:	4b46      	ldr	r3, [pc, #280]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004388:	63ba      	str	r2, [r7, #56]	; 0x38
 800438a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800438c:	fa92 f2a2 	rbit	r2, r2
 8004390:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004394:	fab2 f282 	clz	r2, r2
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	f042 0220 	orr.w	r2, r2, #32
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	f002 021f 	and.w	r2, r2, #31
 80043a4:	2101      	movs	r1, #1
 80043a6:	fa01 f202 	lsl.w	r2, r1, r2
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d13a      	bne.n	8004426 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0b2      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
 80043b4:	2302      	movs	r3, #2
 80043b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d102      	bne.n	80043dc <HAL_RCC_ClockConfig+0x1a0>
 80043d6:	4b31      	ldr	r3, [pc, #196]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	e00d      	b.n	80043f8 <HAL_RCC_ClockConfig+0x1bc>
 80043dc:	2302      	movs	r3, #2
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
 80043e8:	2302      	movs	r3, #2
 80043ea:	623b      	str	r3, [r7, #32]
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	fa93 f3a3 	rbit	r3, r3
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	4b29      	ldr	r3, [pc, #164]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	2202      	movs	r2, #2
 80043fa:	61ba      	str	r2, [r7, #24]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	fa92 f2a2 	rbit	r2, r2
 8004402:	617a      	str	r2, [r7, #20]
  return result;
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	fab2 f282 	clz	r2, r2
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	f042 0220 	orr.w	r2, r2, #32
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	f002 021f 	and.w	r2, r2, #31
 8004416:	2101      	movs	r1, #1
 8004418:	fa01 f202 	lsl.w	r2, r1, r2
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e079      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004426:	4b1d      	ldr	r3, [pc, #116]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f023 0203 	bic.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	491a      	ldr	r1, [pc, #104]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004438:	f7fd f994 	bl	8001764 <HAL_GetTick>
 800443c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443e:	e00a      	b.n	8004456 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004440:	f7fd f990 	bl	8001764 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f241 3288 	movw	r2, #5000	; 0x1388
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e061      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	4b11      	ldr	r3, [pc, #68]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 020c 	and.w	r2, r3, #12
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	429a      	cmp	r2, r3
 8004466:	d1eb      	bne.n	8004440 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d214      	bcs.n	80044a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 0207 	bic.w	r2, r3, #7
 800447e:	4906      	ldr	r1, [pc, #24]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004486:	4b04      	ldr	r3, [pc, #16]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d005      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e040      	b.n	800451a <HAL_RCC_ClockConfig+0x2de>
 8004498:	40022000 	.word	0x40022000
 800449c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <HAL_RCC_ClockConfig+0x2e8>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	491a      	ldr	r1, [pc, #104]	; (8004524 <HAL_RCC_ClockConfig+0x2e8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ca:	4b16      	ldr	r3, [pc, #88]	; (8004524 <HAL_RCC_ClockConfig+0x2e8>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4912      	ldr	r1, [pc, #72]	; (8004524 <HAL_RCC_ClockConfig+0x2e8>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044de:	f000 f829 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 80044e2:	4601      	mov	r1, r0
 80044e4:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <HAL_RCC_ClockConfig+0x2e8>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ec:	22f0      	movs	r2, #240	; 0xf0
 80044ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	fa92 f2a2 	rbit	r2, r2
 80044f6:	60fa      	str	r2, [r7, #12]
  return result;
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	fab2 f282 	clz	r2, r2
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	40d3      	lsrs	r3, r2
 8004502:	4a09      	ldr	r2, [pc, #36]	; (8004528 <HAL_RCC_ClockConfig+0x2ec>)
 8004504:	5cd3      	ldrb	r3, [r2, r3]
 8004506:	fa21 f303 	lsr.w	r3, r1, r3
 800450a:	4a08      	ldr	r2, [pc, #32]	; (800452c <HAL_RCC_ClockConfig+0x2f0>)
 800450c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_RCC_ClockConfig+0x2f4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd f8e2 	bl	80016dc <HAL_InitTick>
  
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3778      	adds	r7, #120	; 0x78
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	08007308 	.word	0x08007308
 800452c:	20000010 	.word	0x20000010
 8004530:	20000014 	.word	0x20000014

08004534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004534:	b480      	push	{r7}
 8004536:	b08b      	sub	sp, #44	; 0x2c
 8004538:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	2300      	movs	r3, #0
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	2300      	movs	r3, #0
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800454e:	4b29      	ldr	r3, [pc, #164]	; (80045f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	2b04      	cmp	r3, #4
 800455c:	d002      	beq.n	8004564 <HAL_RCC_GetSysClockFreq+0x30>
 800455e:	2b08      	cmp	r3, #8
 8004560:	d003      	beq.n	800456a <HAL_RCC_GetSysClockFreq+0x36>
 8004562:	e03c      	b.n	80045de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004564:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004566:	623b      	str	r3, [r7, #32]
      break;
 8004568:	e03c      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004570:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004574:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	fa92 f2a2 	rbit	r2, r2
 800457c:	607a      	str	r2, [r7, #4]
  return result;
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	fab2 f282 	clz	r2, r2
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	40d3      	lsrs	r3, r2
 8004588:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800458e:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	220f      	movs	r2, #15
 8004598:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	fa92 f2a2 	rbit	r2, r2
 80045a0:	60fa      	str	r2, [r7, #12]
  return result;
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	fab2 f282 	clz	r2, r2
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	40d3      	lsrs	r3, r2
 80045ac:	4a14      	ldr	r2, [pc, #80]	; (8004600 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045ae:	5cd3      	ldrb	r3, [r2, r3]
 80045b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045bc:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fb02 f303 	mul.w	r3, r2, r3
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
 80045cc:	e004      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	623b      	str	r3, [r7, #32]
      break;
 80045dc:	e002      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045e0:	623b      	str	r3, [r7, #32]
      break;
 80045e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e4:	6a3b      	ldr	r3, [r7, #32]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	372c      	adds	r7, #44	; 0x2c
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
 80045f8:	007a1200 	.word	0x007a1200
 80045fc:	08007320 	.word	0x08007320
 8004600:	08007330 	.word	0x08007330
 8004604:	003d0900 	.word	0x003d0900

08004608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800460c:	4b03      	ldr	r3, [pc, #12]	; (800461c <HAL_RCC_GetHCLKFreq+0x14>)
 800460e:	681b      	ldr	r3, [r3, #0]
}
 8004610:	4618      	mov	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	20000010 	.word	0x20000010

08004620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004626:	f7ff ffef 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 800462a:	4601      	mov	r1, r0
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004634:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004638:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	fa92 f2a2 	rbit	r2, r2
 8004640:	603a      	str	r2, [r7, #0]
  return result;
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	fab2 f282 	clz	r2, r2
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	40d3      	lsrs	r3, r2
 800464c:	4a04      	ldr	r2, [pc, #16]	; (8004660 <HAL_RCC_GetPCLK1Freq+0x40>)
 800464e:	5cd3      	ldrb	r3, [r2, r3]
 8004650:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40021000 	.word	0x40021000
 8004660:	08007318 	.word	0x08007318

08004664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800466a:	f7ff ffcd 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 800466e:	4601      	mov	r1, r0
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004678:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800467c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	fa92 f2a2 	rbit	r2, r2
 8004684:	603a      	str	r2, [r7, #0]
  return result;
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	fab2 f282 	clz	r2, r2
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	40d3      	lsrs	r3, r2
 8004690:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004692:	5cd3      	ldrb	r3, [r2, r3]
 8004694:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000
 80046a4:	08007318 	.word	0x08007318

080046a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b092      	sub	sp, #72	; 0x48
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80cd 	beq.w	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046cc:	4b86      	ldr	r3, [pc, #536]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10e      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d8:	4b83      	ldr	r3, [pc, #524]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	4a82      	ldr	r2, [pc, #520]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e2:	61d3      	str	r3, [r2, #28]
 80046e4:	4b80      	ldr	r3, [pc, #512]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f6:	4b7d      	ldr	r3, [pc, #500]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d118      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004702:	4b7a      	ldr	r3, [pc, #488]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a79      	ldr	r2, [pc, #484]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470e:	f7fd f829 	bl	8001764 <HAL_GetTick>
 8004712:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004714:	e008      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004716:	f7fd f825 	bl	8001764 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b64      	cmp	r3, #100	; 0x64
 8004722:	d901      	bls.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e0db      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	4b70      	ldr	r3, [pc, #448]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004734:	4b6c      	ldr	r3, [pc, #432]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800473e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d07d      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800474e:	429a      	cmp	r2, r3
 8004750:	d076      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004752:	4b65      	ldr	r3, [pc, #404]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004760:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	fa93 f3a3 	rbit	r3, r3
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800476c:	fab3 f383 	clz	r3, r3
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	4b5e      	ldr	r3, [pc, #376]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	461a      	mov	r2, r3
 800477c:	2301      	movs	r3, #1
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004784:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	fa93 f3a3 	rbit	r3, r3
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800478e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004790:	fab3 f383 	clz	r3, r3
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	4b55      	ldr	r3, [pc, #340]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	461a      	mov	r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047a4:	4a50      	ldr	r2, [pc, #320]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d045      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b4:	f7fc ffd6 	bl	8001764 <HAL_GetTick>
 80047b8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ba:	e00a      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7fc ffd2 	bl	8001764 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e086      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80047d2:	2302      	movs	r3, #2
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
 80047de:	2302      	movs	r3, #2
 80047e0:	623b      	str	r3, [r7, #32]
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	fa93 f3a3 	rbit	r3, r3
 80047e8:	61fb      	str	r3, [r7, #28]
  return result;
 80047ea:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ec:	fab3 f383 	clz	r3, r3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f043 0302 	orr.w	r3, r3, #2
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d102      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004800:	4b39      	ldr	r3, [pc, #228]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	e007      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004806:	2302      	movs	r3, #2
 8004808:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	fa93 f3a3 	rbit	r3, r3
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	4b35      	ldr	r3, [pc, #212]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2202      	movs	r2, #2
 8004818:	613a      	str	r2, [r7, #16]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	fa92 f2a2 	rbit	r2, r2
 8004820:	60fa      	str	r2, [r7, #12]
  return result;
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	fab2 f282 	clz	r2, r2
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	f002 021f 	and.w	r2, r2, #31
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f202 	lsl.w	r2, r1, r2
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0bd      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004840:	4b29      	ldr	r3, [pc, #164]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4926      	ldr	r1, [pc, #152]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800484e:	4313      	orrs	r3, r2
 8004850:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004852:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004856:	2b01      	cmp	r3, #1
 8004858:	d105      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485a:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	4a22      	ldr	r2, [pc, #136]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004864:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d008      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004872:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	f023 0203 	bic.w	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	491a      	ldr	r1, [pc, #104]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004880:	4313      	orrs	r3, r2
 8004882:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004890:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	f023 0210 	bic.w	r2, r3, #16
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4912      	ldr	r1, [pc, #72]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048ae:	4b0e      	ldr	r3, [pc, #56]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	490b      	ldr	r1, [pc, #44]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	4903      	ldr	r1, [pc, #12]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3748      	adds	r7, #72	; 0x48
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40007000 	.word	0x40007000
 80048f0:	10908100 	.word	0x10908100

080048f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e049      	b.n	800499a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc fcee 	bl	80012fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f000 fe8a 	bl	800564c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d001      	beq.n	80049bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e038      	b.n	8004a2e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <HAL_TIM_Base_Start+0x98>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_TIM_Base_Start+0x48>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d6:	d009      	beq.n	80049ec <HAL_TIM_Base_Start+0x48>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <HAL_TIM_Base_Start+0x9c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_TIM_Base_Start+0x48>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a17      	ldr	r2, [pc, #92]	; (8004a44 <HAL_TIM_Base_Start+0xa0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d115      	bne.n	8004a18 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <HAL_TIM_Base_Start+0xa4>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d015      	beq.n	8004a2a <HAL_TIM_Base_Start+0x86>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a04:	d011      	beq.n	8004a2a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a16:	e008      	b.n	8004a2a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	e000      	b.n	8004a2c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40012c00 	.word	0x40012c00
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40014000 	.word	0x40014000
 8004a48:	00010007 	.word	0x00010007

08004a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d001      	beq.n	8004a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e040      	b.n	8004ae6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <HAL_TIM_Base_Start_IT+0xa8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00e      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x58>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8e:	d009      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x58>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <HAL_TIM_Base_Start_IT+0xac>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x58>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a17      	ldr	r2, [pc, #92]	; (8004afc <HAL_TIM_Base_Start_IT+0xb0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d115      	bne.n	8004ad0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <HAL_TIM_Base_Start_IT+0xb4>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b06      	cmp	r3, #6
 8004ab4:	d015      	beq.n	8004ae2 <HAL_TIM_Base_Start_IT+0x96>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abc:	d011      	beq.n	8004ae2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0201 	orr.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ace:	e008      	b.n	8004ae2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e000      	b.n	8004ae4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40014000 	.word	0x40014000
 8004b00:	00010007 	.word	0x00010007

08004b04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e049      	b.n	8004baa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f841 	bl	8004bb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4619      	mov	r1, r3
 8004b42:	4610      	mov	r0, r2
 8004b44:	f000 fd82 	bl	800564c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <HAL_TIM_PWM_Start+0x24>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	bf14      	ite	ne
 8004be4:	2301      	movne	r3, #1
 8004be6:	2300      	moveq	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	e03c      	b.n	8004c66 <HAL_TIM_PWM_Start+0x9e>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d109      	bne.n	8004c06 <HAL_TIM_PWM_Start+0x3e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	bf14      	ite	ne
 8004bfe:	2301      	movne	r3, #1
 8004c00:	2300      	moveq	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	e02f      	b.n	8004c66 <HAL_TIM_PWM_Start+0x9e>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d109      	bne.n	8004c20 <HAL_TIM_PWM_Start+0x58>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	bf14      	ite	ne
 8004c18:	2301      	movne	r3, #1
 8004c1a:	2300      	moveq	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e022      	b.n	8004c66 <HAL_TIM_PWM_Start+0x9e>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b0c      	cmp	r3, #12
 8004c24:	d109      	bne.n	8004c3a <HAL_TIM_PWM_Start+0x72>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	e015      	b.n	8004c66 <HAL_TIM_PWM_Start+0x9e>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d109      	bne.n	8004c54 <HAL_TIM_PWM_Start+0x8c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e008      	b.n	8004c66 <HAL_TIM_PWM_Start+0x9e>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e088      	b.n	8004d80 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <HAL_TIM_PWM_Start+0xb6>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c7c:	e023      	b.n	8004cc6 <HAL_TIM_PWM_Start+0xfe>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d104      	bne.n	8004c8e <HAL_TIM_PWM_Start+0xc6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c8c:	e01b      	b.n	8004cc6 <HAL_TIM_PWM_Start+0xfe>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_PWM_Start+0xd6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c9c:	e013      	b.n	8004cc6 <HAL_TIM_PWM_Start+0xfe>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	d104      	bne.n	8004cae <HAL_TIM_PWM_Start+0xe6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cac:	e00b      	b.n	8004cc6 <HAL_TIM_PWM_Start+0xfe>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d104      	bne.n	8004cbe <HAL_TIM_PWM_Start+0xf6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cbc:	e003      	b.n	8004cc6 <HAL_TIM_PWM_Start+0xfe>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	6839      	ldr	r1, [r7, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 f874 	bl	8005dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a2b      	ldr	r2, [pc, #172]	; (8004d88 <HAL_TIM_PWM_Start+0x1c0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <HAL_TIM_PWM_Start+0x134>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2a      	ldr	r2, [pc, #168]	; (8004d8c <HAL_TIM_PWM_Start+0x1c4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <HAL_TIM_PWM_Start+0x134>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a28      	ldr	r2, [pc, #160]	; (8004d90 <HAL_TIM_PWM_Start+0x1c8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIM_PWM_Start+0x134>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a27      	ldr	r2, [pc, #156]	; (8004d94 <HAL_TIM_PWM_Start+0x1cc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIM_PWM_Start+0x138>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <HAL_TIM_PWM_Start+0x13a>
 8004d00:	2300      	movs	r3, #0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <HAL_TIM_PWM_Start+0x1c0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_TIM_PWM_Start+0x176>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d28:	d009      	beq.n	8004d3e <HAL_TIM_PWM_Start+0x176>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1a      	ldr	r2, [pc, #104]	; (8004d98 <HAL_TIM_PWM_Start+0x1d0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_TIM_PWM_Start+0x176>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <HAL_TIM_PWM_Start+0x1c4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d115      	bne.n	8004d6a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <HAL_TIM_PWM_Start+0x1d4>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b06      	cmp	r3, #6
 8004d4e:	d015      	beq.n	8004d7c <HAL_TIM_PWM_Start+0x1b4>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d56:	d011      	beq.n	8004d7c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d68:	e008      	b.n	8004d7c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0201 	orr.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e000      	b.n	8004d7e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40012c00 	.word	0x40012c00
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40014400 	.word	0x40014400
 8004d94:	40014800 	.word	0x40014800
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	00010007 	.word	0x00010007

08004da0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_TIM_PWM_Start_IT+0x28>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e03c      	b.n	8004e42 <HAL_TIM_PWM_Start_IT+0xa2>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d109      	bne.n	8004de2 <HAL_TIM_PWM_Start_IT+0x42>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	bf14      	ite	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	2300      	moveq	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	e02f      	b.n	8004e42 <HAL_TIM_PWM_Start_IT+0xa2>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d109      	bne.n	8004dfc <HAL_TIM_PWM_Start_IT+0x5c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	bf14      	ite	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	2300      	moveq	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	e022      	b.n	8004e42 <HAL_TIM_PWM_Start_IT+0xa2>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d109      	bne.n	8004e16 <HAL_TIM_PWM_Start_IT+0x76>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	bf14      	ite	ne
 8004e0e:	2301      	movne	r3, #1
 8004e10:	2300      	moveq	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	e015      	b.n	8004e42 <HAL_TIM_PWM_Start_IT+0xa2>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d109      	bne.n	8004e30 <HAL_TIM_PWM_Start_IT+0x90>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	e008      	b.n	8004e42 <HAL_TIM_PWM_Start_IT+0xa2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	bf14      	ite	ne
 8004e3c:	2301      	movne	r3, #1
 8004e3e:	2300      	moveq	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e0d3      	b.n	8004ff2 <HAL_TIM_PWM_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_PWM_Start_IT+0xba>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e58:	e023      	b.n	8004ea2 <HAL_TIM_PWM_Start_IT+0x102>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_PWM_Start_IT+0xca>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e68:	e01b      	b.n	8004ea2 <HAL_TIM_PWM_Start_IT+0x102>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_PWM_Start_IT+0xda>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e78:	e013      	b.n	8004ea2 <HAL_TIM_PWM_Start_IT+0x102>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	d104      	bne.n	8004e8a <HAL_TIM_PWM_Start_IT+0xea>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e88:	e00b      	b.n	8004ea2 <HAL_TIM_PWM_Start_IT+0x102>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d104      	bne.n	8004e9a <HAL_TIM_PWM_Start_IT+0xfa>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e98:	e003      	b.n	8004ea2 <HAL_TIM_PWM_Start_IT+0x102>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	d841      	bhi.n	8004f2c <HAL_TIM_PWM_Start_IT+0x18c>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <HAL_TIM_PWM_Start_IT+0x110>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ee5 	.word	0x08004ee5
 8004eb4:	08004f2d 	.word	0x08004f2d
 8004eb8:	08004f2d 	.word	0x08004f2d
 8004ebc:	08004f2d 	.word	0x08004f2d
 8004ec0:	08004ef7 	.word	0x08004ef7
 8004ec4:	08004f2d 	.word	0x08004f2d
 8004ec8:	08004f2d 	.word	0x08004f2d
 8004ecc:	08004f2d 	.word	0x08004f2d
 8004ed0:	08004f09 	.word	0x08004f09
 8004ed4:	08004f2d 	.word	0x08004f2d
 8004ed8:	08004f2d 	.word	0x08004f2d
 8004edc:	08004f2d 	.word	0x08004f2d
 8004ee0:	08004f1b 	.word	0x08004f1b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0202 	orr.w	r2, r2, #2
 8004ef2:	60da      	str	r2, [r3, #12]
      break;
 8004ef4:	e01d      	b.n	8004f32 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 0204 	orr.w	r2, r2, #4
 8004f04:	60da      	str	r2, [r3, #12]
      break;
 8004f06:	e014      	b.n	8004f32 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0208 	orr.w	r2, r2, #8
 8004f16:	60da      	str	r2, [r3, #12]
      break;
 8004f18:	e00b      	b.n	8004f32 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0210 	orr.w	r2, r2, #16
 8004f28:	60da      	str	r2, [r3, #12]
      break;
 8004f2a:	e002      	b.n	8004f32 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f30:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d15b      	bne.n	8004ff0 <HAL_TIM_PWM_Start_IT+0x250>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	6839      	ldr	r1, [r7, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 ff3b 	bl	8005dbc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2c      	ldr	r2, [pc, #176]	; (8004ffc <HAL_TIM_PWM_Start_IT+0x25c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00e      	beq.n	8004f6e <HAL_TIM_PWM_Start_IT+0x1ce>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a2a      	ldr	r2, [pc, #168]	; (8005000 <HAL_TIM_PWM_Start_IT+0x260>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d009      	beq.n	8004f6e <HAL_TIM_PWM_Start_IT+0x1ce>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a29      	ldr	r2, [pc, #164]	; (8005004 <HAL_TIM_PWM_Start_IT+0x264>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_TIM_PWM_Start_IT+0x1ce>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a27      	ldr	r2, [pc, #156]	; (8005008 <HAL_TIM_PWM_Start_IT+0x268>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_PWM_Start_IT+0x1d2>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <HAL_TIM_PWM_Start_IT+0x1d4>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_TIM_PWM_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f86:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <HAL_TIM_PWM_Start_IT+0x25c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00e      	beq.n	8004fb0 <HAL_TIM_PWM_Start_IT+0x210>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9a:	d009      	beq.n	8004fb0 <HAL_TIM_PWM_Start_IT+0x210>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1a      	ldr	r2, [pc, #104]	; (800500c <HAL_TIM_PWM_Start_IT+0x26c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_TIM_PWM_Start_IT+0x210>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a15      	ldr	r2, [pc, #84]	; (8005000 <HAL_TIM_PWM_Start_IT+0x260>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d115      	bne.n	8004fdc <HAL_TIM_PWM_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	4b16      	ldr	r3, [pc, #88]	; (8005010 <HAL_TIM_PWM_Start_IT+0x270>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b06      	cmp	r3, #6
 8004fc0:	d015      	beq.n	8004fee <HAL_TIM_PWM_Start_IT+0x24e>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc8:	d011      	beq.n	8004fee <HAL_TIM_PWM_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0201 	orr.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fda:	e008      	b.n	8004fee <HAL_TIM_PWM_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e000      	b.n	8004ff0 <HAL_TIM_PWM_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fee:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40014000 	.word	0x40014000
 8005004:	40014400 	.word	0x40014400
 8005008:	40014800 	.word	0x40014800
 800500c:	40000400 	.word	0x40000400
 8005010:	00010007 	.word	0x00010007

08005014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d122      	bne.n	8005070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b02      	cmp	r3, #2
 8005036:	d11b      	bne.n	8005070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0202 	mvn.w	r2, #2
 8005040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fae3 	bl	8005622 <HAL_TIM_IC_CaptureCallback>
 800505c:	e005      	b.n	800506a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fad5 	bl	800560e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7fb f93f 	bl	80002e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b04      	cmp	r3, #4
 800507c:	d122      	bne.n	80050c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b04      	cmp	r3, #4
 800508a:	d11b      	bne.n	80050c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0204 	mvn.w	r2, #4
 8005094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2202      	movs	r2, #2
 800509a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fab9 	bl	8005622 <HAL_TIM_IC_CaptureCallback>
 80050b0:	e005      	b.n	80050be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 faab 	bl	800560e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fb f915 	bl	80002e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d122      	bne.n	8005118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d11b      	bne.n	8005118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0208 	mvn.w	r2, #8
 80050e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2204      	movs	r2, #4
 80050ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fa8f 	bl	8005622 <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fa81 	bl	800560e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7fb f8eb 	bl	80002e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b10      	cmp	r3, #16
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b10      	cmp	r3, #16
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0210 	mvn.w	r2, #16
 800513c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2208      	movs	r2, #8
 8005142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa65 	bl	8005622 <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fa57 	bl	800560e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7fb f8c1 	bl	80002e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10e      	bne.n	8005198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b01      	cmp	r3, #1
 8005186:	d107      	bne.n	8005198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0201 	mvn.w	r2, #1
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fb f880 	bl	8000298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d10e      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b0:	2b80      	cmp	r3, #128	; 0x80
 80051b2:	d107      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 ff12 	bl	8005fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d2:	d10e      	bne.n	80051f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b80      	cmp	r3, #128	; 0x80
 80051e0:	d107      	bne.n	80051f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 ff05 	bl	8005ffc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fc:	2b40      	cmp	r3, #64	; 0x40
 80051fe:	d10e      	bne.n	800521e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	d107      	bne.n	800521e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fa0c 	bl	8005636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b20      	cmp	r3, #32
 800522a:	d10e      	bne.n	800524a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b20      	cmp	r3, #32
 8005238:	d107      	bne.n	800524a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f06f 0220 	mvn.w	r2, #32
 8005242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fec5 	bl	8005fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800526e:	2302      	movs	r3, #2
 8005270:	e0ff      	b.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b14      	cmp	r3, #20
 800527e:	f200 80f0 	bhi.w	8005462 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052dd 	.word	0x080052dd
 800528c:	08005463 	.word	0x08005463
 8005290:	08005463 	.word	0x08005463
 8005294:	08005463 	.word	0x08005463
 8005298:	0800531d 	.word	0x0800531d
 800529c:	08005463 	.word	0x08005463
 80052a0:	08005463 	.word	0x08005463
 80052a4:	08005463 	.word	0x08005463
 80052a8:	0800535f 	.word	0x0800535f
 80052ac:	08005463 	.word	0x08005463
 80052b0:	08005463 	.word	0x08005463
 80052b4:	08005463 	.word	0x08005463
 80052b8:	0800539f 	.word	0x0800539f
 80052bc:	08005463 	.word	0x08005463
 80052c0:	08005463 	.word	0x08005463
 80052c4:	08005463 	.word	0x08005463
 80052c8:	080053e1 	.word	0x080053e1
 80052cc:	08005463 	.word	0x08005463
 80052d0:	08005463 	.word	0x08005463
 80052d4:	08005463 	.word	0x08005463
 80052d8:	08005421 	.word	0x08005421
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fa2a 	bl	800573c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0208 	orr.w	r2, r2, #8
 80052f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0204 	bic.w	r2, r2, #4
 8005306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6999      	ldr	r1, [r3, #24]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	619a      	str	r2, [r3, #24]
      break;
 800531a:	e0a5      	b.n	8005468 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fa90 	bl	8005848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6999      	ldr	r1, [r3, #24]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	021a      	lsls	r2, r3, #8
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	619a      	str	r2, [r3, #24]
      break;
 800535c:	e084      	b.n	8005468 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	4618      	mov	r0, r3
 8005366:	f000 faef 	bl	8005948 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0208 	orr.w	r2, r2, #8
 8005378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69da      	ldr	r2, [r3, #28]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0204 	bic.w	r2, r2, #4
 8005388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69d9      	ldr	r1, [r3, #28]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	61da      	str	r2, [r3, #28]
      break;
 800539c:	e064      	b.n	8005468 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fb4d 	bl	8005a44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69da      	ldr	r2, [r3, #28]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69da      	ldr	r2, [r3, #28]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69d9      	ldr	r1, [r3, #28]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	021a      	lsls	r2, r3, #8
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	61da      	str	r2, [r3, #28]
      break;
 80053de:	e043      	b.n	8005468 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fb90 	bl	8005b0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0208 	orr.w	r2, r2, #8
 80053fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0204 	bic.w	r2, r2, #4
 800540a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800541e:	e023      	b.n	8005468 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fbce 	bl	8005bc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800543a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	021a      	lsls	r2, r3, #8
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005460:	e002      	b.n	8005468 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	75fb      	strb	r3, [r7, #23]
      break;
 8005466:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005470:	7dfb      	ldrb	r3, [r7, #23]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop

0800547c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_TIM_ConfigClockSource+0x1c>
 8005494:	2302      	movs	r3, #2
 8005496:	e0b6      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x18a>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d4:	d03e      	beq.n	8005554 <HAL_TIM_ConfigClockSource+0xd8>
 80054d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054da:	f200 8087 	bhi.w	80055ec <HAL_TIM_ConfigClockSource+0x170>
 80054de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e2:	f000 8086 	beq.w	80055f2 <HAL_TIM_ConfigClockSource+0x176>
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ea:	d87f      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x170>
 80054ec:	2b70      	cmp	r3, #112	; 0x70
 80054ee:	d01a      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0xaa>
 80054f0:	2b70      	cmp	r3, #112	; 0x70
 80054f2:	d87b      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x170>
 80054f4:	2b60      	cmp	r3, #96	; 0x60
 80054f6:	d050      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x11e>
 80054f8:	2b60      	cmp	r3, #96	; 0x60
 80054fa:	d877      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x170>
 80054fc:	2b50      	cmp	r3, #80	; 0x50
 80054fe:	d03c      	beq.n	800557a <HAL_TIM_ConfigClockSource+0xfe>
 8005500:	2b50      	cmp	r3, #80	; 0x50
 8005502:	d873      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x170>
 8005504:	2b40      	cmp	r3, #64	; 0x40
 8005506:	d058      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x13e>
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d86f      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x170>
 800550c:	2b30      	cmp	r3, #48	; 0x30
 800550e:	d064      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15e>
 8005510:	2b30      	cmp	r3, #48	; 0x30
 8005512:	d86b      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x170>
 8005514:	2b20      	cmp	r3, #32
 8005516:	d060      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15e>
 8005518:	2b20      	cmp	r3, #32
 800551a:	d867      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x170>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d05c      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15e>
 8005520:	2b10      	cmp	r3, #16
 8005522:	d05a      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15e>
 8005524:	e062      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6899      	ldr	r1, [r3, #8]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f000 fc21 	bl	8005d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005548:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	609a      	str	r2, [r3, #8]
      break;
 8005552:	e04f      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	6899      	ldr	r1, [r3, #8]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f000 fc0a 	bl	8005d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005576:	609a      	str	r2, [r3, #8]
      break;
 8005578:	e03c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	461a      	mov	r2, r3
 8005588:	f000 fb7e 	bl	8005c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2150      	movs	r1, #80	; 0x50
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fbd7 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 8005598:	e02c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f000 fb9d 	bl	8005ce6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2160      	movs	r1, #96	; 0x60
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fbc7 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 80055b8:	e01c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6859      	ldr	r1, [r3, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f000 fb5e 	bl	8005c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2140      	movs	r1, #64	; 0x40
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fbb7 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 80055d8:	e00c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f000 fbae 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 80055ea:	e003      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
      break;
 80055f0:	e000      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80055f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a32      	ldr	r2, [pc, #200]	; (8005728 <TIM_Base_SetConfig+0xdc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_Base_SetConfig+0x28>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0x28>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a2f      	ldr	r2, [pc, #188]	; (800572c <TIM_Base_SetConfig+0xe0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d108      	bne.n	8005686 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a27      	ldr	r2, [pc, #156]	; (8005728 <TIM_Base_SetConfig+0xdc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <TIM_Base_SetConfig+0x6a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005694:	d00f      	beq.n	80056b6 <TIM_Base_SetConfig+0x6a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a24      	ldr	r2, [pc, #144]	; (800572c <TIM_Base_SetConfig+0xe0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00b      	beq.n	80056b6 <TIM_Base_SetConfig+0x6a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a23      	ldr	r2, [pc, #140]	; (8005730 <TIM_Base_SetConfig+0xe4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d007      	beq.n	80056b6 <TIM_Base_SetConfig+0x6a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a22      	ldr	r2, [pc, #136]	; (8005734 <TIM_Base_SetConfig+0xe8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d003      	beq.n	80056b6 <TIM_Base_SetConfig+0x6a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a21      	ldr	r2, [pc, #132]	; (8005738 <TIM_Base_SetConfig+0xec>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d108      	bne.n	80056c8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a0e      	ldr	r2, [pc, #56]	; (8005728 <TIM_Base_SetConfig+0xdc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0xc0>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a0e      	ldr	r2, [pc, #56]	; (8005730 <TIM_Base_SetConfig+0xe4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0xc0>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <TIM_Base_SetConfig+0xe8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0xc0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a0c      	ldr	r2, [pc, #48]	; (8005738 <TIM_Base_SetConfig+0xec>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d103      	bne.n	8005714 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	615a      	str	r2, [r3, #20]
}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40000400 	.word	0x40000400
 8005730:	40014000 	.word	0x40014000
 8005734:	40014400 	.word	0x40014400
 8005738:	40014800 	.word	0x40014800

0800573c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f023 0201 	bic.w	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f023 0302 	bic.w	r3, r3, #2
 8005788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a28      	ldr	r2, [pc, #160]	; (8005838 <TIM_OC1_SetConfig+0xfc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00b      	beq.n	80057b4 <TIM_OC1_SetConfig+0x78>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a27      	ldr	r2, [pc, #156]	; (800583c <TIM_OC1_SetConfig+0x100>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d007      	beq.n	80057b4 <TIM_OC1_SetConfig+0x78>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a26      	ldr	r2, [pc, #152]	; (8005840 <TIM_OC1_SetConfig+0x104>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d003      	beq.n	80057b4 <TIM_OC1_SetConfig+0x78>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a25      	ldr	r2, [pc, #148]	; (8005844 <TIM_OC1_SetConfig+0x108>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d10c      	bne.n	80057ce <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f023 0308 	bic.w	r3, r3, #8
 80057ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 0304 	bic.w	r3, r3, #4
 80057cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a19      	ldr	r2, [pc, #100]	; (8005838 <TIM_OC1_SetConfig+0xfc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00b      	beq.n	80057ee <TIM_OC1_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a18      	ldr	r2, [pc, #96]	; (800583c <TIM_OC1_SetConfig+0x100>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d007      	beq.n	80057ee <TIM_OC1_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a17      	ldr	r2, [pc, #92]	; (8005840 <TIM_OC1_SetConfig+0x104>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d003      	beq.n	80057ee <TIM_OC1_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a16      	ldr	r2, [pc, #88]	; (8005844 <TIM_OC1_SetConfig+0x108>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d111      	bne.n	8005812 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	621a      	str	r2, [r3, #32]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400
 8005844:	40014800 	.word	0x40014800

08005848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f023 0210 	bic.w	r2, r3, #16
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f023 0320 	bic.w	r3, r3, #32
 8005896:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a24      	ldr	r2, [pc, #144]	; (8005938 <TIM_OC2_SetConfig+0xf0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d10d      	bne.n	80058c8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1b      	ldr	r2, [pc, #108]	; (8005938 <TIM_OC2_SetConfig+0xf0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <TIM_OC2_SetConfig+0xa0>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1a      	ldr	r2, [pc, #104]	; (800593c <TIM_OC2_SetConfig+0xf4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_OC2_SetConfig+0xa0>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a19      	ldr	r2, [pc, #100]	; (8005940 <TIM_OC2_SetConfig+0xf8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_OC2_SetConfig+0xa0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a18      	ldr	r2, [pc, #96]	; (8005944 <TIM_OC2_SetConfig+0xfc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d113      	bne.n	8005910 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ee:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058f6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800

08005948 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a23      	ldr	r2, [pc, #140]	; (8005a34 <TIM_OC3_SetConfig+0xec>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d10d      	bne.n	80059c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059c4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1a      	ldr	r2, [pc, #104]	; (8005a34 <TIM_OC3_SetConfig+0xec>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00b      	beq.n	80059e6 <TIM_OC3_SetConfig+0x9e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a19      	ldr	r2, [pc, #100]	; (8005a38 <TIM_OC3_SetConfig+0xf0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d007      	beq.n	80059e6 <TIM_OC3_SetConfig+0x9e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <TIM_OC3_SetConfig+0xf4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_OC3_SetConfig+0x9e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <TIM_OC3_SetConfig+0xf8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d113      	bne.n	8005a0e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	621a      	str	r2, [r3, #32]
}
 8005a28:	bf00      	nop
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	40012c00 	.word	0x40012c00
 8005a38:	40014000 	.word	0x40014000
 8005a3c:	40014400 	.word	0x40014400
 8005a40:	40014800 	.word	0x40014800

08005a44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	031b      	lsls	r3, r3, #12
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a16      	ldr	r2, [pc, #88]	; (8005afc <TIM_OC4_SetConfig+0xb8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00b      	beq.n	8005ac0 <TIM_OC4_SetConfig+0x7c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a15      	ldr	r2, [pc, #84]	; (8005b00 <TIM_OC4_SetConfig+0xbc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <TIM_OC4_SetConfig+0x7c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a14      	ldr	r2, [pc, #80]	; (8005b04 <TIM_OC4_SetConfig+0xc0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <TIM_OC4_SetConfig+0x7c>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a13      	ldr	r2, [pc, #76]	; (8005b08 <TIM_OC4_SetConfig+0xc4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d109      	bne.n	8005ad4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	019b      	lsls	r3, r3, #6
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	621a      	str	r2, [r3, #32]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40014000 	.word	0x40014000
 8005b04:	40014400 	.word	0x40014400
 8005b08:	40014800 	.word	0x40014800

08005b0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	041b      	lsls	r3, r3, #16
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <TIM_OC5_SetConfig+0xac>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00b      	beq.n	8005b7e <TIM_OC5_SetConfig+0x72>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a14      	ldr	r2, [pc, #80]	; (8005bbc <TIM_OC5_SetConfig+0xb0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d007      	beq.n	8005b7e <TIM_OC5_SetConfig+0x72>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <TIM_OC5_SetConfig+0xb4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_OC5_SetConfig+0x72>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a12      	ldr	r2, [pc, #72]	; (8005bc4 <TIM_OC5_SetConfig+0xb8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d109      	bne.n	8005b92 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	621a      	str	r2, [r3, #32]
}
 8005bac:	bf00      	nop
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	40012c00 	.word	0x40012c00
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	40014800 	.word	0x40014800

08005bc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	051b      	lsls	r3, r3, #20
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a16      	ldr	r2, [pc, #88]	; (8005c78 <TIM_OC6_SetConfig+0xb0>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00b      	beq.n	8005c3c <TIM_OC6_SetConfig+0x74>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <TIM_OC6_SetConfig+0xb4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_OC6_SetConfig+0x74>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a14      	ldr	r2, [pc, #80]	; (8005c80 <TIM_OC6_SetConfig+0xb8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_OC6_SetConfig+0x74>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <TIM_OC6_SetConfig+0xbc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d109      	bne.n	8005c50 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	029b      	lsls	r3, r3, #10
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40014000 	.word	0x40014000
 8005c80:	40014400 	.word	0x40014400
 8005c84:	40014800 	.word	0x40014800

08005c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0201 	bic.w	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f023 030a 	bic.w	r3, r3, #10
 8005cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	621a      	str	r2, [r3, #32]
}
 8005cda:	bf00      	nop
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b087      	sub	sp, #28
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 0210 	bic.w	r2, r3, #16
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	031b      	lsls	r3, r3, #12
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f043 0307 	orr.w	r3, r3, #7
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	021a      	lsls	r2, r3, #8
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	bf00      	nop
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 031f 	and.w	r3, r3, #31
 8005dce:	2201      	movs	r2, #1
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1a      	ldr	r2, [r3, #32]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	401a      	ands	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1a      	ldr	r2, [r3, #32]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	fa01 f303 	lsl.w	r3, r1, r3
 8005df4:	431a      	orrs	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e054      	b.n	8005eca <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a24      	ldr	r2, [pc, #144]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d108      	bne.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a17      	ldr	r2, [pc, #92]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d00e      	beq.n	8005e9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e88:	d009      	beq.n	8005e9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a13      	ldr	r2, [pc, #76]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d004      	beq.n	8005e9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a11      	ldr	r2, [pc, #68]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d10c      	bne.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40012c00 	.word	0x40012c00
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40014000 	.word	0x40014000

08005ee4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e060      	b.n	8005fc2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	041b      	lsls	r3, r3, #16
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a14      	ldr	r2, [pc, #80]	; (8005fd0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d115      	bne.n	8005fb0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	051b      	lsls	r3, r3, #20
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40012c00 	.word	0x40012c00

08005fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e040      	b.n	80060a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fb fa16 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2224      	movs	r2, #36	; 0x24
 800603c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0201 	bic.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fb78 	bl	8006744 <UART_SetConfig>
 8006054:	4603      	mov	r3, r0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e022      	b.n	80060a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fca2 	bl	80069b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800607a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800608a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fd29 	bl	8006af4 <UART_CheckIdleState>
 80060a2:	4603      	mov	r3, r0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	; 0x28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	4613      	mov	r3, r2
 80060b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d13d      	bne.n	800613e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <HAL_UART_Receive_IT+0x22>
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e036      	b.n	8006140 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_UART_Receive_IT+0x34>
 80060dc:	2302      	movs	r3, #2
 80060de:	e02f      	b.n	8006140 <HAL_UART_Receive_IT+0x94>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d018      	beq.n	800612e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	613b      	str	r3, [r7, #16]
   return(result);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	623b      	str	r3, [r7, #32]
 800611c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	69f9      	ldr	r1, [r7, #28]
 8006120:	6a3a      	ldr	r2, [r7, #32]
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	61bb      	str	r3, [r7, #24]
   return(result);
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e6      	bne.n	80060fc <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	461a      	mov	r2, r3
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 fdeb 	bl	8006d10 <UART_Start_Receive_IT>
 800613a:	4603      	mov	r3, r0
 800613c:	e000      	b.n	8006140 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800613e:	2302      	movs	r3, #2
  }
}
 8006140:	4618      	mov	r0, r3
 8006142:	3728      	adds	r7, #40	; 0x28
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b0ba      	sub	sp, #232	; 0xe8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800616e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006172:	f640 030f 	movw	r3, #2063	; 0x80f
 8006176:	4013      	ands	r3, r2
 8006178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800617c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006180:	2b00      	cmp	r3, #0
 8006182:	d115      	bne.n	80061b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00f      	beq.n	80061b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b00      	cmp	r3, #0
 800619a:	d009      	beq.n	80061b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 82a3 	beq.w	80066ec <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	4798      	blx	r3
      }
      return;
 80061ae:	e29d      	b.n	80066ec <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 8117 	beq.w	80063e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80061ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80061c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061ca:	4b85      	ldr	r3, [pc, #532]	; (80063e0 <HAL_UART_IRQHandler+0x298>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 810a 	beq.w	80063e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d011      	beq.n	8006204 <HAL_UART_IRQHandler+0xbc>
 80061e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00b      	beq.n	8006204 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2201      	movs	r2, #1
 80061f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061fa:	f043 0201 	orr.w	r2, r3, #1
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d011      	beq.n	8006234 <HAL_UART_IRQHandler+0xec>
 8006210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00b      	beq.n	8006234 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2202      	movs	r2, #2
 8006222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800622a:	f043 0204 	orr.w	r2, r3, #4
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	d011      	beq.n	8006264 <HAL_UART_IRQHandler+0x11c>
 8006240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00b      	beq.n	8006264 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2204      	movs	r2, #4
 8006252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800625a:	f043 0202 	orr.w	r2, r3, #2
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006268:	f003 0308 	and.w	r3, r3, #8
 800626c:	2b00      	cmp	r3, #0
 800626e:	d017      	beq.n	80062a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b00      	cmp	r3, #0
 800627a:	d105      	bne.n	8006288 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800627c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006280:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00b      	beq.n	80062a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2208      	movs	r2, #8
 800628e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006296:	f043 0208 	orr.w	r2, r3, #8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d012      	beq.n	80062d2 <HAL_UART_IRQHandler+0x18a>
 80062ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00c      	beq.n	80062d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062c8:	f043 0220 	orr.w	r2, r3, #32
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8209 	beq.w	80066f0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00d      	beq.n	8006306 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800630c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d005      	beq.n	800632a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800631e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006322:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006326:	2b00      	cmp	r3, #0
 8006328:	d04f      	beq.n	80063ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fd9c 	bl	8006e68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633a:	2b40      	cmp	r3, #64	; 0x40
 800633c:	d141      	bne.n	80063c2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3308      	adds	r3, #8
 8006344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800635c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3308      	adds	r3, #8
 8006366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800636a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800636e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1d9      	bne.n	800633e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638e:	2b00      	cmp	r3, #0
 8006390:	d013      	beq.n	80063ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	4a13      	ldr	r2, [pc, #76]	; (80063e4 <HAL_UART_IRQHandler+0x29c>)
 8006398:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fc fd70 	bl	8002e84 <HAL_DMA_Abort_IT>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d017      	beq.n	80063da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80063b4:	4610      	mov	r0, r2
 80063b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b8:	e00f      	b.n	80063da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f9ac 	bl	8006718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c0:	e00b      	b.n	80063da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f9a8 	bl	8006718 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c8:	e007      	b.n	80063da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f9a4 	bl	8006718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80063d8:	e18a      	b.n	80066f0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063da:	bf00      	nop
    return;
 80063dc:	e188      	b.n	80066f0 <HAL_UART_IRQHandler+0x5a8>
 80063de:	bf00      	nop
 80063e0:	04000120 	.word	0x04000120
 80063e4:	08006f2f 	.word	0x08006f2f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	f040 8143 	bne.w	8006678 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f6:	f003 0310 	and.w	r3, r3, #16
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 813c 	beq.w	8006678 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 8135 	beq.w	8006678 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2210      	movs	r2, #16
 8006414:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	f040 80b1 	bne.w	8006588 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006432:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 815c 	beq.w	80066f4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006446:	429a      	cmp	r2, r3
 8006448:	f080 8154 	bcs.w	80066f4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006452:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	2b20      	cmp	r3, #32
 800645e:	f000 8085 	beq.w	800656c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800647a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800647e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800648c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006490:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006498:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1da      	bne.n	8006462 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3308      	adds	r3, #8
 80064b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3308      	adds	r3, #8
 80064cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e1      	bne.n	80064ac <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3308      	adds	r3, #8
 80064ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3308      	adds	r3, #8
 8006508:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800650c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800650e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006512:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800651a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e3      	bne.n	80064e8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800653a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800653c:	f023 0310 	bic.w	r3, r3, #16
 8006540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800654e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006550:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800655c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e4      	bne.n	800652c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006566:	4618      	mov	r0, r3
 8006568:	f7fc fc53 	bl	8002e12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006578:	b29b      	uxth	r3, r3
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	b29b      	uxth	r3, r3
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f8d3 	bl	800672c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006586:	e0b5      	b.n	80066f4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006594:	b29b      	uxth	r3, r3
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80a7 	beq.w	80066f8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80065aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 80a2 	beq.w	80066f8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065d6:	647b      	str	r3, [r7, #68]	; 0x44
 80065d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e4      	bne.n	80065b4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	623b      	str	r3, [r7, #32]
   return(result);
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3308      	adds	r3, #8
 800660a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800660e:	633a      	str	r2, [r7, #48]	; 0x30
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e3      	bne.n	80065ea <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	60fb      	str	r3, [r7, #12]
   return(result);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f023 0310 	bic.w	r3, r3, #16
 8006648:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	69b9      	ldr	r1, [r7, #24]
 800665c:	69fa      	ldr	r2, [r7, #28]
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	617b      	str	r3, [r7, #20]
   return(result);
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e4      	bne.n	8006634 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800666a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f85b 	bl	800672c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006676:	e03f      	b.n	80066f8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00e      	beq.n	80066a2 <HAL_UART_IRQHandler+0x55a>
 8006684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d008      	beq.n	80066a2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006698:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fde3 	bl	8007266 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066a0:	e02d      	b.n	80066fe <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00e      	beq.n	80066cc <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d008      	beq.n	80066cc <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01c      	beq.n	80066fc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	4798      	blx	r3
    }
    return;
 80066ca:	e017      	b.n	80066fc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d012      	beq.n	80066fe <HAL_UART_IRQHandler+0x5b6>
 80066d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00c      	beq.n	80066fe <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fc38 	bl	8006f5a <UART_EndTransmit_IT>
    return;
 80066ea:	e008      	b.n	80066fe <HAL_UART_IRQHandler+0x5b6>
      return;
 80066ec:	bf00      	nop
 80066ee:	e006      	b.n	80066fe <HAL_UART_IRQHandler+0x5b6>
    return;
 80066f0:	bf00      	nop
 80066f2:	e004      	b.n	80066fe <HAL_UART_IRQHandler+0x5b6>
      return;
 80066f4:	bf00      	nop
 80066f6:	e002      	b.n	80066fe <HAL_UART_IRQHandler+0x5b6>
      return;
 80066f8:	bf00      	nop
 80066fa:	e000      	b.n	80066fe <HAL_UART_IRQHandler+0x5b6>
    return;
 80066fc:	bf00      	nop
  }

}
 80066fe:	37e8      	adds	r7, #232	; 0xe8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	4b8a      	ldr	r3, [pc, #552]	; (8006998 <UART_SetConfig+0x254>)
 8006770:	4013      	ands	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6812      	ldr	r2, [r2, #0]
 8006776:	6979      	ldr	r1, [r7, #20]
 8006778:	430b      	orrs	r3, r1
 800677a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a78      	ldr	r2, [pc, #480]	; (800699c <UART_SetConfig+0x258>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d120      	bne.n	8006802 <UART_SetConfig+0xbe>
 80067c0:	4b77      	ldr	r3, [pc, #476]	; (80069a0 <UART_SetConfig+0x25c>)
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d817      	bhi.n	80067fc <UART_SetConfig+0xb8>
 80067cc:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <UART_SetConfig+0x90>)
 80067ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d2:	bf00      	nop
 80067d4:	080067e5 	.word	0x080067e5
 80067d8:	080067f1 	.word	0x080067f1
 80067dc:	080067f7 	.word	0x080067f7
 80067e0:	080067eb 	.word	0x080067eb
 80067e4:	2300      	movs	r3, #0
 80067e6:	77fb      	strb	r3, [r7, #31]
 80067e8:	e01d      	b.n	8006826 <UART_SetConfig+0xe2>
 80067ea:	2302      	movs	r3, #2
 80067ec:	77fb      	strb	r3, [r7, #31]
 80067ee:	e01a      	b.n	8006826 <UART_SetConfig+0xe2>
 80067f0:	2304      	movs	r3, #4
 80067f2:	77fb      	strb	r3, [r7, #31]
 80067f4:	e017      	b.n	8006826 <UART_SetConfig+0xe2>
 80067f6:	2308      	movs	r3, #8
 80067f8:	77fb      	strb	r3, [r7, #31]
 80067fa:	e014      	b.n	8006826 <UART_SetConfig+0xe2>
 80067fc:	2310      	movs	r3, #16
 80067fe:	77fb      	strb	r3, [r7, #31]
 8006800:	e011      	b.n	8006826 <UART_SetConfig+0xe2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a67      	ldr	r2, [pc, #412]	; (80069a4 <UART_SetConfig+0x260>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d102      	bne.n	8006812 <UART_SetConfig+0xce>
 800680c:	2300      	movs	r3, #0
 800680e:	77fb      	strb	r3, [r7, #31]
 8006810:	e009      	b.n	8006826 <UART_SetConfig+0xe2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a64      	ldr	r2, [pc, #400]	; (80069a8 <UART_SetConfig+0x264>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d102      	bne.n	8006822 <UART_SetConfig+0xde>
 800681c:	2300      	movs	r3, #0
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	e001      	b.n	8006826 <UART_SetConfig+0xe2>
 8006822:	2310      	movs	r3, #16
 8006824:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800682e:	d15b      	bne.n	80068e8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006830:	7ffb      	ldrb	r3, [r7, #31]
 8006832:	2b08      	cmp	r3, #8
 8006834:	d827      	bhi.n	8006886 <UART_SetConfig+0x142>
 8006836:	a201      	add	r2, pc, #4	; (adr r2, 800683c <UART_SetConfig+0xf8>)
 8006838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683c:	08006861 	.word	0x08006861
 8006840:	08006869 	.word	0x08006869
 8006844:	08006871 	.word	0x08006871
 8006848:	08006887 	.word	0x08006887
 800684c:	08006877 	.word	0x08006877
 8006850:	08006887 	.word	0x08006887
 8006854:	08006887 	.word	0x08006887
 8006858:	08006887 	.word	0x08006887
 800685c:	0800687f 	.word	0x0800687f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006860:	f7fd fede 	bl	8004620 <HAL_RCC_GetPCLK1Freq>
 8006864:	61b8      	str	r0, [r7, #24]
        break;
 8006866:	e013      	b.n	8006890 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006868:	f7fd fefc 	bl	8004664 <HAL_RCC_GetPCLK2Freq>
 800686c:	61b8      	str	r0, [r7, #24]
        break;
 800686e:	e00f      	b.n	8006890 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006870:	4b4e      	ldr	r3, [pc, #312]	; (80069ac <UART_SetConfig+0x268>)
 8006872:	61bb      	str	r3, [r7, #24]
        break;
 8006874:	e00c      	b.n	8006890 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006876:	f7fd fe5d 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 800687a:	61b8      	str	r0, [r7, #24]
        break;
 800687c:	e008      	b.n	8006890 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800687e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006882:	61bb      	str	r3, [r7, #24]
        break;
 8006884:	e004      	b.n	8006890 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	77bb      	strb	r3, [r7, #30]
        break;
 800688e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d074      	beq.n	8006980 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	005a      	lsls	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	441a      	add	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b0f      	cmp	r3, #15
 80068b2:	d916      	bls.n	80068e2 <UART_SetConfig+0x19e>
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ba:	d212      	bcs.n	80068e2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f023 030f 	bic.w	r3, r3, #15
 80068c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	89fb      	ldrh	r3, [r7, #14]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	89fa      	ldrh	r2, [r7, #14]
 80068de:	60da      	str	r2, [r3, #12]
 80068e0:	e04e      	b.n	8006980 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	77bb      	strb	r3, [r7, #30]
 80068e6:	e04b      	b.n	8006980 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068e8:	7ffb      	ldrb	r3, [r7, #31]
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d827      	bhi.n	800693e <UART_SetConfig+0x1fa>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <UART_SetConfig+0x1b0>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006919 	.word	0x08006919
 80068f8:	08006921 	.word	0x08006921
 80068fc:	08006929 	.word	0x08006929
 8006900:	0800693f 	.word	0x0800693f
 8006904:	0800692f 	.word	0x0800692f
 8006908:	0800693f 	.word	0x0800693f
 800690c:	0800693f 	.word	0x0800693f
 8006910:	0800693f 	.word	0x0800693f
 8006914:	08006937 	.word	0x08006937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006918:	f7fd fe82 	bl	8004620 <HAL_RCC_GetPCLK1Freq>
 800691c:	61b8      	str	r0, [r7, #24]
        break;
 800691e:	e013      	b.n	8006948 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006920:	f7fd fea0 	bl	8004664 <HAL_RCC_GetPCLK2Freq>
 8006924:	61b8      	str	r0, [r7, #24]
        break;
 8006926:	e00f      	b.n	8006948 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006928:	4b20      	ldr	r3, [pc, #128]	; (80069ac <UART_SetConfig+0x268>)
 800692a:	61bb      	str	r3, [r7, #24]
        break;
 800692c:	e00c      	b.n	8006948 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800692e:	f7fd fe01 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 8006932:	61b8      	str	r0, [r7, #24]
        break;
 8006934:	e008      	b.n	8006948 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693a:	61bb      	str	r3, [r7, #24]
        break;
 800693c:	e004      	b.n	8006948 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	77bb      	strb	r3, [r7, #30]
        break;
 8006946:	bf00      	nop
    }

    if (pclk != 0U)
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d018      	beq.n	8006980 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	085a      	lsrs	r2, r3, #1
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	441a      	add	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	b29b      	uxth	r3, r3
 8006962:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b0f      	cmp	r3, #15
 8006968:	d908      	bls.n	800697c <UART_SetConfig+0x238>
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006970:	d204      	bcs.n	800697c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	60da      	str	r2, [r3, #12]
 800697a:	e001      	b.n	8006980 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800698c:	7fbb      	ldrb	r3, [r7, #30]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3720      	adds	r7, #32
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	efff69f3 	.word	0xefff69f3
 800699c:	40013800 	.word	0x40013800
 80069a0:	40021000 	.word	0x40021000
 80069a4:	40004400 	.word	0x40004400
 80069a8:	40004800 	.word	0x40004800
 80069ac:	007a1200 	.word	0x007a1200

080069b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01a      	beq.n	8006ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aae:	d10a      	bne.n	8006ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	605a      	str	r2, [r3, #4]
  }
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b04:	f7fa fe2e 	bl	8001764 <HAL_GetTick>
 8006b08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d10e      	bne.n	8006b36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f82d 	bl	8006b86 <UART_WaitOnFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e023      	b.n	8006b7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d10e      	bne.n	8006b62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f817 	bl	8006b86 <UART_WaitOnFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e00d      	b.n	8006b7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b09c      	sub	sp, #112	; 0x70
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	603b      	str	r3, [r7, #0]
 8006b92:	4613      	mov	r3, r2
 8006b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b96:	e0a5      	b.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9e:	f000 80a1 	beq.w	8006ce4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba2:	f7fa fddf 	bl	8001764 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d302      	bcc.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d13e      	bne.n	8006c36 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bcc:	667b      	str	r3, [r7, #100]	; 0x64
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bd8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e6      	bne.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	f023 0301 	bic.w	r3, r3, #1
 8006c00:	663b      	str	r3, [r7, #96]	; 0x60
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2220      	movs	r2, #32
 8006c22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e067      	b.n	8006d06 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d04f      	beq.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c52:	d147      	bne.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c84:	e841 2300 	strex	r3, r2, [r1]
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e6      	bne.n	8006c5e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3308      	adds	r3, #8
 8006c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f023 0301 	bic.w	r3, r3, #1
 8006ca6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3308      	adds	r3, #8
 8006cae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cb0:	623a      	str	r2, [r7, #32]
 8006cb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	69f9      	ldr	r1, [r7, #28]
 8006cb6:	6a3a      	ldr	r2, [r7, #32]
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e5      	bne.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e010      	b.n	8006d06 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	69da      	ldr	r2, [r3, #28]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	4013      	ands	r3, r2
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	bf0c      	ite	eq
 8006cf4:	2301      	moveq	r3, #1
 8006cf6:	2300      	movne	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	f43f af4a 	beq.w	8006b98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3770      	adds	r7, #112	; 0x70
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b091      	sub	sp, #68	; 0x44
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	88fa      	ldrh	r2, [r7, #6]
 8006d30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d42:	d10e      	bne.n	8006d62 <UART_Start_Receive_IT+0x52>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <UART_Start_Receive_IT+0x48>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d56:	e02d      	b.n	8006db4 <UART_Start_Receive_IT+0xa4>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	22ff      	movs	r2, #255	; 0xff
 8006d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d60:	e028      	b.n	8006db4 <UART_Start_Receive_IT+0xa4>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10d      	bne.n	8006d86 <UART_Start_Receive_IT+0x76>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d104      	bne.n	8006d7c <UART_Start_Receive_IT+0x6c>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	22ff      	movs	r2, #255	; 0xff
 8006d76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d7a:	e01b      	b.n	8006db4 <UART_Start_Receive_IT+0xa4>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	227f      	movs	r2, #127	; 0x7f
 8006d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d84:	e016      	b.n	8006db4 <UART_Start_Receive_IT+0xa4>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d8e:	d10d      	bne.n	8006dac <UART_Start_Receive_IT+0x9c>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d104      	bne.n	8006da2 <UART_Start_Receive_IT+0x92>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	227f      	movs	r2, #127	; 0x7f
 8006d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006da0:	e008      	b.n	8006db4 <UART_Start_Receive_IT+0xa4>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	223f      	movs	r2, #63	; 0x3f
 8006da6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006daa:	e003      	b.n	8006db4 <UART_Start_Receive_IT+0xa4>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2222      	movs	r2, #34	; 0x22
 8006dc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	f043 0301 	orr.w	r3, r3, #1
 8006dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006de2:	637a      	str	r2, [r7, #52]	; 0x34
 8006de4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e5      	bne.n	8006dc2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfe:	d107      	bne.n	8006e10 <UART_Start_Receive_IT+0x100>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d103      	bne.n	8006e10 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4a15      	ldr	r2, [pc, #84]	; (8006e60 <UART_Start_Receive_IT+0x150>)
 8006e0c:	665a      	str	r2, [r3, #100]	; 0x64
 8006e0e:	e002      	b.n	8006e16 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4a14      	ldr	r2, [pc, #80]	; (8006e64 <UART_Start_Receive_IT+0x154>)
 8006e14:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	623b      	str	r3, [r7, #32]
 8006e3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	69f9      	ldr	r1, [r7, #28]
 8006e42:	6a3a      	ldr	r2, [r7, #32]
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e6      	bne.n	8006e1e <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3744      	adds	r7, #68	; 0x44
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	0800710b 	.word	0x0800710b
 8006e64:	08006faf 	.word	0x08006faf

08006e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b095      	sub	sp, #84	; 0x54
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e6      	bne.n	8006e70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d118      	bne.n	8006f10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f023 0310 	bic.w	r3, r3, #16
 8006ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6979      	ldr	r1, [r7, #20]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	613b      	str	r3, [r7, #16]
   return(result);
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e6      	bne.n	8006ede <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006f22:	bf00      	nop
 8006f24:	3754      	adds	r7, #84	; 0x54
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff fbe3 	bl	8006718 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b088      	sub	sp, #32
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f76:	61fb      	str	r3, [r7, #28]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6979      	ldr	r1, [r7, #20]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e6      	bne.n	8006f62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff fbaf 	bl	8006704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa6:	bf00      	nop
 8006fa8:	3720      	adds	r7, #32
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b096      	sub	sp, #88	; 0x58
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fc4:	2b22      	cmp	r3, #34	; 0x22
 8006fc6:	f040 8094 	bne.w	80070f2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006fd0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006fd4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006fd8:	b2d9      	uxtb	r1, r3
 8006fda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe4:	400a      	ands	r2, r1
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d177      	bne.n	8007102 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	e853 3f00 	ldrex	r3, [r3]
 800701e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007022:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007026:	653b      	str	r3, [r7, #80]	; 0x50
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	461a      	mov	r2, r3
 800702e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007030:	647b      	str	r3, [r7, #68]	; 0x44
 8007032:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007034:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007038:	e841 2300 	strex	r3, r2, [r1]
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800703e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1e6      	bne.n	8007012 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3308      	adds	r3, #8
 800704a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	623b      	str	r3, [r7, #32]
   return(result);
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	f023 0301 	bic.w	r3, r3, #1
 800705a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3308      	adds	r3, #8
 8007062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007064:	633a      	str	r2, [r7, #48]	; 0x30
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800706a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e5      	bne.n	8007044 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007088:	2b01      	cmp	r3, #1
 800708a:	d12e      	bne.n	80070ea <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0310 	bic.w	r3, r3, #16
 80070a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b0:	61fb      	str	r3, [r7, #28]
 80070b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	69b9      	ldr	r1, [r7, #24]
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	617b      	str	r3, [r7, #20]
   return(result);
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e6      	bne.n	8007092 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	f003 0310 	and.w	r3, r3, #16
 80070ce:	2b10      	cmp	r3, #16
 80070d0:	d103      	bne.n	80070da <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2210      	movs	r2, #16
 80070d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7ff fb22 	bl	800672c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070e8:	e00b      	b.n	8007102 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7f9 f86c 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 80070f0:	e007      	b.n	8007102 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699a      	ldr	r2, [r3, #24]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0208 	orr.w	r2, r2, #8
 8007100:	619a      	str	r2, [r3, #24]
}
 8007102:	bf00      	nop
 8007104:	3758      	adds	r7, #88	; 0x58
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b096      	sub	sp, #88	; 0x58
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007118:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007120:	2b22      	cmp	r3, #34	; 0x22
 8007122:	f040 8094 	bne.w	800724e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800712c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007134:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007136:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800713a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800713e:	4013      	ands	r3, r2
 8007140:	b29a      	uxth	r2, r3
 8007142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007144:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714a:	1c9a      	adds	r2, r3, #2
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d177      	bne.n	800725e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718c:	643b      	str	r3, [r7, #64]	; 0x40
 800718e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e6      	bne.n	800716e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3308      	adds	r3, #8
 80071a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	e853 3f00 	ldrex	r3, [r3]
 80071ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f023 0301 	bic.w	r3, r3, #1
 80071b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e5      	bne.n	80071a0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2220      	movs	r2, #32
 80071d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d12e      	bne.n	8007246 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f023 0310 	bic.w	r3, r3, #16
 8007202:	647b      	str	r3, [r7, #68]	; 0x44
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800720c:	61bb      	str	r3, [r7, #24]
 800720e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6979      	ldr	r1, [r7, #20]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	613b      	str	r3, [r7, #16]
   return(result);
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e6      	bne.n	80071ee <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	f003 0310 	and.w	r3, r3, #16
 800722a:	2b10      	cmp	r3, #16
 800722c:	d103      	bne.n	8007236 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2210      	movs	r2, #16
 8007234:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff fa74 	bl	800672c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007244:	e00b      	b.n	800725e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7f8 ffbe 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 800724c:	e007      	b.n	800725e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	699a      	ldr	r2, [r3, #24]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f042 0208 	orr.w	r2, r2, #8
 800725c:	619a      	str	r2, [r3, #24]
}
 800725e:	bf00      	nop
 8007260:	3758      	adds	r7, #88	; 0x58
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
	...

0800727c <__libc_init_array>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	4d0d      	ldr	r5, [pc, #52]	; (80072b4 <__libc_init_array+0x38>)
 8007280:	4c0d      	ldr	r4, [pc, #52]	; (80072b8 <__libc_init_array+0x3c>)
 8007282:	1b64      	subs	r4, r4, r5
 8007284:	10a4      	asrs	r4, r4, #2
 8007286:	2600      	movs	r6, #0
 8007288:	42a6      	cmp	r6, r4
 800728a:	d109      	bne.n	80072a0 <__libc_init_array+0x24>
 800728c:	4d0b      	ldr	r5, [pc, #44]	; (80072bc <__libc_init_array+0x40>)
 800728e:	4c0c      	ldr	r4, [pc, #48]	; (80072c0 <__libc_init_array+0x44>)
 8007290:	f000 f82e 	bl	80072f0 <_init>
 8007294:	1b64      	subs	r4, r4, r5
 8007296:	10a4      	asrs	r4, r4, #2
 8007298:	2600      	movs	r6, #0
 800729a:	42a6      	cmp	r6, r4
 800729c:	d105      	bne.n	80072aa <__libc_init_array+0x2e>
 800729e:	bd70      	pop	{r4, r5, r6, pc}
 80072a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a4:	4798      	blx	r3
 80072a6:	3601      	adds	r6, #1
 80072a8:	e7ee      	b.n	8007288 <__libc_init_array+0xc>
 80072aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ae:	4798      	blx	r3
 80072b0:	3601      	adds	r6, #1
 80072b2:	e7f2      	b.n	800729a <__libc_init_array+0x1e>
 80072b4:	08007340 	.word	0x08007340
 80072b8:	08007340 	.word	0x08007340
 80072bc:	08007340 	.word	0x08007340
 80072c0:	08007344 	.word	0x08007344

080072c4 <memcpy>:
 80072c4:	440a      	add	r2, r1
 80072c6:	4291      	cmp	r1, r2
 80072c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072cc:	d100      	bne.n	80072d0 <memcpy+0xc>
 80072ce:	4770      	bx	lr
 80072d0:	b510      	push	{r4, lr}
 80072d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072da:	4291      	cmp	r1, r2
 80072dc:	d1f9      	bne.n	80072d2 <memcpy+0xe>
 80072de:	bd10      	pop	{r4, pc}

080072e0 <memset>:
 80072e0:	4402      	add	r2, r0
 80072e2:	4603      	mov	r3, r0
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d100      	bne.n	80072ea <memset+0xa>
 80072e8:	4770      	bx	lr
 80072ea:	f803 1b01 	strb.w	r1, [r3], #1
 80072ee:	e7f9      	b.n	80072e4 <memset+0x4>

080072f0 <_init>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr

080072fc <_fini>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr
