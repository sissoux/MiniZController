
MiniZController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006484  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800660c  0800660c  0001660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006644  08006644  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006644  08006644  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006644  08006644  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006644  08006644  00016644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006648  08006648  00016648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800664c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000000c  08006658  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08006658  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d93  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268f  00000000  00000000  00033dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00036460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00037400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c415  00000000  00000000  000382b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131eb  00000000  00000000  000546cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab85a  00000000  00000000  000678b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ec  00000000  00000000  00113168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080065f4 	.word	0x080065f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080065f4 	.word	0x080065f4

080001c8 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a11      	ldr	r2, [pc, #68]	; (8000218 <HAL_UART_RxCpltCallback+0x50>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d11a      	bne.n	800020e <HAL_UART_RxCpltCallback+0x46>
		{
			// Reset timeout
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 80001d8:	4b10      	ldr	r3, [pc, #64]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2200      	movs	r2, #0
 80001de:	625a      	str	r2, [r3, #36]	; 0x24

			// Add received byte to sbus FIFO
			SBUS_AddByte(gSBUSByte);
 80001e0:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <HAL_UART_RxCpltCallback+0x58>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 fc45 	bl	8000a74 <SBUS_AddByte>

			// Available sbus frame ?
			if (SBUS_GetChannel(&gSBUSChannels) == FRAME_COMPLETE)
 80001ea:	480e      	ldr	r0, [pc, #56]	; (8000224 <HAL_UART_RxCpltCallback+0x5c>)
 80001ec:	f000 fc62 	bl	8000ab4 <SBUS_GetChannel>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d106      	bne.n	8000204 <HAL_UART_RxCpltCallback+0x3c>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000200:	f002 fbae 	bl	8002960 <HAL_GPIO_WritePin>
//				II = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_1, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
//				III = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_2, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
//				IV = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_3, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
			}
			// Restart IT
			HAL_UART_Receive_IT(huart, &gSBUSByte, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	4906      	ldr	r1, [pc, #24]	; (8000220 <HAL_UART_RxCpltCallback+0x58>)
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f005 f8d1 	bl	80053b0 <HAL_UART_Receive_IT>
		}
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000208 	.word	0x20000208
 800021c:	20000290 	.word	0x20000290
 8000220:	20000080 	.word	0x20000080
 8000224:	200000d0 	.word	0x200000d0

08000228 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a08      	ldr	r2, [pc, #32]	; (8000254 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d108      	bne.n	800024a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		SBUS_TimeoutCallback();
 8000238:	f000 fc80 	bl	8000b3c <SBUS_TimeoutCallback>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f002 fb8b 	bl	8002960 <HAL_GPIO_WritePin>
	}

}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000290 	.word	0x20000290

08000258 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d106      	bne.n	8000276 <HAL_ADC_ConvCpltCallback+0x1e>
	{
		Servo_Feedback = HAL_ADC_GetValue(&hadc1);
 8000268:	480a      	ldr	r0, [pc, #40]	; (8000294 <HAL_ADC_ConvCpltCallback+0x3c>)
 800026a:	f001 f9d7 	bl	800161c <HAL_ADC_GetValue>
 800026e:	4603      	mov	r3, r0
 8000270:	4a09      	ldr	r2, [pc, #36]	; (8000298 <HAL_ADC_ConvCpltCallback+0x40>)
 8000272:	6013      	str	r3, [r2, #0]
	}
	else if(hadc == &hadc2)
	{
		Servo_Trim = HAL_ADC_GetValue(&hadc2);
	}
}
 8000274:	e009      	b.n	800028a <HAL_ADC_ConvCpltCallback+0x32>
	else if(hadc == &hadc2)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4a08      	ldr	r2, [pc, #32]	; (800029c <HAL_ADC_ConvCpltCallback+0x44>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d105      	bne.n	800028a <HAL_ADC_ConvCpltCallback+0x32>
		Servo_Trim = HAL_ADC_GetValue(&hadc2);
 800027e:	4807      	ldr	r0, [pc, #28]	; (800029c <HAL_ADC_ConvCpltCallback+0x44>)
 8000280:	f001 f9cc 	bl	800161c <HAL_ADC_GetValue>
 8000284:	4603      	mov	r3, r0
 8000286:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <HAL_ADC_ConvCpltCallback+0x48>)
 8000288:	6013      	str	r3, [r2, #0]
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	200000e8 	.word	0x200000e8
 8000298:	2000002c 	.word	0x2000002c
 800029c:	20000030 	.word	0x20000030
 80002a0:	2000028c 	.word	0x2000028c

080002a4 <SetSpeed>:
{
	return VBAT_GAIN*(float)RawValue;
}

void SetSpeed(uint32_t value, uint8_t dir)	//value is a per thousand value of max speed.
{
 80002a4:	b480      	push	{r7}
 80002a6:	b087      	sub	sp, #28
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	70fb      	strb	r3, [r7, #3]
	uint32_t maxVal = htim1.Instance->ARR;
 80002b0:	4b25      	ldr	r3, [pc, #148]	; (8000348 <SetSpeed+0xa4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002b6:	617b      	str	r3, [r7, #20]

	value = (uint32_t)((float)value*MAX_SERVO_SPEED_GAIN/1000.0f*(float)maxVal);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	ee07 3a90 	vmov	s15, r3
 80002be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002c2:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80002c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002ca:	eddf 6a20 	vldr	s13, [pc, #128]	; 800034c <SetSpeed+0xa8>
 80002ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	ee07 3a90 	vmov	s15, r3
 80002d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002e4:	ee17 3a90 	vmov	r3, s15
 80002e8:	607b      	str	r3, [r7, #4]

	if (dir==0)
 80002ea:	78fb      	ldrb	r3, [r7, #3]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d110      	bne.n	8000312 <SetSpeed+0x6e>
	{
		uint32_t tmpccer;

		/* Get the TIMx CCER register value */
		tmpccer = htim1.Instance->CCER;
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <SetSpeed+0xa4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	6a1b      	ldr	r3, [r3, #32]
 80002f6:	60fb      	str	r3, [r7, #12]

		tmpccer &= ~TIM_CCER_CC1E;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	f023 0301 	bic.w	r3, r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
		tmpccer |= TIM_CCER_CC1NE;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	60fb      	str	r3, [r7, #12]

		htim1.Instance->CCER = tmpccer;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <SetSpeed+0xa4>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	621a      	str	r2, [r3, #32]
 8000310:	e00f      	b.n	8000332 <SetSpeed+0x8e>
	else
	{
		uint32_t tmpccer;

		/* Get the TIMx CCER register value */
		tmpccer = htim1.Instance->CCER;
 8000312:	4b0d      	ldr	r3, [pc, #52]	; (8000348 <SetSpeed+0xa4>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	613b      	str	r3, [r7, #16]

		tmpccer &= ~TIM_CCER_CC1NE;
 800031a:	693b      	ldr	r3, [r7, #16]
 800031c:	f023 0304 	bic.w	r3, r3, #4
 8000320:	613b      	str	r3, [r7, #16]
		tmpccer |= TIM_CCER_CC1E;
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	613b      	str	r3, [r7, #16]

		htim1.Instance->CCER = tmpccer;
 800032a:	4b07      	ldr	r3, [pc, #28]	; (8000348 <SetSpeed+0xa4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	693a      	ldr	r2, [r7, #16]
 8000330:	621a      	str	r2, [r3, #32]
	}

	htim1.Instance->CCR1 = value;
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SetSpeed+0xa4>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	635a      	str	r2, [r3, #52]	; 0x34

}
 800033a:	bf00      	nop
 800033c:	371c      	adds	r7, #28
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	200001bc 	.word	0x200001bc
 800034c:	447a0000 	.word	0x447a0000

08000350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000354:	f000 fe76 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000358:	f000 f850 	bl	80003fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035c:	f000 fb44 	bl	80009e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000360:	f000 f8aa 	bl	80004b8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000364:	f000 f978 	bl	8000658 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000368:	f000 face 	bl	8000908 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800036c:	f000 fafc 	bl	8000968 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000370:	f000 f914 	bl	800059c <MX_ADC2_Init>
  MX_TIM3_Init();
 8000374:	f000 fa2e 	bl	80007d4 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000378:	f000 faa0 	bl	80008bc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 800037c:	4819      	ldr	r0, [pc, #100]	; (80003e4 <main+0x94>)
 800037e:	f001 f86d 	bl	800145c <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000382:	2100      	movs	r1, #0
 8000384:	4818      	ldr	r0, [pc, #96]	; (80003e8 <main+0x98>)
 8000386:	f003 fed1 	bl	800412c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &gSBUSByte, 1);
 800038a:	2201      	movs	r2, #1
 800038c:	4917      	ldr	r1, [pc, #92]	; (80003ec <main+0x9c>)
 800038e:	4818      	ldr	r0, [pc, #96]	; (80003f0 <main+0xa0>)
 8000390:	f005 f80e 	bl	80053b0 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000394:	4817      	ldr	r0, [pc, #92]	; (80003f4 <main+0xa4>)
 8000396:	f003 fe0b 	bl	8003fb0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(Motor2_EN_GPIO_Port, Motor2_EN_Pin, 1);
 800039a:	2201      	movs	r2, #1
 800039c:	2140      	movs	r1, #64	; 0x40
 800039e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a2:	f002 fadd 	bl	8002960 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin, 1);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2120      	movs	r1, #32
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ae:	f002 fad7 	bl	8002960 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim1);
 80003b2:	4811      	ldr	r0, [pc, #68]	; (80003f8 <main+0xa8>)
 80003b4:	f003 fda8 	bl	8003f08 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003b8:	2100      	movs	r1, #0
 80003ba:	480f      	ldr	r0, [pc, #60]	; (80003f8 <main+0xa8>)
 80003bc:	f003 feb6 	bl	800412c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80003c0:	2104      	movs	r1, #4
 80003c2:	480d      	ldr	r0, [pc, #52]	; (80003f8 <main+0xa8>)
 80003c4:	f003 feb2 	bl	800412c <HAL_TIM_PWM_Start>
  SetSpeed(0,0);
 80003c8:	2100      	movs	r1, #0
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff ff6a 	bl	80002a4 <SetSpeed>
  SetSpeed(0,0);
 80003d0:	2100      	movs	r1, #0
 80003d2:	2000      	movs	r0, #0
 80003d4:	f7ff ff66 	bl	80002a4 <SetSpeed>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SetSpeed(0,0);
 80003d8:	2100      	movs	r1, #0
 80003da:	2000      	movs	r0, #0
 80003dc:	f7ff ff62 	bl	80002a4 <SetSpeed>
 80003e0:	e7fa      	b.n	80003d8 <main+0x88>
 80003e2:	bf00      	nop
 80003e4:	200000e8 	.word	0x200000e8
 80003e8:	20000084 	.word	0x20000084
 80003ec:	20000080 	.word	0x20000080
 80003f0:	20000208 	.word	0x20000208
 80003f4:	20000290 	.word	0x20000290
 80003f8:	200001bc 	.word	0x200001bc

080003fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b096      	sub	sp, #88	; 0x58
 8000400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000402:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000406:	2228      	movs	r2, #40	; 0x28
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f006 f8ea 	bl	80065e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000410:	f107 031c 	add.w	r3, r7, #28
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]
 800042e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000430:	2302      	movs	r3, #2
 8000432:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000434:	2301      	movs	r3, #1
 8000436:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000438:	2310      	movs	r3, #16
 800043a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043c:	2302      	movs	r3, #2
 800043e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000440:	2300      	movs	r3, #0
 8000442:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000444:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000448:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800044e:	4618      	mov	r0, r3
 8000450:	f002 fa9e 	bl	8002990 <HAL_RCC_OscConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800045a:	f000 fb05 	bl	8000a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045e:	230f      	movs	r3, #15
 8000460:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000462:	2302      	movs	r3, #2
 8000464:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000472:	f107 031c 	add.w	r3, r7, #28
 8000476:	2101      	movs	r1, #1
 8000478:	4618      	mov	r0, r3
 800047a:	f003 f991 	bl	80037a0 <HAL_RCC_ClockConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000484:	f000 faf0 	bl	8000a68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000488:	f241 0381 	movw	r3, #4225	; 0x1081
 800048c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000496:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 fbb4 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004aa:	f000 fadd 	bl	8000a68 <Error_Handler>
  }
}
 80004ae:	bf00      	nop
 80004b0:	3758      	adds	r7, #88	; 0x58
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	; 0x28
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004be:	f107 031c 	add.w	r3, r7, #28
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004da:	4b2f      	ldr	r3, [pc, #188]	; (8000598 <MX_ADC1_Init+0xe0>)
 80004dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80004e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004e2:	4b2d      	ldr	r3, [pc, #180]	; (8000598 <MX_ADC1_Init+0xe0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b2b      	ldr	r3, [pc, #172]	; (8000598 <MX_ADC1_Init+0xe0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ee:	4b2a      	ldr	r3, [pc, #168]	; (8000598 <MX_ADC1_Init+0xe0>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f4:	4b28      	ldr	r3, [pc, #160]	; (8000598 <MX_ADC1_Init+0xe0>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fa:	4b27      	ldr	r3, [pc, #156]	; (8000598 <MX_ADC1_Init+0xe0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000502:	4b25      	ldr	r3, [pc, #148]	; (8000598 <MX_ADC1_Init+0xe0>)
 8000504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800050a:	4b23      	ldr	r3, [pc, #140]	; (8000598 <MX_ADC1_Init+0xe0>)
 800050c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000512:	4b21      	ldr	r3, [pc, #132]	; (8000598 <MX_ADC1_Init+0xe0>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_ADC1_Init+0xe0>)
 800051a:	2201      	movs	r2, #1
 800051c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051e:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_ADC1_Init+0xe0>)
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000526:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <MX_ADC1_Init+0xe0>)
 8000528:	2204      	movs	r2, #4
 800052a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <MX_ADC1_Init+0xe0>)
 800052e:	2200      	movs	r2, #0
 8000530:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000532:	4b19      	ldr	r3, [pc, #100]	; (8000598 <MX_ADC1_Init+0xe0>)
 8000534:	2200      	movs	r2, #0
 8000536:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000538:	4817      	ldr	r0, [pc, #92]	; (8000598 <MX_ADC1_Init+0xe0>)
 800053a:	f000 fdfd 	bl	8001138 <HAL_ADC_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000544:	f000 fa90 	bl	8000a68 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800054c:	f107 031c 	add.w	r3, r7, #28
 8000550:	4619      	mov	r1, r3
 8000552:	4811      	ldr	r0, [pc, #68]	; (8000598 <MX_ADC1_Init+0xe0>)
 8000554:	f001 fd7a 	bl	800204c <HAL_ADCEx_MultiModeConfigChannel>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800055e:	f000 fa83 	bl	8000a68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000562:	2302      	movs	r3, #2
 8000564:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000566:	2301      	movs	r3, #1
 8000568:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800056e:	2303      	movs	r3, #3
 8000570:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	4619      	mov	r1, r3
 800057e:	4806      	ldr	r0, [pc, #24]	; (8000598 <MX_ADC1_Init+0xe0>)
 8000580:	f001 faa2 	bl	8001ac8 <HAL_ADC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800058a:	f000 fa6d 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	3728      	adds	r7, #40	; 0x28
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000e8 	.word	0x200000e8

0800059c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
 80005b0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80005b2:	4b27      	ldr	r3, [pc, #156]	; (8000650 <MX_ADC2_Init+0xb4>)
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <MX_ADC2_Init+0xb8>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <MX_ADC2_Init+0xb4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005be:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_ADC2_Init+0xb4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_ADC2_Init+0xb4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005ca:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_ADC2_Init+0xb4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_ADC2_Init+0xb4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <MX_ADC2_Init+0xb4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_ADC2_Init+0xb4>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_ADC2_Init+0xb4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_ADC2_Init+0xb4>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_ADC2_Init+0xb4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_ADC2_Init+0xb4>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_ADC2_Init+0xb4>)
 8000600:	2200      	movs	r2, #0
 8000602:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_ADC2_Init+0xb4>)
 8000606:	2200      	movs	r2, #0
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800060a:	4811      	ldr	r0, [pc, #68]	; (8000650 <MX_ADC2_Init+0xb4>)
 800060c:	f000 fd94 	bl	8001138 <HAL_ADC_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000616:	f000 fa27 	bl	8000a68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800061a:	2301      	movs	r3, #1
 800061c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061e:	2301      	movs	r3, #1
 8000620:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000632:	463b      	mov	r3, r7
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <MX_ADC2_Init+0xb4>)
 8000638:	f001 fa46 	bl	8001ac8 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000642:	f000 fa11 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000030 	.word	0x20000030
 8000654:	50000100 	.word	0x50000100

08000658 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09a      	sub	sp, #104	; 0x68
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000678:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]
 800068a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	222c      	movs	r2, #44	; 0x2c
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f005 ffa6 	bl	80065e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000698:	4b4c      	ldr	r3, [pc, #304]	; (80007cc <MX_TIM1_Init+0x174>)
 800069a:	4a4d      	ldr	r2, [pc, #308]	; (80007d0 <MX_TIM1_Init+0x178>)
 800069c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800069e:	4b4b      	ldr	r3, [pc, #300]	; (80007cc <MX_TIM1_Init+0x174>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b49      	ldr	r3, [pc, #292]	; (80007cc <MX_TIM1_Init+0x174>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80006aa:	4b48      	ldr	r3, [pc, #288]	; (80007cc <MX_TIM1_Init+0x174>)
 80006ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b2:	4b46      	ldr	r3, [pc, #280]	; (80007cc <MX_TIM1_Init+0x174>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b8:	4b44      	ldr	r3, [pc, #272]	; (80007cc <MX_TIM1_Init+0x174>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006be:	4b43      	ldr	r3, [pc, #268]	; (80007cc <MX_TIM1_Init+0x174>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c4:	4841      	ldr	r0, [pc, #260]	; (80007cc <MX_TIM1_Init+0x174>)
 80006c6:	f003 fbc7 	bl	8003e58 <HAL_TIM_Base_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006d0:	f000 f9ca 	bl	8000a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006de:	4619      	mov	r1, r3
 80006e0:	483a      	ldr	r0, [pc, #232]	; (80007cc <MX_TIM1_Init+0x174>)
 80006e2:	f004 f843 	bl	800476c <HAL_TIM_ConfigClockSource>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006ec:	f000 f9bc 	bl	8000a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006f0:	4836      	ldr	r0, [pc, #216]	; (80007cc <MX_TIM1_Init+0x174>)
 80006f2:	f003 fcb9 	bl	8004068 <HAL_TIM_PWM_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006fc:	f000 f9b4 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000704:	2300      	movs	r3, #0
 8000706:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800070c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000710:	4619      	mov	r1, r3
 8000712:	482e      	ldr	r0, [pc, #184]	; (80007cc <MX_TIM1_Init+0x174>)
 8000714:	f004 fcfa 	bl	800510c <HAL_TIMEx_MasterConfigSynchronization>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800071e:	f000 f9a3 	bl	8000a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000722:	2360      	movs	r3, #96	; 0x60
 8000724:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800072a:	2300      	movs	r3, #0
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800072e:	2300      	movs	r3, #0
 8000730:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000736:	2300      	movs	r3, #0
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800073a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000740:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000744:	2200      	movs	r2, #0
 8000746:	4619      	mov	r1, r3
 8000748:	4820      	ldr	r0, [pc, #128]	; (80007cc <MX_TIM1_Init+0x174>)
 800074a:	f003 fefb 	bl	8004544 <HAL_TIM_PWM_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000754:	f000 f988 	bl	8000a68 <Error_Handler>
  }
  sConfigOC.Pulse = 250;
 8000758:	23fa      	movs	r3, #250	; 0xfa
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000764:	2204      	movs	r2, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4818      	ldr	r0, [pc, #96]	; (80007cc <MX_TIM1_Init+0x174>)
 800076a:	f003 feeb 	bl	8004544 <HAL_TIM_PWM_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000774:	f000 f978 	bl	8000a68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800079a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <MX_TIM1_Init+0x174>)
 80007ae:	f004 fd1b 	bl	80051e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 80007b8:	f000 f956 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_TIM1_Init+0x174>)
 80007be:	f000 fad9 	bl	8000d74 <HAL_TIM_MspPostInit>

}
 80007c2:	bf00      	nop
 80007c4:	3768      	adds	r7, #104	; 0x68
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200001bc 	.word	0x200001bc
 80007d0:	40012c00 	.word	0x40012c00

080007d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	; 0x38
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000806:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <MX_TIM3_Init+0xe0>)
 8000808:	4a2b      	ldr	r2, [pc, #172]	; (80008b8 <MX_TIM3_Init+0xe4>)
 800080a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <MX_TIM3_Init+0xe0>)
 800080e:	2210      	movs	r2, #16
 8000810:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <MX_TIM3_Init+0xe0>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_TIM3_Init+0xe0>)
 800081a:	2232      	movs	r2, #50	; 0x32
 800081c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <MX_TIM3_Init+0xe0>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_TIM3_Init+0xe0>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800082a:	4822      	ldr	r0, [pc, #136]	; (80008b4 <MX_TIM3_Init+0xe0>)
 800082c:	f003 fb14 	bl	8003e58 <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000836:	f000 f917 	bl	8000a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000844:	4619      	mov	r1, r3
 8000846:	481b      	ldr	r0, [pc, #108]	; (80008b4 <MX_TIM3_Init+0xe0>)
 8000848:	f003 ff90 	bl	800476c <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000852:	f000 f909 	bl	8000a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000856:	4817      	ldr	r0, [pc, #92]	; (80008b4 <MX_TIM3_Init+0xe0>)
 8000858:	f003 fc06 	bl	8004068 <HAL_TIM_PWM_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000862:	f000 f901 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000866:	2320      	movs	r3, #32
 8000868:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	480f      	ldr	r0, [pc, #60]	; (80008b4 <MX_TIM3_Init+0xe0>)
 8000876:	f004 fc49 	bl	800510c <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000880:	f000 f8f2 	bl	8000a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000884:	2360      	movs	r3, #96	; 0x60
 8000886:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <MX_TIM3_Init+0xe0>)
 800089c:	f003 fe52 	bl	8004544 <HAL_TIM_PWM_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008a6:	f000 f8df 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	3738      	adds	r7, #56	; 0x38
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000084 	.word	0x20000084
 80008b8:	40000400 	.word	0x40000400

080008bc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_TIM16_Init+0x44>)
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <MX_TIM16_Init+0x48>)
 80008c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_TIM16_Init+0x44>)
 80008c8:	221f      	movs	r2, #31
 80008ca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_TIM16_Init+0x44>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_TIM16_Init+0x44>)
 80008d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_TIM16_Init+0x44>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_TIM16_Init+0x44>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_TIM16_Init+0x44>)
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_TIM16_Init+0x44>)
 80008ee:	f003 fab3 	bl	8003e58 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80008f8:	f000 f8b6 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000290 	.word	0x20000290
 8000904:	40014400 	.word	0x40014400

08000908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_USART1_UART_Init+0x58>)
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <MX_USART1_UART_Init+0x5c>)
 8000910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_USART1_UART_Init+0x58>)
 8000914:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USART1_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_USART1_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART1_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USART1_UART_Init+0x58>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USART1_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USART1_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USART1_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USART1_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USART1_UART_Init+0x58>)
 800094c:	f004 fce2 	bl	8005314 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000956:	f000 f887 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000138 	.word	0x20000138
 8000964:	40013800 	.word	0x40013800

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_USART2_UART_Init+0x74>)
 800096e:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <MX_USART2_UART_Init+0x78>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8000972:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_USART2_UART_Init+0x74>)
 8000974:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <MX_USART2_UART_Init+0x7c>)
 8000976:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_USART2_UART_Init+0x74>)
 800097a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_USART2_UART_Init+0x74>)
 8000982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000986:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART2_UART_Init+0x74>)
 800098a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_USART2_UART_Init+0x74>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART2_UART_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_USART2_UART_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART2_UART_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART2_UART_Init+0x74>)
 80009aa:	2232      	movs	r2, #50	; 0x32
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
                              |UART_ADVFEATURE_DMADISABLEONERROR_INIT;
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART2_UART_Init+0x74>)
 80009b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART2_UART_Init+0x74>)
 80009b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009bc:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <MX_USART2_UART_Init+0x74>)
 80009c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART2_UART_Init+0x74>)
 80009c8:	f004 fca4 	bl	8005314 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80009d2:	f000 f849 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000208 	.word	0x20000208
 80009e0:	40004400 	.word	0x40004400
 80009e4:	000186a0 	.word	0x000186a0

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_GPIO_Init+0x7c>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <MX_GPIO_Init+0x7c>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	6153      	str	r3, [r2, #20]
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_GPIO_Init+0x7c>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_GPIO_Init+0x7c>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <MX_GPIO_Init+0x7c>)
 8000a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a20:	6153      	str	r3, [r2, #20]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_GPIO_Init+0x7c>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor1_EN_Pin|Motor2_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f001 ff92 	bl	8002960 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_EN_Pin Motor2_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = Motor1_EN_Pin|Motor2_EN_Pin|LED_Pin;
 8000a3c:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8000a40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f001 fe10 	bl	800267c <HAL_GPIO_Init>

}
 8000a5c:	bf00      	nop
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40021000 	.word	0x40021000

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <SBUS_AddByte>:
	return 0;
}


uint32_t SBUS_AddByte(uint8_t Byte)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	if (gByteBufferIndex < SBUS_FRAME_SIZE)
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <SBUS_AddByte+0x38>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b18      	cmp	r3, #24
 8000a84:	d809      	bhi.n	8000a9a <SBUS_AddByte+0x26>
		gByteBuffer[gByteBufferIndex++] = Byte;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <SBUS_AddByte+0x38>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	b2d1      	uxtb	r1, r2
 8000a8e:	4a07      	ldr	r2, [pc, #28]	; (8000aac <SBUS_AddByte+0x38>)
 8000a90:	7011      	strb	r1, [r2, #0]
 8000a92:	4619      	mov	r1, r3
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <SBUS_AddByte+0x3c>)
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	5453      	strb	r3, [r2, r1]

	return gByteBufferIndex;
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SBUS_AddByte+0x38>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200002dc 	.word	0x200002dc
 8000ab0:	200002e0 	.word	0x200002e0

08000ab4 <SBUS_GetChannel>:


uint32_t SBUS_GetChannel(struct sbuschannels *pChannels)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if (NULL == pChannels)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <SBUS_GetChannel+0x12>
		return FRAME_PENDING;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e030      	b.n	8000b28 <SBUS_GetChannel+0x74>

	// Enough byte received
	if (gByteBufferIndex == SBUS_FRAME_SIZE)
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <SBUS_GetChannel+0x7c>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b19      	cmp	r3, #25
 8000acc:	d12b      	bne.n	8000b26 <SBUS_GetChannel+0x72>
	{
		// Frame with Header and Footer?
		struct sbusframe *pFrame = (struct sbusframe *) gByteBuffer;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <SBUS_GetChannel+0x80>)
 8000ad0:	60bb      	str	r3, [r7, #8]

		if (pFrame->Header == SBUS_HEADER && pFrame->Footer == SBUS_FOOTER)
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b0f      	cmp	r3, #15
 8000ad8:	d125      	bne.n	8000b26 <SBUS_GetChannel+0x72>
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	7e1b      	ldrb	r3, [r3, #24]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d121      	bne.n	8000b26 <SBUS_GetChannel+0x72>
		{
			uint32_t ret = FRAME_COMPLETE;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]

			// Return the frame
			memcpy(&pChannels[0], &gByteBuffer[1], sizeof(struct sbuschannels));
 8000ae6:	2217      	movs	r2, #23
 8000ae8:	4913      	ldr	r1, [pc, #76]	; (8000b38 <SBUS_GetChannel+0x84>)
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f005 fd6c 	bl	80065c8 <memcpy>

			// Check for frame errors
			if (pChannels->FrameLost)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7d9b      	ldrb	r3, [r3, #22]
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <SBUS_GetChannel+0x52>
				ret |= FRAME_DROPPED;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	60fb      	str	r3, [r7, #12]

			if (pChannels->FailSafe)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7d9b      	ldrb	r3, [r3, #22]
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <SBUS_GetChannel+0x68>
				ret |= FRAME_FAILSAFE;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	60fb      	str	r3, [r7, #12]
//					pChannels->FailSafe,
//					pChannels->FrameLost);
//			CDC_Transmit_FS((uint8_t *)Str, strlen(Str));

			// Reset byte buffer
			gByteBufferIndex = 0;
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SBUS_GetChannel+0x7c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]

			return ret;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	e000      	b.n	8000b28 <SBUS_GetChannel+0x74>
		}
	}

	return FRAME_PENDING;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200002dc 	.word	0x200002dc
 8000b34:	200002e0 	.word	0x200002e0
 8000b38:	200002e1 	.word	0x200002e1

08000b3c <SBUS_TimeoutCallback>:

	return ((int32_t) ChannelValue * ScaleA + ScaleB) / ScaleD;
}

void SBUS_TimeoutCallback(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	// Reset byte buffer
	gByteBufferIndex = 0;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <SBUS_TimeoutCallback+0x14>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	200002dc 	.word	0x200002dc

08000b54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_MspInit+0x44>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_MspInit+0x44>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_MspInit+0x44>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_MspInit+0x44>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_MspInit+0x44>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x44>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bbc:	d136      	bne.n	8000c2c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	; (8000cac <HAL_ADC_MspInit+0x110>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a39      	ldr	r2, [pc, #228]	; (8000cac <HAL_ADC_MspInit+0x110>)
 8000bc6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bc8:	4b38      	ldr	r3, [pc, #224]	; (8000cac <HAL_ADC_MspInit+0x110>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d10b      	bne.n	8000be8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bd0:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <HAL_ADC_MspInit+0x114>)
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	4a36      	ldr	r2, [pc, #216]	; (8000cb0 <HAL_ADC_MspInit+0x114>)
 8000bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bda:	6153      	str	r3, [r2, #20]
 8000bdc:	4b34      	ldr	r3, [pc, #208]	; (8000cb0 <HAL_ADC_MspInit+0x114>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <HAL_ADC_MspInit+0x114>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	4a30      	ldr	r2, [pc, #192]	; (8000cb0 <HAL_ADC_MspInit+0x114>)
 8000bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf2:	6153      	str	r3, [r2, #20]
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <HAL_ADC_MspInit+0x114>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Servo_FB_Pin|Vbat_Meas_Pin;
 8000c00:	2303      	movs	r3, #3
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c04:	2303      	movs	r3, #3
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c16:	f001 fd31 	bl	800267c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2012      	movs	r0, #18
 8000c20:	f001 fc7f 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c24:	2012      	movs	r0, #18
 8000c26:	f001 fc98 	bl	800255a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c2a:	e03a      	b.n	8000ca2 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a20      	ldr	r2, [pc, #128]	; (8000cb4 <HAL_ADC_MspInit+0x118>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d135      	bne.n	8000ca2 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <HAL_ADC_MspInit+0x110>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <HAL_ADC_MspInit+0x110>)
 8000c3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c40:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <HAL_ADC_MspInit+0x110>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d10b      	bne.n	8000c60 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_ADC_MspInit+0x114>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <HAL_ADC_MspInit+0x114>)
 8000c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c52:	6153      	str	r3, [r2, #20]
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_ADC_MspInit+0x114>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <HAL_ADC_MspInit+0x114>)
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <HAL_ADC_MspInit+0x114>)
 8000c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6a:	6153      	str	r3, [r2, #20]
 8000c6c:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_ADC_MspInit+0x114>)
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Trim_Pin;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo_Trim_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8e:	f001 fcf5 	bl	800267c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2012      	movs	r0, #18
 8000c98:	f001 fc43 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c9c:	2012      	movs	r0, #18
 8000c9e:	f001 fc5c 	bl	800255a <HAL_NVIC_EnableIRQ>
}
 8000ca2:	bf00      	nop
 8000ca4:	3730      	adds	r7, #48	; 0x30
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000028 	.word	0x20000028
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	50000100 	.word	0x50000100

08000cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a27      	ldr	r2, [pc, #156]	; (8000d64 <HAL_TIM_Base_MspInit+0xac>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d114      	bne.n	8000cf4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000cd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2019      	movs	r0, #25
 8000ce8:	f001 fc1b 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cec:	2019      	movs	r0, #25
 8000cee:	f001 fc34 	bl	800255a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000cf2:	e032      	b.n	8000d5a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <HAL_TIM_Base_MspInit+0xb4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d114      	bne.n	8000d28 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201d      	movs	r0, #29
 8000d1c:	f001 fc01 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d20:	201d      	movs	r0, #29
 8000d22:	f001 fc1a 	bl	800255a <HAL_NVIC_EnableIRQ>
}
 8000d26:	e018      	b.n	8000d5a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_TIM_Base_MspInit+0xb8>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d113      	bne.n	8000d5a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_TIM_Base_MspInit+0xb0>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2019      	movs	r0, #25
 8000d50:	f001 fbe7 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d54:	2019      	movs	r0, #25
 8000d56:	f001 fc00 	bl	800255a <HAL_NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40000400 	.word	0x40000400
 8000d70:	40014400 	.word	0x40014400

08000d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a20      	ldr	r2, [pc, #128]	; (8000e14 <HAL_TIM_MspPostInit+0xa0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d139      	bne.n	8000e0a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <HAL_TIM_MspPostInit+0xa4>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <HAL_TIM_MspPostInit+0xa4>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	6153      	str	r3, [r2, #20]
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_TIM_MspPostInit+0xa4>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <HAL_TIM_MspPostInit+0xa4>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <HAL_TIM_MspPostInit+0xa4>)
 8000db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db8:	6153      	str	r3, [r2, #20]
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_TIM_MspPostInit+0xa4>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor1_2_Pin|Motor1_1_Pin|GPIO_PIN_9;
 8000dc6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000dd8:	2306      	movs	r3, #6
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de6:	f001 fc49 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dea:	2301      	movs	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_TIM_MspPostInit+0xa8>)
 8000e06:	f001 fc39 	bl	800267c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40012c00 	.word	0x40012c00
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	48000400 	.word	0x48000400

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a32      	ldr	r2, [pc, #200]	; (8000f08 <HAL_UART_MspInit+0xe8>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d128      	bne.n	8000e94 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e42:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <HAL_UART_MspInit+0xec>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a31      	ldr	r2, [pc, #196]	; (8000f0c <HAL_UART_MspInit+0xec>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_UART_MspInit+0xec>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	61bb      	str	r3, [r7, #24]
 8000e58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <HAL_UART_MspInit+0xec>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	4a2b      	ldr	r2, [pc, #172]	; (8000f0c <HAL_UART_MspInit+0xec>)
 8000e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e64:	6153      	str	r3, [r2, #20]
 8000e66:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <HAL_UART_MspInit+0xec>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e72:	23c0      	movs	r3, #192	; 0xc0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e82:	2307      	movs	r3, #7
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4820      	ldr	r0, [pc, #128]	; (8000f10 <HAL_UART_MspInit+0xf0>)
 8000e8e:	f001 fbf5 	bl	800267c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e92:	e035      	b.n	8000f00 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1e      	ldr	r2, [pc, #120]	; (8000f14 <HAL_UART_MspInit+0xf4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d130      	bne.n	8000f00 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_UART_MspInit+0xec>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <HAL_UART_MspInit+0xec>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_UART_MspInit+0xec>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_UART_MspInit+0xec>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <HAL_UART_MspInit+0xec>)
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	6153      	str	r3, [r2, #20]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_UART_MspInit+0xec>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ece:	230c      	movs	r3, #12
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ede:	2307      	movs	r3, #7
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f001 fbc6 	bl	800267c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2026      	movs	r0, #38	; 0x26
 8000ef6:	f001 fb14 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000efa:	2026      	movs	r0, #38	; 0x26
 8000efc:	f001 fb2d 	bl	800255a <HAL_NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	3730      	adds	r7, #48	; 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40013800 	.word	0x40013800
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000400 	.word	0x48000400
 8000f14:	40004400 	.word	0x40004400

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f8b4 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <ADC1_2_IRQHandler+0x14>)
 8000f72:	f000 fb61 	bl	8001638 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000f76:	4803      	ldr	r0, [pc, #12]	; (8000f84 <ADC1_2_IRQHandler+0x18>)
 8000f78:	f000 fb5e 	bl	8001638 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000e8 	.word	0x200000e8
 8000f84:	20000030 	.word	0x20000030

08000f88 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000f8e:	f003 f9b9 	bl	8004304 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000f94:	f003 f9b6 	bl	8004304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200001bc 	.word	0x200001bc
 8000fa0:	20000290 	.word	0x20000290

08000fa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <TIM3_IRQHandler+0x10>)
 8000faa:	f003 f9ab 	bl	8004304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000084 	.word	0x20000084

08000fb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <USART2_IRQHandler+0x10>)
 8000fbe:	f004 fa45 	bl	800544c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000208 	.word	0x20000208

08000fcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff6:	490e      	ldr	r1, [pc, #56]	; (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 800100c:	4c0b      	ldr	r4, [pc, #44]	; (800103c <LoopForever+0x16>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800101a:	f7ff ffd7 	bl	8000fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101e:	f005 faaf 	bl	8006580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001022:	f7ff f995 	bl	8000350 <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001028:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001034:	0800664c 	.word	0x0800664c
  ldr r2, =_sbss
 8001038:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800103c:	20000300 	.word	0x20000300

08001040 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <CAN_RX0_IRQHandler>
	...

08001044 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x28>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x28>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f001 fa59 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff fd78 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fa71 	bl	8002576 <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f001 fa39 	bl	8002522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	200002fc 	.word	0x200002fc

080010f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200002fc 	.word	0x200002fc

08001110 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b09a      	sub	sp, #104	; 0x68
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001146:	2300      	movs	r3, #0
 8001148:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e172      	b.n	800143e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	2b00      	cmp	r3, #0
 8001168:	d176      	bne.n	8001258 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	2b00      	cmp	r3, #0
 8001170:	d152      	bne.n	8001218 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff fd05 	bl	8000b9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d13b      	bne.n	8001218 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f001 f87d 	bl	80022a0 <ADC_Disable>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d12f      	bne.n	8001218 <HAL_ADC_Init+0xe0>
 80011b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d12b      	bne.n	8001218 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011c8:	f023 0302 	bic.w	r3, r3, #2
 80011cc:	f043 0202 	orr.w	r2, r3, #2
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011e2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011f2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011f4:	4b94      	ldr	r3, [pc, #592]	; (8001448 <HAL_ADC_Init+0x310>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a94      	ldr	r2, [pc, #592]	; (800144c <HAL_ADC_Init+0x314>)
 80011fa:	fba2 2303 	umull	r2, r3, r2, r3
 80011fe:	0c9a      	lsrs	r2, r3, #18
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800120a:	e002      	b.n	8001212 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	3b01      	subs	r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f9      	bne.n	800120c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001234:	d110      	bne.n	8001258 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f023 0312 	bic.w	r3, r3, #18
 800123e:	f043 0210 	orr.w	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2b00      	cmp	r3, #0
 8001262:	f040 80df 	bne.w	8001424 <HAL_ADC_Init+0x2ec>
 8001266:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 80da 	bne.w	8001424 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 80d2 	bne.w	8001424 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001288:	f043 0202 	orr.w	r2, r3, #2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001290:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <HAL_ADC_Init+0x318>)
 8001292:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129c:	d102      	bne.n	80012a4 <HAL_ADC_Init+0x16c>
 800129e:	4b6d      	ldr	r3, [pc, #436]	; (8001454 <HAL_ADC_Init+0x31c>)
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e002      	b.n	80012aa <HAL_ADC_Init+0x172>
 80012a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012a8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d108      	bne.n	80012ca <HAL_ADC_Init+0x192>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Init+0x192>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_ADC_Init+0x194>
 80012ca:	2300      	movs	r3, #0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d11c      	bne.n	800130a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012d0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d010      	beq.n	80012f8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d107      	bne.n	80012f2 <HAL_ADC_Init+0x1ba>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_ADC_Init+0x1ba>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <HAL_ADC_Init+0x1bc>
 80012f2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d108      	bne.n	800130a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80012f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	431a      	orrs	r2, r3
 8001306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001308:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7e5b      	ldrb	r3, [r3, #25]
 800130e:	035b      	lsls	r3, r3, #13
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001314:	2a01      	cmp	r2, #1
 8001316:	d002      	beq.n	800131e <HAL_ADC_Init+0x1e6>
 8001318:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800131c:	e000      	b.n	8001320 <HAL_ADC_Init+0x1e8>
 800131e:	2200      	movs	r2, #0
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	4313      	orrs	r3, r2
 800132e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001330:	4313      	orrs	r3, r2
 8001332:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d11b      	bne.n	8001376 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7e5b      	ldrb	r3, [r3, #25]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d109      	bne.n	800135a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	3b01      	subs	r3, #1
 800134c:	045a      	lsls	r2, r3, #17
 800134e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001350:	4313      	orrs	r3, r2
 8001352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001356:	663b      	str	r3, [r7, #96]	; 0x60
 8001358:	e00d      	b.n	8001376 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001362:	f043 0220 	orr.w	r2, r3, #32
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f043 0201 	orr.w	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	2b01      	cmp	r3, #1
 800137c:	d007      	beq.n	800138e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	4313      	orrs	r3, r2
 8001388:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800138a:	4313      	orrs	r3, r2
 800138c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b00      	cmp	r3, #0
 800139a:	d114      	bne.n	80013c6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013aa:	f023 0302 	bic.w	r3, r3, #2
 80013ae:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e1b      	ldrb	r3, [r3, #24]
 80013b4:	039a      	lsls	r2, r3, #14
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4313      	orrs	r3, r2
 80013c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013c2:	4313      	orrs	r3, r2
 80013c4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_ADC_Init+0x320>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013d6:	430b      	orrs	r3, r1
 80013d8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d10c      	bne.n	80013fc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f023 010f 	bic.w	r1, r3, #15
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	1e5a      	subs	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
 80013fa:	e007      	b.n	800140c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 020f 	bic.w	r2, r2, #15
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f023 0303 	bic.w	r3, r3, #3
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
 8001422:	e00a      	b.n	800143a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f023 0312 	bic.w	r3, r3, #18
 800142c:	f043 0210 	orr.w	r2, r3, #16
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001434:	2301      	movs	r3, #1
 8001436:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800143a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800143e:	4618      	mov	r0, r3
 8001440:	3768      	adds	r7, #104	; 0x68
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000000 	.word	0x20000000
 800144c:	431bde83 	.word	0x431bde83
 8001450:	50000300 	.word	0x50000300
 8001454:	50000100 	.word	0x50000100
 8001458:	fff0c007 	.word	0xfff0c007

0800145c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	f040 80c6 	bne.w	8001604 <HAL_ADC_Start_IT+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <HAL_ADC_Start_IT+0x2a>
 8001482:	2302      	movs	r3, #2
 8001484:	e0c1      	b.n	800160a <HAL_ADC_Start_IT+0x1ae>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fea2 	bl	80021d8 <ADC_Enable>
 8001494:	4603      	mov	r3, r0
 8001496:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 80ad 	bne.w	80015fa <HAL_ADC_Start_IT+0x19e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014b4:	4b57      	ldr	r3, [pc, #348]	; (8001614 <HAL_ADC_Start_IT+0x1b8>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <HAL_ADC_Start_IT+0x6e>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014c8:	d115      	bne.n	80014f6 <HAL_ADC_Start_IT+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d027      	beq.n	8001534 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014f4:	e01e      	b.n	8001534 <HAL_ADC_Start_IT+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800150a:	d004      	beq.n	8001516 <HAL_ADC_Start_IT+0xba>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a41      	ldr	r2, [pc, #260]	; (8001618 <HAL_ADC_Start_IT+0x1bc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10e      	bne.n	8001534 <HAL_ADC_Start_IT+0xd8>
 8001516:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800152c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001540:	d106      	bne.n	8001550 <HAL_ADC_Start_IT+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f023 0206 	bic.w	r2, r3, #6
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
 800154e:	e002      	b.n	8001556 <HAL_ADC_Start_IT+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	221c      	movs	r2, #28
 8001564:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	2b08      	cmp	r3, #8
 800156c:	d110      	bne.n	8001590 <HAL_ADC_Start_IT+0x134>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0204 	bic.w	r2, r2, #4
 800157c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0208 	orr.w	r2, r2, #8
 800158c:	605a      	str	r2, [r3, #4]
          break;
 800158e:	e008      	b.n	80015a2 <HAL_ADC_Start_IT+0x146>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 020c 	orr.w	r2, r2, #12
 800159e:	605a      	str	r2, [r3, #4]
          break;
 80015a0:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d107      	bne.n	80015ba <HAL_ADC_Start_IT+0x15e>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0210 	bic.w	r2, r2, #16
 80015b8:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_ADC_Start_IT+0x1b8>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d010      	beq.n	80015e8 <HAL_ADC_Start_IT+0x18c>
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_ADC_Start_IT+0x1b8>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d00a      	beq.n	80015e8 <HAL_ADC_Start_IT+0x18c>
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_ADC_Start_IT+0x1b8>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	2b09      	cmp	r3, #9
 80015dc:	d004      	beq.n	80015e8 <HAL_ADC_Start_IT+0x18c>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e6:	d10f      	bne.n	8001608 <HAL_ADC_Start_IT+0x1ac>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0204 	orr.w	r2, r2, #4
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	e006      	b.n	8001608 <HAL_ADC_Start_IT+0x1ac>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001602:	e001      	b.n	8001608 <HAL_ADC_Start_IT+0x1ac>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001604:	2302      	movs	r3, #2
 8001606:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	50000300 	.word	0x50000300
 8001618:	50000100 	.word	0x50000100

0800161c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b04      	cmp	r3, #4
 8001658:	d106      	bne.n	8001668 <HAL_ADC_IRQHandler+0x30>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b04      	cmp	r3, #4
 8001666:	d00d      	beq.n	8001684 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001672:	2b08      	cmp	r3, #8
 8001674:	d17a      	bne.n	800176c <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b08      	cmp	r3, #8
 8001682:	d173      	bne.n	800176c <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800169c:	4b88      	ldr	r3, [pc, #544]	; (80018c0 <HAL_ADC_IRQHandler+0x288>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d010      	beq.n	80016ca <HAL_ADC_IRQHandler+0x92>
 80016a8:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <HAL_ADC_IRQHandler+0x288>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 031f 	and.w	r3, r3, #31
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	d00a      	beq.n	80016ca <HAL_ADC_IRQHandler+0x92>
 80016b4:	4b82      	ldr	r3, [pc, #520]	; (80018c0 <HAL_ADC_IRQHandler+0x288>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	2b09      	cmp	r3, #9
 80016be:	d004      	beq.n	80016ca <HAL_ADC_IRQHandler+0x92>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c8:	d104      	bne.n	80016d4 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	e003      	b.n	80016dc <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80016d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d139      	bne.n	800175e <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d134      	bne.n	800175e <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d12d      	bne.n	800175e <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d11a      	bne.n	8001746 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 020c 	bic.w	r2, r2, #12
 800171e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d112      	bne.n	800175e <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	641a      	str	r2, [r3, #64]	; 0x40
 8001744:	e00b      	b.n	800175e <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f043 0210 	orr.w	r2, r3, #16
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f043 0201 	orr.w	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7fe fd7a 	bl	8000258 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	220c      	movs	r2, #12
 800176a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	2b20      	cmp	r3, #32
 8001778:	d106      	bne.n	8001788 <HAL_ADC_IRQHandler+0x150>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	2b20      	cmp	r3, #32
 8001786:	d00f      	beq.n	80017a8 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001792:	2b40      	cmp	r3, #64	; 0x40
 8001794:	f040 80a9 	bne.w	80018ea <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a2:	2b40      	cmp	r3, #64	; 0x40
 80017a4:	f040 80a1 	bne.w	80018ea <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80017b4:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <HAL_ADC_IRQHandler+0x288>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d010      	beq.n	80017e2 <HAL_ADC_IRQHandler+0x1aa>
 80017c0:	4b3f      	ldr	r3, [pc, #252]	; (80018c0 <HAL_ADC_IRQHandler+0x288>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d00a      	beq.n	80017e2 <HAL_ADC_IRQHandler+0x1aa>
 80017cc:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <HAL_ADC_IRQHandler+0x288>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	2b09      	cmp	r3, #9
 80017d6:	d004      	beq.n	80017e2 <HAL_ADC_IRQHandler+0x1aa>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017e0:	d104      	bne.n	80017ec <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	e003      	b.n	80017f4 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80017ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d16c      	bne.n	80018dc <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00b      	beq.n	8001824 <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001816:	2b00      	cmp	r3, #0
 8001818:	d160      	bne.n	80018dc <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001820:	2b00      	cmp	r3, #0
 8001822:	d15b      	bne.n	80018dc <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182e:	2b40      	cmp	r3, #64	; 0x40
 8001830:	d154      	bne.n	80018dc <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <HAL_ADC_IRQHandler+0x288>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	2b00      	cmp	r3, #0
 800183c:	d010      	beq.n	8001860 <HAL_ADC_IRQHandler+0x228>
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_ADC_IRQHandler+0x288>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	2b06      	cmp	r3, #6
 8001848:	d00a      	beq.n	8001860 <HAL_ADC_IRQHandler+0x228>
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <HAL_ADC_IRQHandler+0x288>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	2b07      	cmp	r3, #7
 8001854:	d004      	beq.n	8001860 <HAL_ADC_IRQHandler+0x228>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800185e:	d104      	bne.n	800186a <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e003      	b.n	8001872 <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800186a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d12f      	bne.n	80018dc <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d11c      	bne.n	80018c4 <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001898:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d114      	bne.n	80018dc <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
 80018be:	e00d      	b.n	80018dc <HAL_ADC_IRQHandler+0x2a4>
 80018c0:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f043 0210 	orr.w	r2, r3, #16
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f043 0201 	orr.w	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f8cb 	bl	8001a78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2260      	movs	r2, #96	; 0x60
 80018e8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f4:	2b80      	cmp	r3, #128	; 0x80
 80018f6:	d113      	bne.n	8001920 <HAL_ADC_IRQHandler+0x2e8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001902:	2b80      	cmp	r3, #128	; 0x80
 8001904:	d10c      	bne.n	8001920 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fbfc 	bl	8001110 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800192e:	d115      	bne.n	800195c <HAL_ADC_IRQHandler+0x324>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800193e:	d10d      	bne.n	800195c <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f8a7 	bl	8001aa0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195a:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800196a:	d115      	bne.n	8001998 <HAL_ADC_IRQHandler+0x360>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800197a:	d10d      	bne.n	8001998 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f893 	bl	8001ab4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001996:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d13d      	bne.n	8001a22 <HAL_ADC_IRQHandler+0x3ea>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	2b10      	cmp	r3, #16
 80019b2:	d136      	bne.n	8001a22 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d102      	bne.n	80019c2 <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 80019bc:	2301      	movs	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e019      	b.n	80019f6 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <HAL_ADC_IRQHandler+0x43c>)
 80019c4:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d10a      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80019e0:	2301      	movs	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e007      	b.n	80019f6 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80019f2:	2301      	movs	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d10e      	bne.n	8001a1a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0c:	f043 0202 	orr.w	r2, r3, #2
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fb85 	bl	8001124 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2210      	movs	r2, #16
 8001a20:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a30:	d11b      	bne.n	8001a6a <HAL_ADC_IRQHandler+0x432>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a40:	d113      	bne.n	8001a6a <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f043 0208 	orr.w	r2, r3, #8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a62:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f811 	bl	8001a8c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	50000300 	.word	0x50000300

08001a78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b09b      	sub	sp, #108	; 0x6c
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x22>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e2a5      	b.n	8002036 <HAL_ADC_ConfigChannel+0x56e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f040 8289 	bne.w	8002014 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d81c      	bhi.n	8001b44 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	231f      	movs	r3, #31
 8001b20:	4093      	lsls	r3, r2
 8001b22:	43db      	mvns	r3, r3
 8001b24:	4019      	ands	r1, r3
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
 8001b42:	e063      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b09      	cmp	r3, #9
 8001b4a:	d81e      	bhi.n	8001b8a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	3b1e      	subs	r3, #30
 8001b60:	221f      	movs	r2, #31
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4019      	ands	r1, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	3b1e      	subs	r3, #30
 8001b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34
 8001b88:	e040      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b0e      	cmp	r3, #14
 8001b90:	d81e      	bhi.n	8001bd0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	3b3c      	subs	r3, #60	; 0x3c
 8001ba6:	221f      	movs	r2, #31
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4019      	ands	r1, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	3b3c      	subs	r3, #60	; 0x3c
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
 8001bce:	e01d      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	3b5a      	subs	r3, #90	; 0x5a
 8001be4:	221f      	movs	r2, #31
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	4019      	ands	r1, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	3b5a      	subs	r3, #90	; 0x5a
 8001c00:	fa00 f203 	lsl.w	r2, r0, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 80e5 	bne.w	8001de6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b09      	cmp	r3, #9
 8001c22:	d91c      	bls.n	8001c5e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6999      	ldr	r1, [r3, #24]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	3b1e      	subs	r3, #30
 8001c36:	2207      	movs	r2, #7
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	4019      	ands	r1, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6898      	ldr	r0, [r3, #8]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3b1e      	subs	r3, #30
 8001c50:	fa00 f203 	lsl.w	r2, r0, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	619a      	str	r2, [r3, #24]
 8001c5c:	e019      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6959      	ldr	r1, [r3, #20]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2207      	movs	r2, #7
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4019      	ands	r1, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6898      	ldr	r0, [r3, #8]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	08db      	lsrs	r3, r3, #3
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d84f      	bhi.n	8001d54 <HAL_ADC_ConfigChannel+0x28c>
 8001cb4:	a201      	add	r2, pc, #4	; (adr r2, 8001cbc <HAL_ADC_ConfigChannel+0x1f4>)
 8001cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cba:	bf00      	nop
 8001cbc:	08001ccd 	.word	0x08001ccd
 8001cc0:	08001cef 	.word	0x08001cef
 8001cc4:	08001d11 	.word	0x08001d11
 8001cc8:	08001d33 	.word	0x08001d33
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cd2:	4b9e      	ldr	r3, [pc, #632]	; (8001f4c <HAL_ADC_ConfigChannel+0x484>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	0691      	lsls	r1, r2, #26
 8001cdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cec:	e07e      	b.n	8001dec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cf4:	4b95      	ldr	r3, [pc, #596]	; (8001f4c <HAL_ADC_ConfigChannel+0x484>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	0691      	lsls	r1, r2, #26
 8001cfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d00:	430a      	orrs	r2, r1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d0c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d0e:	e06d      	b.n	8001dec <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d16:	4b8d      	ldr	r3, [pc, #564]	; (8001f4c <HAL_ADC_ConfigChannel+0x484>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	0691      	lsls	r1, r2, #26
 8001d20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d22:	430a      	orrs	r2, r1
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d2e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d30:	e05c      	b.n	8001dec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d38:	4b84      	ldr	r3, [pc, #528]	; (8001f4c <HAL_ADC_ConfigChannel+0x484>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	0691      	lsls	r1, r2, #26
 8001d42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d44:	430a      	orrs	r2, r1
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d50:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d52:	e04b      	b.n	8001dec <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	069b      	lsls	r3, r3, #26
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d107      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d76:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	069b      	lsls	r3, r3, #26
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d107      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d9a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001da2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	069b      	lsls	r3, r3, #26
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d107      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dbe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	069b      	lsls	r3, r3, #26
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d10a      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001de2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001de4:	e001      	b.n	8001dea <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001de6:	bf00      	nop
 8001de8:	e000      	b.n	8001dec <HAL_ADC_ConfigChannel+0x324>
      break;
 8001dea:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d108      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x344>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x344>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x346>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 810b 	bne.w	800202a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d00f      	beq.n	8001e3c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	400a      	ands	r2, r1
 8001e36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e3a:	e049      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b09      	cmp	r3, #9
 8001e5c:	d91c      	bls.n	8001e98 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6999      	ldr	r1, [r3, #24]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b1b      	subs	r3, #27
 8001e70:	2207      	movs	r2, #7
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	4019      	ands	r1, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6898      	ldr	r0, [r3, #8]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	3b1b      	subs	r3, #27
 8001e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	619a      	str	r2, [r3, #24]
 8001e96:	e01b      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6959      	ldr	r1, [r3, #20]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	2207      	movs	r2, #7
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	4019      	ands	r1, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6898      	ldr	r0, [r3, #8]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HAL_ADC_ConfigChannel+0x488>)
 8001ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d105      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d015      	beq.n	8001f14 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001eec:	2b11      	cmp	r3, #17
 8001eee:	d105      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00b      	beq.n	8001f14 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f00:	2b12      	cmp	r3, #18
 8001f02:	f040 8092 	bne.w	800202a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f040 808b 	bne.w	800202a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f1c:	d102      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x45c>
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <HAL_ADC_ConfigChannel+0x48c>)
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	e002      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x462>
 8001f24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f28:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d10f      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x490>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d108      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x490>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e007      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x492>
 8001f4a:	bf00      	nop
 8001f4c:	83fff000 	.word	0x83fff000
 8001f50:	50000300 	.word	0x50000300
 8001f54:	50000100 	.word	0x50000100
 8001f58:	2300      	movs	r3, #0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d150      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f5e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d010      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d107      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x4b8>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x4b8>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x4ba>
 8001f80:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d13c      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d11d      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x502>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f96:	d118      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_ADC_ConfigChannel+0x57c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a27      	ldr	r2, [pc, #156]	; (8002048 <HAL_ADC_ConfigChannel+0x580>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9a      	lsrs	r2, r3, #18
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fba:	e002      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f9      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fc8:	e02e      	b.n	8002028 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b11      	cmp	r3, #17
 8001fd0:	d10b      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x522>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fda:	d106      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fe6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fe8:	e01e      	b.n	8002028 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b12      	cmp	r3, #18
 8001ff0:	d11a      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ffc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ffe:	e013      	b.n	8002028 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f043 0220 	orr.w	r2, r3, #32
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002012:	e00a      	b.n	800202a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002026:	e000      	b.n	800202a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002028:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002032:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002036:	4618      	mov	r0, r3
 8002038:	376c      	adds	r7, #108	; 0x6c
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000000 	.word	0x20000000
 8002048:	431bde83 	.word	0x431bde83

0800204c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800204c:	b480      	push	{r7}
 800204e:	b099      	sub	sp, #100	; 0x64
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002064:	d102      	bne.n	800206c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002066:	4b5a      	ldr	r3, [pc, #360]	; (80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	e002      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800206c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002070:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0a2      	b.n	80021c2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002086:	2302      	movs	r3, #2
 8002088:	e09b      	b.n	80021c2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d17f      	bne.n	80021a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d179      	bne.n	80021a0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ac:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80020ae:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d040      	beq.n	800213a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80020b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020ca:	035b      	lsls	r3, r3, #13
 80020cc:	430b      	orrs	r3, r1
 80020ce:	431a      	orrs	r2, r3
 80020d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020d2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d108      	bne.n	80020f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80020f4:	2300      	movs	r3, #0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d15c      	bne.n	80021b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002116:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002118:	2b00      	cmp	r3, #0
 800211a:	d14b      	bne.n	80021b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800211c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002124:	f023 030f 	bic.w	r3, r3, #15
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	6811      	ldr	r1, [r2, #0]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	6892      	ldr	r2, [r2, #8]
 8002130:	430a      	orrs	r2, r1
 8002132:	431a      	orrs	r2, r3
 8002134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002136:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002138:	e03c      	b.n	80021b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800213a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002144:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d108      	bne.n	8002166 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002166:	2300      	movs	r3, #0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d123      	bne.n	80021b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d107      	bne.n	8002188 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002188:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d112      	bne.n	80021b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800218e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002196:	f023 030f 	bic.w	r3, r3, #15
 800219a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800219c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800219e:	e009      	b.n	80021b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0220 	orr.w	r2, r3, #32
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80021b2:	e000      	b.n	80021b6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021b4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80021c2:	4618      	mov	r0, r3
 80021c4:	3764      	adds	r7, #100	; 0x64
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	50000100 	.word	0x50000100
 80021d4:	50000300 	.word	0x50000300

080021d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d108      	bne.n	8002204 <ADC_Enable+0x2c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <ADC_Enable+0x2c>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <ADC_Enable+0x2e>
 8002204:	2300      	movs	r3, #0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d143      	bne.n	8002292 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <ADC_Enable+0xc4>)
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00d      	beq.n	8002234 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f043 0210 	orr.w	r2, r3, #16
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e02f      	b.n	8002294 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002244:	f7fe ff58 	bl	80010f8 <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800224a:	e01b      	b.n	8002284 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800224c:	f7fe ff54 	bl	80010f8 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d914      	bls.n	8002284 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d00d      	beq.n	8002284 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f043 0210 	orr.w	r2, r3, #16
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e007      	b.n	8002294 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d1dc      	bne.n	800224c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	8000003f 	.word	0x8000003f

080022a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d108      	bne.n	80022cc <ADC_Disable+0x2c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <ADC_Disable+0x2c>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <ADC_Disable+0x2e>
 80022cc:	2300      	movs	r3, #0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d047      	beq.n	8002362 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030d 	and.w	r3, r3, #13
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10f      	bne.n	8002300 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0202 	orr.w	r2, r2, #2
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2203      	movs	r2, #3
 80022f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80022f8:	f7fe fefe 	bl	80010f8 <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022fe:	e029      	b.n	8002354 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f043 0210 	orr.w	r2, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e023      	b.n	8002364 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800231c:	f7fe feec 	bl	80010f8 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d914      	bls.n	8002354 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d10d      	bne.n	8002354 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f043 0210 	orr.w	r2, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	f043 0201 	orr.w	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e007      	b.n	8002364 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d0dc      	beq.n	800231c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002388:	4013      	ands	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <__NVIC_GetPriorityGrouping+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 0307 	and.w	r3, r3, #7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db0b      	blt.n	80023fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	4907      	ldr	r1, [pc, #28]	; (8002408 <__NVIC_EnableIRQ+0x38>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2001      	movs	r0, #1
 80023f2:	fa00 f202 	lsl.w	r2, r0, r2
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000e100 	.word	0xe000e100

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0a      	blt.n	8002436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	490c      	ldr	r1, [pc, #48]	; (8002458 <__NVIC_SetPriority+0x4c>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	440b      	add	r3, r1
 8002430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002434:	e00a      	b.n	800244c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4908      	ldr	r1, [pc, #32]	; (800245c <__NVIC_SetPriority+0x50>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3b04      	subs	r3, #4
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	440b      	add	r3, r1
 800244a:	761a      	strb	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f1c3 0307 	rsb	r3, r3, #7
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf28      	it	cs
 800247e:	2304      	movcs	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3304      	adds	r3, #4
 8002486:	2b06      	cmp	r3, #6
 8002488:	d902      	bls.n	8002490 <NVIC_EncodePriority+0x30>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3b03      	subs	r3, #3
 800248e:	e000      	b.n	8002492 <NVIC_EncodePriority+0x32>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	4313      	orrs	r3, r2
         );
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f7ff ff8e 	bl	800240c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff29 	bl	800236c <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff3e 	bl	80023b4 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff8e 	bl	8002460 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5d 	bl	800240c <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff31 	bl	80023d0 <__NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffa2 	bl	80024c8 <SysTick_Config>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800259c:	2b02      	cmp	r3, #2
 800259e:	d008      	beq.n	80025b2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2204      	movs	r2, #4
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e020      	b.n	80025f4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 020e 	bic.w	r2, r2, #14
 80025c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	2101      	movs	r1, #1
 80025dc:	fa01 f202 	lsl.w	r2, r1, r2
 80025e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002612:	2b02      	cmp	r3, #2
 8002614:	d005      	beq.n	8002622 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2204      	movs	r2, #4
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
 8002620:	e027      	b.n	8002672 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 020e 	bic.w	r2, r2, #14
 8002630:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0201 	bic.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f202 	lsl.w	r2, r1, r2
 8002650:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	4798      	blx	r3
    } 
  }
  return status;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268a:	e14e      	b.n	800292a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	2101      	movs	r1, #1
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	4013      	ands	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8140 	beq.w	8002924 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d005      	beq.n	80026bc <HAL_GPIO_Init+0x40>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d130      	bne.n	800271e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f2:	2201      	movs	r2, #1
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	f003 0201 	and.w	r2, r3, #1
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b03      	cmp	r3, #3
 8002728:	d017      	beq.n	800275a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	2203      	movs	r2, #3
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d123      	bne.n	80027ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	08da      	lsrs	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3208      	adds	r2, #8
 800276e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	220f      	movs	r2, #15
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4013      	ands	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	08da      	lsrs	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3208      	adds	r2, #8
 80027a8:	6939      	ldr	r1, [r7, #16]
 80027aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	2203      	movs	r2, #3
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 0203 	and.w	r2, r3, #3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 809a 	beq.w	8002924 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f0:	4b55      	ldr	r3, [pc, #340]	; (8002948 <HAL_GPIO_Init+0x2cc>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a54      	ldr	r2, [pc, #336]	; (8002948 <HAL_GPIO_Init+0x2cc>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b52      	ldr	r3, [pc, #328]	; (8002948 <HAL_GPIO_Init+0x2cc>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002808:	4a50      	ldr	r2, [pc, #320]	; (800294c <HAL_GPIO_Init+0x2d0>)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002832:	d013      	beq.n	800285c <HAL_GPIO_Init+0x1e0>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a46      	ldr	r2, [pc, #280]	; (8002950 <HAL_GPIO_Init+0x2d4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00d      	beq.n	8002858 <HAL_GPIO_Init+0x1dc>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a45      	ldr	r2, [pc, #276]	; (8002954 <HAL_GPIO_Init+0x2d8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d007      	beq.n	8002854 <HAL_GPIO_Init+0x1d8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a44      	ldr	r2, [pc, #272]	; (8002958 <HAL_GPIO_Init+0x2dc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_GPIO_Init+0x1d4>
 800284c:	2303      	movs	r3, #3
 800284e:	e006      	b.n	800285e <HAL_GPIO_Init+0x1e2>
 8002850:	2305      	movs	r3, #5
 8002852:	e004      	b.n	800285e <HAL_GPIO_Init+0x1e2>
 8002854:	2302      	movs	r3, #2
 8002856:	e002      	b.n	800285e <HAL_GPIO_Init+0x1e2>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_GPIO_Init+0x1e2>
 800285c:	2300      	movs	r3, #0
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	f002 0203 	and.w	r2, r2, #3
 8002864:	0092      	lsls	r2, r2, #2
 8002866:	4093      	lsls	r3, r2
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800286e:	4937      	ldr	r1, [pc, #220]	; (800294c <HAL_GPIO_Init+0x2d0>)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287c:	4b37      	ldr	r3, [pc, #220]	; (800295c <HAL_GPIO_Init+0x2e0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028a0:	4a2e      	ldr	r2, [pc, #184]	; (800295c <HAL_GPIO_Init+0x2e0>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028a6:	4b2d      	ldr	r3, [pc, #180]	; (800295c <HAL_GPIO_Init+0x2e0>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028ca:	4a24      	ldr	r2, [pc, #144]	; (800295c <HAL_GPIO_Init+0x2e0>)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d0:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_GPIO_Init+0x2e0>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	43db      	mvns	r3, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028f4:	4a19      	ldr	r2, [pc, #100]	; (800295c <HAL_GPIO_Init+0x2e0>)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_GPIO_Init+0x2e0>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800291e:	4a0f      	ldr	r2, [pc, #60]	; (800295c <HAL_GPIO_Init+0x2e0>)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3301      	adds	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	f47f aea9 	bne.w	800268c <HAL_GPIO_Init+0x10>
  }
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40021000 	.word	0x40021000
 800294c:	40010000 	.word	0x40010000
 8002950:	48000400 	.word	0x48000400
 8002954:	48000800 	.word	0x48000800
 8002958:	48000c00 	.word	0x48000c00
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
 800296c:	4613      	mov	r3, r2
 800296e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002970:	787b      	ldrb	r3, [r7, #1]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800297c:	e002      	b.n	8002984 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002996:	af00      	add	r7, sp, #0
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	f000 bef4 	b.w	8003792 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 816a 	beq.w	8002c8e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029ba:	4bb3      	ldr	r3, [pc, #716]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d00c      	beq.n	80029e0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c6:	4bb0      	ldr	r3, [pc, #704]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d159      	bne.n	8002a86 <HAL_RCC_OscConfig+0xf6>
 80029d2:	4bad      	ldr	r3, [pc, #692]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029de:	d152      	bne.n	8002a86 <HAL_RCC_OscConfig+0xf6>
 80029e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d102      	bne.n	8002a12 <HAL_RCC_OscConfig+0x82>
 8002a0c:	4b9e      	ldr	r3, [pc, #632]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	e015      	b.n	8002a3e <HAL_RCC_OscConfig+0xae>
 8002a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a16:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a2a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a2e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a3a:	4b93      	ldr	r3, [pc, #588]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a42:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a46:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a4a:	fa92 f2a2 	rbit	r2, r2
 8002a4e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a52:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a56:	fab2 f282 	clz	r2, r2
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f042 0220 	orr.w	r2, r2, #32
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f002 021f 	and.w	r2, r2, #31
 8002a66:	2101      	movs	r1, #1
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 810c 	beq.w	8002c8c <HAL_RCC_OscConfig+0x2fc>
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 8106 	bne.w	8002c8c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f000 be86 	b.w	8003792 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	d106      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x110>
 8002a92:	4b7d      	ldr	r3, [pc, #500]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7c      	ldr	r2, [pc, #496]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e030      	b.n	8002b02 <HAL_RCC_OscConfig+0x172>
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x134>
 8002aaa:	4b77      	ldr	r3, [pc, #476]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a76      	ldr	r2, [pc, #472]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b74      	ldr	r3, [pc, #464]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a73      	ldr	r2, [pc, #460]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01e      	b.n	8002b02 <HAL_RCC_OscConfig+0x172>
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ace:	d10c      	bne.n	8002aea <HAL_RCC_OscConfig+0x15a>
 8002ad0:	4b6d      	ldr	r3, [pc, #436]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6c      	ldr	r2, [pc, #432]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a69      	ldr	r2, [pc, #420]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	e00b      	b.n	8002b02 <HAL_RCC_OscConfig+0x172>
 8002aea:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a66      	ldr	r2, [pc, #408]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b64      	ldr	r3, [pc, #400]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a63      	ldr	r2, [pc, #396]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b02:	4b61      	ldr	r3, [pc, #388]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	f023 020f 	bic.w	r2, r3, #15
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	495d      	ldr	r1, [pc, #372]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d059      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe faea 	bl	80010f8 <HAL_GetTick>
 8002b24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b2a:	f7fe fae5 	bl	80010f8 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d902      	bls.n	8002b40 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	f000 be29 	b.w	8003792 <HAL_RCC_OscConfig+0xe02>
 8002b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b44:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b54:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d102      	bne.n	8002b72 <HAL_RCC_OscConfig+0x1e2>
 8002b6c:	4b46      	ldr	r3, [pc, #280]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	e015      	b.n	8002b9e <HAL_RCC_OscConfig+0x20e>
 8002b72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b76:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b8e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ba2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ba6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002baa:	fa92 f2a2 	rbit	r2, r2
 8002bae:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002bb2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002bb6:	fab2 f282 	clz	r2, r2
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	f042 0220 	orr.w	r2, r2, #32
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	f002 021f 	and.w	r2, r2, #31
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0ab      	beq.n	8002b2a <HAL_RCC_OscConfig+0x19a>
 8002bd2:	e05c      	b.n	8002c8e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fa90 	bl	80010f8 <HAL_GetTick>
 8002bd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bde:	f7fe fa8b 	bl	80010f8 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d902      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	f000 bdcf 	b.w	8003792 <HAL_RCC_OscConfig+0xe02>
 8002bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bf8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c08:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d102      	bne.n	8002c26 <HAL_RCC_OscConfig+0x296>
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	e015      	b.n	8002c52 <HAL_RCC_OscConfig+0x2c2>
 8002c26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c2a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c3e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c42:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <HAL_RCC_OscConfig+0x2f8>)
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c56:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c5a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c5e:	fa92 f2a2 	rbit	r2, r2
 8002c62:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c66:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c6a:	fab2 f282 	clz	r2, r2
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	f042 0220 	orr.w	r2, r2, #32
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	f002 021f 	and.w	r2, r2, #31
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1ab      	bne.n	8002bde <HAL_RCC_OscConfig+0x24e>
 8002c86:	e002      	b.n	8002c8e <HAL_RCC_OscConfig+0x2fe>
 8002c88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 816f 	beq.w	8002f7c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c9e:	4bd0      	ldr	r3, [pc, #832]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002caa:	4bcd      	ldr	r3, [pc, #820]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d16c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x400>
 8002cb6:	4bca      	ldr	r3, [pc, #808]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d166      	bne.n	8002d90 <HAL_RCC_OscConfig+0x400>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002cd4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x362>
 8002cec:	4bbc      	ldr	r3, [pc, #752]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	e013      	b.n	8002d1a <HAL_RCC_OscConfig+0x38a>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d04:	2302      	movs	r3, #2
 8002d06:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d16:	4bb2      	ldr	r3, [pc, #712]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d20:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d24:	fa92 f2a2 	rbit	r2, r2
 8002d28:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d2c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d30:	fab2 f282 	clz	r2, r2
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f042 0220 	orr.w	r2, r2, #32
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f002 021f 	and.w	r2, r2, #31
 8002d40:	2101      	movs	r1, #1
 8002d42:	fa01 f202 	lsl.w	r2, r1, r2
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <HAL_RCC_OscConfig+0x3cc>
 8002d4c:	1d3b      	adds	r3, r7, #4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d002      	beq.n	8002d5c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f000 bd1b 	b.w	8003792 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	4ba0      	ldr	r3, [pc, #640]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	21f8      	movs	r1, #248	; 0xf8
 8002d6c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d74:	fa91 f1a1 	rbit	r1, r1
 8002d78:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d7c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d80:	fab1 f181 	clz	r1, r1
 8002d84:	b2c9      	uxtb	r1, r1
 8002d86:	408b      	lsls	r3, r1
 8002d88:	4995      	ldr	r1, [pc, #596]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8e:	e0f5      	b.n	8002f7c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 8085 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x516>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002dae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe f996 	bl	80010f8 <HAL_GetTick>
 8002dcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd2:	f7fe f991 	bl	80010f8 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d902      	bls.n	8002de8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	f000 bcd5 	b.w	8003792 <HAL_RCC_OscConfig+0xe02>
 8002de8:	2302      	movs	r3, #2
 8002dea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002dfa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d102      	bne.n	8002e18 <HAL_RCC_OscConfig+0x488>
 8002e12:	4b73      	ldr	r3, [pc, #460]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	e013      	b.n	8002e40 <HAL_RCC_OscConfig+0x4b0>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e3c:	4b68      	ldr	r3, [pc, #416]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2202      	movs	r2, #2
 8002e42:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e46:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e4a:	fa92 f2a2 	rbit	r2, r2
 8002e4e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e52:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f042 0220 	orr.w	r2, r2, #32
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 021f 	and.w	r2, r2, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0af      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b5b      	ldr	r3, [pc, #364]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	21f8      	movs	r1, #248	; 0xf8
 8002e82:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e8a:	fa91 f1a1 	rbit	r1, r1
 8002e8e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e92:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e96:	fab1 f181 	clz	r1, r1
 8002e9a:	b2c9      	uxtb	r1, r1
 8002e9c:	408b      	lsls	r3, r1
 8002e9e:	4950      	ldr	r1, [pc, #320]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]
 8002ea4:	e06a      	b.n	8002f7c <HAL_RCC_OscConfig+0x5ec>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002eb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ec6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2300      	movs	r3, #0
 8002ed0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe f911 	bl	80010f8 <HAL_GetTick>
 8002ed6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002edc:	f7fe f90c 	bl	80010f8 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d902      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	f000 bc50 	b.w	8003792 <HAL_RCC_OscConfig+0xe02>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d102      	bne.n	8002f22 <HAL_RCC_OscConfig+0x592>
 8002f1c:	4b30      	ldr	r3, [pc, #192]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	e013      	b.n	8002f4a <HAL_RCC_OscConfig+0x5ba>
 8002f22:	2302      	movs	r3, #2
 8002f24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f34:	2302      	movs	r3, #2
 8002f36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f46:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <HAL_RCC_OscConfig+0x650>)
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f50:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f54:	fa92 f2a2 	rbit	r2, r2
 8002f58:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f5c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f60:	fab2 f282 	clz	r2, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f042 0220 	orr.w	r2, r2, #32
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f002 021f 	and.w	r2, r2, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f202 	lsl.w	r2, r1, r2
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1af      	bne.n	8002edc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80da 	beq.w	8003140 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d069      	beq.n	800306a <HAL_RCC_OscConfig+0x6da>
 8002f96:	2301      	movs	r3, #1
 8002f98:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCC_OscConfig+0x654>)
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc0:	f7fe f89a 	bl	80010f8 <HAL_GetTick>
 8002fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc8:	e00e      	b.n	8002fe8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fca:	f7fe f895 	bl	80010f8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d906      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e3d9      	b.n	8003792 <HAL_RCC_OscConfig+0xe02>
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	10908120 	.word	0x10908120
 8002fe8:	2302      	movs	r3, #2
 8002fea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ffa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002ffe:	2202      	movs	r2, #2
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	fa93 f2a3 	rbit	r2, r3
 800300c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003016:	2202      	movs	r2, #2
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fa93 f2a3 	rbit	r2, r3
 8003024:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003028:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	4ba5      	ldr	r3, [pc, #660]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 800302c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800302e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003032:	2102      	movs	r1, #2
 8003034:	6019      	str	r1, [r3, #0]
 8003036:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f1a3 	rbit	r1, r3
 8003040:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003044:	6019      	str	r1, [r3, #0]
  return result;
 8003046:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2101      	movs	r1, #1
 800305e:	fa01 f303 	lsl.w	r3, r1, r3
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0b0      	beq.n	8002fca <HAL_RCC_OscConfig+0x63a>
 8003068:	e06a      	b.n	8003140 <HAL_RCC_OscConfig+0x7b0>
 800306a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003080:	601a      	str	r2, [r3, #0]
  return result;
 8003082:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003086:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	4b8c      	ldr	r3, [pc, #560]	; (80032c4 <HAL_RCC_OscConfig+0x934>)
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	461a      	mov	r2, r3
 8003098:	2300      	movs	r3, #0
 800309a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309c:	f7fe f82c 	bl	80010f8 <HAL_GetTick>
 80030a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a4:	e009      	b.n	80030ba <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a6:	f7fe f827 	bl	80010f8 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e36b      	b.n	8003792 <HAL_RCC_OscConfig+0xe02>
 80030ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030be:	2202      	movs	r2, #2
 80030c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	fa93 f2a3 	rbit	r2, r3
 80030cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030d6:	2202      	movs	r2, #2
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	fa93 f2a3 	rbit	r2, r3
 80030e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030ee:	2202      	movs	r2, #2
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003100:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003102:	4b6f      	ldr	r3, [pc, #444]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 8003104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003106:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800310a:	2102      	movs	r1, #2
 800310c:	6019      	str	r1, [r3, #0]
 800310e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	fa93 f1a3 	rbit	r1, r3
 8003118:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800311c:	6019      	str	r1, [r3, #0]
  return result;
 800311e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	2101      	movs	r1, #1
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1b2      	bne.n	80030a6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003140:	1d3b      	adds	r3, r7, #4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 8158 	beq.w	8003400 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003150:	2300      	movs	r3, #0
 8003152:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003156:	4b5a      	ldr	r3, [pc, #360]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d112      	bne.n	8003188 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003162:	4b57      	ldr	r3, [pc, #348]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	4a56      	ldr	r2, [pc, #344]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316c:	61d3      	str	r3, [r2, #28]
 800316e:	4b54      	ldr	r3, [pc, #336]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003176:	f107 0308 	add.w	r3, r7, #8
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	4b4f      	ldr	r3, [pc, #316]	; (80032c8 <HAL_RCC_OscConfig+0x938>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d11a      	bne.n	80031ca <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003194:	4b4c      	ldr	r3, [pc, #304]	; (80032c8 <HAL_RCC_OscConfig+0x938>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a4b      	ldr	r2, [pc, #300]	; (80032c8 <HAL_RCC_OscConfig+0x938>)
 800319a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a0:	f7fd ffaa 	bl	80010f8 <HAL_GetTick>
 80031a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	e009      	b.n	80031be <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031aa:	f7fd ffa5 	bl	80010f8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	; 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e2e9      	b.n	8003792 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b42      	ldr	r3, [pc, #264]	; (80032c8 <HAL_RCC_OscConfig+0x938>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0ef      	beq.n	80031aa <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ca:	1d3b      	adds	r3, r7, #4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x852>
 80031d4:	4b3a      	ldr	r3, [pc, #232]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4a39      	ldr	r2, [pc, #228]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6213      	str	r3, [r2, #32]
 80031e0:	e02f      	b.n	8003242 <HAL_RCC_OscConfig+0x8b2>
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10c      	bne.n	8003206 <HAL_RCC_OscConfig+0x876>
 80031ec:	4b34      	ldr	r3, [pc, #208]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4a33      	ldr	r2, [pc, #204]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	6213      	str	r3, [r2, #32]
 80031f8:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4a30      	ldr	r2, [pc, #192]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 80031fe:	f023 0304 	bic.w	r3, r3, #4
 8003202:	6213      	str	r3, [r2, #32]
 8003204:	e01d      	b.n	8003242 <HAL_RCC_OscConfig+0x8b2>
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b05      	cmp	r3, #5
 800320e:	d10c      	bne.n	800322a <HAL_RCC_OscConfig+0x89a>
 8003210:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4a2a      	ldr	r2, [pc, #168]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	6213      	str	r3, [r2, #32]
 800321c:	4b28      	ldr	r3, [pc, #160]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	4a27      	ldr	r2, [pc, #156]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6213      	str	r3, [r2, #32]
 8003228:	e00b      	b.n	8003242 <HAL_RCC_OscConfig+0x8b2>
 800322a:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a24      	ldr	r2, [pc, #144]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4a21      	ldr	r2, [pc, #132]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d06b      	beq.n	8003324 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324c:	f7fd ff54 	bl	80010f8 <HAL_GetTick>
 8003250:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	e00b      	b.n	800326e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fd ff4f 	bl	80010f8 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e291      	b.n	8003792 <HAL_RCC_OscConfig+0xe02>
 800326e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003272:	2202      	movs	r2, #2
 8003274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	fa93 f2a3 	rbit	r2, r3
 8003280:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800328a:	2202      	movs	r2, #2
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	fa93 f2a3 	rbit	r2, r3
 8003298:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800329c:	601a      	str	r2, [r3, #0]
  return result;
 800329e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a4:	fab3 f383 	clz	r3, r3
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f043 0302 	orr.w	r3, r3, #2
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d109      	bne.n	80032cc <HAL_RCC_OscConfig+0x93c>
 80032b8:	4b01      	ldr	r3, [pc, #4]	; (80032c0 <HAL_RCC_OscConfig+0x930>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	e014      	b.n	80032e8 <HAL_RCC_OscConfig+0x958>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	10908120 	.word	0x10908120
 80032c8:	40007000 	.word	0x40007000
 80032cc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032d0:	2202      	movs	r2, #2
 80032d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	fa93 f2a3 	rbit	r2, r3
 80032de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	4bbb      	ldr	r3, [pc, #748]	; (80035d4 <HAL_RCC_OscConfig+0xc44>)
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032ec:	2102      	movs	r1, #2
 80032ee:	6011      	str	r1, [r2, #0]
 80032f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	fa92 f1a2 	rbit	r1, r2
 80032fa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032fe:	6011      	str	r1, [r2, #0]
  return result;
 8003300:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	fab2 f282 	clz	r2, r2
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f002 021f 	and.w	r2, r2, #31
 8003316:	2101      	movs	r1, #1
 8003318:	fa01 f202 	lsl.w	r2, r1, r2
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d099      	beq.n	8003256 <HAL_RCC_OscConfig+0x8c6>
 8003322:	e063      	b.n	80033ec <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003324:	f7fd fee8 	bl	80010f8 <HAL_GetTick>
 8003328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332c:	e00b      	b.n	8003346 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332e:	f7fd fee3 	bl	80010f8 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e225      	b.n	8003792 <HAL_RCC_OscConfig+0xe02>
 8003346:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800334a:	2202      	movs	r2, #2
 800334c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	fa93 f2a3 	rbit	r2, r3
 8003358:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003362:	2202      	movs	r2, #2
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	fa93 f2a3 	rbit	r2, r3
 8003370:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003374:	601a      	str	r2, [r3, #0]
  return result;
 8003376:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800337a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	b2db      	uxtb	r3, r3
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f043 0302 	orr.w	r3, r3, #2
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d102      	bne.n	8003396 <HAL_RCC_OscConfig+0xa06>
 8003390:	4b90      	ldr	r3, [pc, #576]	; (80035d4 <HAL_RCC_OscConfig+0xc44>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	e00d      	b.n	80033b2 <HAL_RCC_OscConfig+0xa22>
 8003396:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800339a:	2202      	movs	r2, #2
 800339c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	fa93 f2a3 	rbit	r2, r3
 80033a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	4b89      	ldr	r3, [pc, #548]	; (80035d4 <HAL_RCC_OscConfig+0xc44>)
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033b6:	2102      	movs	r1, #2
 80033b8:	6011      	str	r1, [r2, #0]
 80033ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	fa92 f1a2 	rbit	r1, r2
 80033c4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80033c8:	6011      	str	r1, [r2, #0]
  return result;
 80033ca:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	fab2 f282 	clz	r2, r2
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f002 021f 	and.w	r2, r2, #31
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f202 	lsl.w	r2, r1, r2
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1a0      	bne.n	800332e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d105      	bne.n	8003400 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f4:	4b77      	ldr	r3, [pc, #476]	; (80035d4 <HAL_RCC_OscConfig+0xc44>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	4a76      	ldr	r2, [pc, #472]	; (80035d4 <HAL_RCC_OscConfig+0xc44>)
 80033fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003400:	1d3b      	adds	r3, r7, #4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 81c2 	beq.w	8003790 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800340c:	4b71      	ldr	r3, [pc, #452]	; (80035d4 <HAL_RCC_OscConfig+0xc44>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	f000 819c 	beq.w	8003752 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	2b02      	cmp	r3, #2
 8003422:	f040 8114 	bne.w	800364e <HAL_RCC_OscConfig+0xcbe>
 8003426:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800342a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800342e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800343e:	601a      	str	r2, [r3, #0]
  return result;
 8003440:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003444:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003450:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	461a      	mov	r2, r3
 8003458:	2300      	movs	r3, #0
 800345a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fd fe4c 	bl	80010f8 <HAL_GetTick>
 8003460:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003464:	e009      	b.n	800347a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003466:	f7fd fe47 	bl	80010f8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e18b      	b.n	8003792 <HAL_RCC_OscConfig+0xe02>
 800347a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800347e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	fa93 f2a3 	rbit	r2, r3
 800348e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003492:	601a      	str	r2, [r3, #0]
  return result;
 8003494:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003498:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	095b      	lsrs	r3, r3, #5
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d102      	bne.n	80034b4 <HAL_RCC_OscConfig+0xb24>
 80034ae:	4b49      	ldr	r3, [pc, #292]	; (80035d4 <HAL_RCC_OscConfig+0xc44>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	e01b      	b.n	80034ec <HAL_RCC_OscConfig+0xb5c>
 80034b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	fa93 f2a3 	rbit	r2, r3
 80034c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80034d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	fa93 f2a3 	rbit	r2, r3
 80034e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	4b3a      	ldr	r3, [pc, #232]	; (80035d4 <HAL_RCC_OscConfig+0xc44>)
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034f4:	6011      	str	r1, [r2, #0]
 80034f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	fa92 f1a2 	rbit	r1, r2
 8003500:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003504:	6011      	str	r1, [r2, #0]
  return result;
 8003506:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	fab2 f282 	clz	r2, r2
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f042 0220 	orr.w	r2, r2, #32
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f002 021f 	and.w	r2, r2, #31
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f202 	lsl.w	r2, r1, r2
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d19e      	bne.n	8003466 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003528:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <HAL_RCC_OscConfig+0xc44>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	430b      	orrs	r3, r1
 800353e:	4925      	ldr	r1, [pc, #148]	; (80035d4 <HAL_RCC_OscConfig+0xc44>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
 8003544:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800354c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	fa93 f2a3 	rbit	r2, r3
 8003558:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800355c:	601a      	str	r2, [r3, #0]
  return result;
 800355e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003562:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800356e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	461a      	mov	r2, r3
 8003576:	2301      	movs	r3, #1
 8003578:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fd fdbd 	bl	80010f8 <HAL_GetTick>
 800357e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003582:	e009      	b.n	8003598 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003584:	f7fd fdb8 	bl	80010f8 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0fc      	b.n	8003792 <HAL_RCC_OscConfig+0xe02>
 8003598:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800359c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	fa93 f2a3 	rbit	r2, r3
 80035ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035b0:	601a      	str	r2, [r3, #0]
  return result;
 80035b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d105      	bne.n	80035d8 <HAL_RCC_OscConfig+0xc48>
 80035cc:	4b01      	ldr	r3, [pc, #4]	; (80035d4 <HAL_RCC_OscConfig+0xc44>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	e01e      	b.n	8003610 <HAL_RCC_OscConfig+0xc80>
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
 80035d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	fa93 f2a3 	rbit	r2, r3
 80035ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	fa93 f2a3 	rbit	r2, r3
 8003606:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	4b63      	ldr	r3, [pc, #396]	; (800379c <HAL_RCC_OscConfig+0xe0c>)
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003614:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003618:	6011      	str	r1, [r2, #0]
 800361a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	fa92 f1a2 	rbit	r1, r2
 8003624:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003628:	6011      	str	r1, [r2, #0]
  return result;
 800362a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	fab2 f282 	clz	r2, r2
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	f042 0220 	orr.w	r2, r2, #32
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	f002 021f 	and.w	r2, r2, #31
 8003640:	2101      	movs	r1, #1
 8003642:	fa01 f202 	lsl.w	r2, r1, r2
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d09b      	beq.n	8003584 <HAL_RCC_OscConfig+0xbf4>
 800364c:	e0a0      	b.n	8003790 <HAL_RCC_OscConfig+0xe00>
 800364e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003652:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	fa93 f2a3 	rbit	r2, r3
 8003662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003666:	601a      	str	r2, [r3, #0]
  return result;
 8003668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800366c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003678:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	461a      	mov	r2, r3
 8003680:	2300      	movs	r3, #0
 8003682:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fd fd38 	bl	80010f8 <HAL_GetTick>
 8003688:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368c:	e009      	b.n	80036a2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368e:	f7fd fd33 	bl	80010f8 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e077      	b.n	8003792 <HAL_RCC_OscConfig+0xe02>
 80036a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	fa93 f2a3 	rbit	r2, r3
 80036b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ba:	601a      	str	r2, [r3, #0]
  return result;
 80036bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c2:	fab3 f383 	clz	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d102      	bne.n	80036dc <HAL_RCC_OscConfig+0xd4c>
 80036d6:	4b31      	ldr	r3, [pc, #196]	; (800379c <HAL_RCC_OscConfig+0xe0c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	e01b      	b.n	8003714 <HAL_RCC_OscConfig+0xd84>
 80036dc:	f107 0320 	add.w	r3, r7, #32
 80036e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f107 0320 	add.w	r3, r7, #32
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	fa93 f2a3 	rbit	r2, r3
 80036f0:	f107 031c 	add.w	r3, r7, #28
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f107 0318 	add.w	r3, r7, #24
 80036fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	f107 0318 	add.w	r3, r7, #24
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	fa93 f2a3 	rbit	r2, r3
 800370a:	f107 0314 	add.w	r3, r7, #20
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	4b22      	ldr	r3, [pc, #136]	; (800379c <HAL_RCC_OscConfig+0xe0c>)
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f107 0210 	add.w	r2, r7, #16
 8003718:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800371c:	6011      	str	r1, [r2, #0]
 800371e:	f107 0210 	add.w	r2, r7, #16
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	fa92 f1a2 	rbit	r1, r2
 8003728:	f107 020c 	add.w	r2, r7, #12
 800372c:	6011      	str	r1, [r2, #0]
  return result;
 800372e:	f107 020c 	add.w	r2, r7, #12
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	fab2 f282 	clz	r2, r2
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	f042 0220 	orr.w	r2, r2, #32
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	f002 021f 	and.w	r2, r2, #31
 8003744:	2101      	movs	r1, #1
 8003746:	fa01 f202 	lsl.w	r2, r1, r2
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d19e      	bne.n	800368e <HAL_RCC_OscConfig+0xcfe>
 8003750:	e01e      	b.n	8003790 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e018      	b.n	8003792 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003760:	4b0e      	ldr	r3, [pc, #56]	; (800379c <HAL_RCC_OscConfig+0xe0c>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003768:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800376c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003770:	1d3b      	adds	r3, r7, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	429a      	cmp	r2, r3
 8003778:	d108      	bne.n	800378c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800377a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800377e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000

080037a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b09e      	sub	sp, #120	; 0x78
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e162      	b.n	8003a7e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b8:	4b90      	ldr	r3, [pc, #576]	; (80039fc <HAL_RCC_ClockConfig+0x25c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d910      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b8d      	ldr	r3, [pc, #564]	; (80039fc <HAL_RCC_ClockConfig+0x25c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 0207 	bic.w	r2, r3, #7
 80037ce:	498b      	ldr	r1, [pc, #556]	; (80039fc <HAL_RCC_ClockConfig+0x25c>)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b89      	ldr	r3, [pc, #548]	; (80039fc <HAL_RCC_ClockConfig+0x25c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e14a      	b.n	8003a7e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b82      	ldr	r3, [pc, #520]	; (8003a00 <HAL_RCC_ClockConfig+0x260>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	497f      	ldr	r1, [pc, #508]	; (8003a00 <HAL_RCC_ClockConfig+0x260>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80dc 	beq.w	80039cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d13c      	bne.n	8003896 <HAL_RCC_ClockConfig+0xf6>
 800381c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003820:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800382a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382c:	fab3 f383 	clz	r3, r3
 8003830:	b2db      	uxtb	r3, r3
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d102      	bne.n	8003846 <HAL_RCC_ClockConfig+0xa6>
 8003840:	4b6f      	ldr	r3, [pc, #444]	; (8003a00 <HAL_RCC_ClockConfig+0x260>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	e00f      	b.n	8003866 <HAL_RCC_ClockConfig+0xc6>
 8003846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800384a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	667b      	str	r3, [r7, #100]	; 0x64
 8003854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003858:	663b      	str	r3, [r7, #96]	; 0x60
 800385a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003862:	4b67      	ldr	r3, [pc, #412]	; (8003a00 <HAL_RCC_ClockConfig+0x260>)
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800386a:	65ba      	str	r2, [r7, #88]	; 0x58
 800386c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800386e:	fa92 f2a2 	rbit	r2, r2
 8003872:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003874:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003876:	fab2 f282 	clz	r2, r2
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	f042 0220 	orr.w	r2, r2, #32
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	f002 021f 	and.w	r2, r2, #31
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f202 	lsl.w	r2, r1, r2
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d17b      	bne.n	800398a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0f3      	b.n	8003a7e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d13c      	bne.n	8003918 <HAL_RCC_ClockConfig+0x178>
 800389e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d102      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x128>
 80038c2:	4b4f      	ldr	r3, [pc, #316]	; (8003a00 <HAL_RCC_ClockConfig+0x260>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	e00f      	b.n	80038e8 <HAL_RCC_ClockConfig+0x148>
 80038c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	647b      	str	r3, [r7, #68]	; 0x44
 80038d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038da:	643b      	str	r3, [r7, #64]	; 0x40
 80038dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e4:	4b46      	ldr	r3, [pc, #280]	; (8003a00 <HAL_RCC_ClockConfig+0x260>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80038ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038f0:	fa92 f2a2 	rbit	r2, r2
 80038f4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f8:	fab2 f282 	clz	r2, r2
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	f042 0220 	orr.w	r2, r2, #32
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	f002 021f 	and.w	r2, r2, #31
 8003908:	2101      	movs	r1, #1
 800390a:	fa01 f202 	lsl.w	r2, r1, r2
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d13a      	bne.n	800398a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0b2      	b.n	8003a7e <HAL_RCC_ClockConfig+0x2de>
 8003918:	2302      	movs	r3, #2
 800391a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	d102      	bne.n	8003940 <HAL_RCC_ClockConfig+0x1a0>
 800393a:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCC_ClockConfig+0x260>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	e00d      	b.n	800395c <HAL_RCC_ClockConfig+0x1bc>
 8003940:	2302      	movs	r3, #2
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	fa93 f3a3 	rbit	r3, r3
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
 800394c:	2302      	movs	r3, #2
 800394e:	623b      	str	r3, [r7, #32]
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	4b29      	ldr	r3, [pc, #164]	; (8003a00 <HAL_RCC_ClockConfig+0x260>)
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	2202      	movs	r2, #2
 800395e:	61ba      	str	r2, [r7, #24]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	fa92 f2a2 	rbit	r2, r2
 8003966:	617a      	str	r2, [r7, #20]
  return result;
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	fab2 f282 	clz	r2, r2
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	f042 0220 	orr.w	r2, r2, #32
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	f002 021f 	and.w	r2, r2, #31
 800397a:	2101      	movs	r1, #1
 800397c:	fa01 f202 	lsl.w	r2, r1, r2
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e079      	b.n	8003a7e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800398a:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <HAL_RCC_ClockConfig+0x260>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f023 0203 	bic.w	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	491a      	ldr	r1, [pc, #104]	; (8003a00 <HAL_RCC_ClockConfig+0x260>)
 8003998:	4313      	orrs	r3, r2
 800399a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800399c:	f7fd fbac 	bl	80010f8 <HAL_GetTick>
 80039a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a4:	f7fd fba8 	bl	80010f8 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e061      	b.n	8003a7e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <HAL_RCC_ClockConfig+0x260>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 020c 	and.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d1eb      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_ClockConfig+0x25c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d214      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <HAL_RCC_ClockConfig+0x25c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	4906      	ldr	r1, [pc, #24]	; (80039fc <HAL_RCC_ClockConfig+0x25c>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b04      	ldr	r3, [pc, #16]	; (80039fc <HAL_RCC_ClockConfig+0x25c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e040      	b.n	8003a7e <HAL_RCC_ClockConfig+0x2de>
 80039fc:	40022000 	.word	0x40022000
 8003a00:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_RCC_ClockConfig+0x2e8>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	491a      	ldr	r1, [pc, #104]	; (8003a88 <HAL_RCC_ClockConfig+0x2e8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a2e:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <HAL_RCC_ClockConfig+0x2e8>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4912      	ldr	r1, [pc, #72]	; (8003a88 <HAL_RCC_ClockConfig+0x2e8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a42:	f000 f829 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8003a46:	4601      	mov	r1, r0
 8003a48:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <HAL_RCC_ClockConfig+0x2e8>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a50:	22f0      	movs	r2, #240	; 0xf0
 8003a52:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	fa92 f2a2 	rbit	r2, r2
 8003a5a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	fab2 f282 	clz	r2, r2
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	40d3      	lsrs	r3, r2
 8003a66:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <HAL_RCC_ClockConfig+0x2ec>)
 8003a68:	5cd3      	ldrb	r3, [r2, r3]
 8003a6a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a6e:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <HAL_RCC_ClockConfig+0x2f0>)
 8003a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a72:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <HAL_RCC_ClockConfig+0x2f4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fd fafa 	bl	8001070 <HAL_InitTick>
  
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3778      	adds	r7, #120	; 0x78
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	0800660c 	.word	0x0800660c
 8003a90:	20000000 	.word	0x20000000
 8003a94:	20000004 	.word	0x20000004

08003a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b08b      	sub	sp, #44	; 0x2c
 8003a9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ab2:	4b29      	ldr	r3, [pc, #164]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d002      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x36>
 8003ac6:	e03c      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ac8:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003aca:	623b      	str	r3, [r7, #32]
      break;
 8003acc:	e03c      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ad4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ad8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	fa92 f2a2 	rbit	r2, r2
 8003ae0:	607a      	str	r2, [r7, #4]
  return result;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	fab2 f282 	clz	r2, r2
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	40d3      	lsrs	r3, r2
 8003aec:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aee:	5cd3      	ldrb	r3, [r2, r3]
 8003af0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003af2:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	220f      	movs	r2, #15
 8003afc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	fa92 f2a2 	rbit	r2, r2
 8003b04:	60fa      	str	r2, [r7, #12]
  return result;
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	fab2 f282 	clz	r2, r2
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	40d3      	lsrs	r3, r2
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b12:	5cd3      	ldrb	r3, [r2, r3]
 8003b14:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b20:	4a0e      	ldr	r2, [pc, #56]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b30:	e004      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	4a0c      	ldr	r2, [pc, #48]	; (8003b68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	623b      	str	r3, [r7, #32]
      break;
 8003b40:	e002      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b44:	623b      	str	r3, [r7, #32]
      break;
 8003b46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b48:	6a3b      	ldr	r3, [r7, #32]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	372c      	adds	r7, #44	; 0x2c
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	007a1200 	.word	0x007a1200
 8003b60:	08006624 	.word	0x08006624
 8003b64:	08006634 	.word	0x08006634
 8003b68:	003d0900 	.word	0x003d0900

08003b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000000 	.word	0x20000000

08003b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b8a:	f7ff ffef 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003b8e:	4601      	mov	r1, r0
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b98:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	fa92 f2a2 	rbit	r2, r2
 8003ba4:	603a      	str	r2, [r7, #0]
  return result;
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	fab2 f282 	clz	r2, r2
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	40d3      	lsrs	r3, r2
 8003bb0:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003bb2:	5cd3      	ldrb	r3, [r2, r3]
 8003bb4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	0800661c 	.word	0x0800661c

08003bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003bce:	f7ff ffcd 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003bdc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003be0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	fa92 f2a2 	rbit	r2, r2
 8003be8:	603a      	str	r2, [r7, #0]
  return result;
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	fab2 f282 	clz	r2, r2
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	40d3      	lsrs	r3, r2
 8003bf4:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003bf6:	5cd3      	ldrb	r3, [r2, r3]
 8003bf8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000
 8003c08:	0800661c 	.word	0x0800661c

08003c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b092      	sub	sp, #72	; 0x48
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80cd 	beq.w	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c30:	4b86      	ldr	r3, [pc, #536]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10e      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3c:	4b83      	ldr	r3, [pc, #524]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	4a82      	ldr	r2, [pc, #520]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c46:	61d3      	str	r3, [r2, #28]
 8003c48:	4b80      	ldr	r3, [pc, #512]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5a:	4b7d      	ldr	r3, [pc, #500]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d118      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c66:	4b7a      	ldr	r3, [pc, #488]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a79      	ldr	r2, [pc, #484]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c72:	f7fd fa41 	bl	80010f8 <HAL_GetTick>
 8003c76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c78:	e008      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7a:	f7fd fa3d 	bl	80010f8 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b64      	cmp	r3, #100	; 0x64
 8003c86:	d901      	bls.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e0db      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	4b70      	ldr	r3, [pc, #448]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c98:	4b6c      	ldr	r3, [pc, #432]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d07d      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d076      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cb6:	4b65      	ldr	r3, [pc, #404]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cc4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	fa93 f3a3 	rbit	r3, r3
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b5e      	ldr	r3, [pc, #376]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4b55      	ldr	r3, [pc, #340]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	461a      	mov	r2, r3
 8003d04:	2300      	movs	r3, #0
 8003d06:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d08:	4a50      	ldr	r2, [pc, #320]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d045      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fd f9ee 	bl	80010f8 <HAL_GetTick>
 8003d1c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d20:	f7fd f9ea 	bl	80010f8 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e086      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003d36:	2302      	movs	r3, #2
 8003d38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
 8003d42:	2302      	movs	r3, #2
 8003d44:	623b      	str	r3, [r7, #32]
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	fa93 f3a3 	rbit	r3, r3
 8003d4c:	61fb      	str	r3, [r7, #28]
  return result;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d50:	fab3 f383 	clz	r3, r3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d102      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d64:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	e007      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	4b35      	ldr	r3, [pc, #212]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	613a      	str	r2, [r7, #16]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	fa92 f2a2 	rbit	r2, r2
 8003d84:	60fa      	str	r2, [r7, #12]
  return result;
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	fab2 f282 	clz	r2, r2
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	f002 021f 	and.w	r2, r2, #31
 8003d98:	2101      	movs	r1, #1
 8003d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0bd      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003da4:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4926      	ldr	r1, [pc, #152]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003db6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d105      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbe:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f023 0203 	bic.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	491a      	ldr	r1, [pc, #104]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df4:	4b15      	ldr	r3, [pc, #84]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	f023 0210 	bic.w	r2, r3, #16
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4912      	ldr	r1, [pc, #72]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e12:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	490b      	ldr	r1, [pc, #44]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	4903      	ldr	r1, [pc, #12]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3748      	adds	r7, #72	; 0x48
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40007000 	.word	0x40007000
 8003e54:	10908100 	.word	0x10908100

08003e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e049      	b.n	8003efe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fc ff1a 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f000 fd5a 	bl	8004950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d001      	beq.n	8003f20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e038      	b.n	8003f92 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <HAL_TIM_Base_Start+0x98>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00e      	beq.n	8003f50 <HAL_TIM_Base_Start+0x48>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3a:	d009      	beq.n	8003f50 <HAL_TIM_Base_Start+0x48>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <HAL_TIM_Base_Start+0x9c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d004      	beq.n	8003f50 <HAL_TIM_Base_Start+0x48>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <HAL_TIM_Base_Start+0xa0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d115      	bne.n	8003f7c <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <HAL_TIM_Base_Start+0xa4>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d015      	beq.n	8003f8e <HAL_TIM_Base_Start+0x86>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f68:	d011      	beq.n	8003f8e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7a:	e008      	b.n	8003f8e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e000      	b.n	8003f90 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	00010007 	.word	0x00010007

08003fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d001      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e040      	b.n	800404a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <HAL_TIM_Base_Start_IT+0xa8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <HAL_TIM_Base_Start_IT+0x58>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff2:	d009      	beq.n	8004008 <HAL_TIM_Base_Start_IT+0x58>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a18      	ldr	r2, [pc, #96]	; (800405c <HAL_TIM_Base_Start_IT+0xac>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_TIM_Base_Start_IT+0x58>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a17      	ldr	r2, [pc, #92]	; (8004060 <HAL_TIM_Base_Start_IT+0xb0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d115      	bne.n	8004034 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <HAL_TIM_Base_Start_IT+0xb4>)
 8004010:	4013      	ands	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b06      	cmp	r3, #6
 8004018:	d015      	beq.n	8004046 <HAL_TIM_Base_Start_IT+0x96>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004020:	d011      	beq.n	8004046 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004032:	e008      	b.n	8004046 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e000      	b.n	8004048 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004046:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40000400 	.word	0x40000400
 8004060:	40014000 	.word	0x40014000
 8004064:	00010007 	.word	0x00010007

08004068 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e049      	b.n	800410e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f841 	bl	8004116 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f000 fc52 	bl	8004950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <HAL_TIM_PWM_Start+0x24>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e03c      	b.n	80041ca <HAL_TIM_PWM_Start+0x9e>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b04      	cmp	r3, #4
 8004154:	d109      	bne.n	800416a <HAL_TIM_PWM_Start+0x3e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	bf14      	ite	ne
 8004162:	2301      	movne	r3, #1
 8004164:	2300      	moveq	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	e02f      	b.n	80041ca <HAL_TIM_PWM_Start+0x9e>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d109      	bne.n	8004184 <HAL_TIM_PWM_Start+0x58>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	bf14      	ite	ne
 800417c:	2301      	movne	r3, #1
 800417e:	2300      	moveq	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e022      	b.n	80041ca <HAL_TIM_PWM_Start+0x9e>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d109      	bne.n	800419e <HAL_TIM_PWM_Start+0x72>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	bf14      	ite	ne
 8004196:	2301      	movne	r3, #1
 8004198:	2300      	moveq	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	e015      	b.n	80041ca <HAL_TIM_PWM_Start+0x9e>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d109      	bne.n	80041b8 <HAL_TIM_PWM_Start+0x8c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	bf14      	ite	ne
 80041b0:	2301      	movne	r3, #1
 80041b2:	2300      	moveq	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	e008      	b.n	80041ca <HAL_TIM_PWM_Start+0x9e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e088      	b.n	80042e4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d104      	bne.n	80041e2 <HAL_TIM_PWM_Start+0xb6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e0:	e023      	b.n	800422a <HAL_TIM_PWM_Start+0xfe>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_PWM_Start+0xc6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f0:	e01b      	b.n	800422a <HAL_TIM_PWM_Start+0xfe>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_PWM_Start+0xd6>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004200:	e013      	b.n	800422a <HAL_TIM_PWM_Start+0xfe>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b0c      	cmp	r3, #12
 8004206:	d104      	bne.n	8004212 <HAL_TIM_PWM_Start+0xe6>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004210:	e00b      	b.n	800422a <HAL_TIM_PWM_Start+0xfe>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b10      	cmp	r3, #16
 8004216:	d104      	bne.n	8004222 <HAL_TIM_PWM_Start+0xf6>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004220:	e003      	b.n	800422a <HAL_TIM_PWM_Start+0xfe>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2201      	movs	r2, #1
 8004230:	6839      	ldr	r1, [r7, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 ff44 	bl	80050c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2b      	ldr	r2, [pc, #172]	; (80042ec <HAL_TIM_PWM_Start+0x1c0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00e      	beq.n	8004260 <HAL_TIM_PWM_Start+0x134>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2a      	ldr	r2, [pc, #168]	; (80042f0 <HAL_TIM_PWM_Start+0x1c4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d009      	beq.n	8004260 <HAL_TIM_PWM_Start+0x134>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a28      	ldr	r2, [pc, #160]	; (80042f4 <HAL_TIM_PWM_Start+0x1c8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <HAL_TIM_PWM_Start+0x134>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a27      	ldr	r2, [pc, #156]	; (80042f8 <HAL_TIM_PWM_Start+0x1cc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d101      	bne.n	8004264 <HAL_TIM_PWM_Start+0x138>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <HAL_TIM_PWM_Start+0x13a>
 8004264:	2300      	movs	r3, #0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004278:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1b      	ldr	r2, [pc, #108]	; (80042ec <HAL_TIM_PWM_Start+0x1c0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <HAL_TIM_PWM_Start+0x176>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428c:	d009      	beq.n	80042a2 <HAL_TIM_PWM_Start+0x176>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1a      	ldr	r2, [pc, #104]	; (80042fc <HAL_TIM_PWM_Start+0x1d0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_TIM_PWM_Start+0x176>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <HAL_TIM_PWM_Start+0x1c4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d115      	bne.n	80042ce <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	4b15      	ldr	r3, [pc, #84]	; (8004300 <HAL_TIM_PWM_Start+0x1d4>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b06      	cmp	r3, #6
 80042b2:	d015      	beq.n	80042e0 <HAL_TIM_PWM_Start+0x1b4>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ba:	d011      	beq.n	80042e0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042cc:	e008      	b.n	80042e0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0201 	orr.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e000      	b.n	80042e2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40012c00 	.word	0x40012c00
 80042f0:	40014000 	.word	0x40014000
 80042f4:	40014400 	.word	0x40014400
 80042f8:	40014800 	.word	0x40014800
 80042fc:	40000400 	.word	0x40000400
 8004300:	00010007 	.word	0x00010007

08004304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b02      	cmp	r3, #2
 8004318:	d122      	bne.n	8004360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b02      	cmp	r3, #2
 8004326:	d11b      	bne.n	8004360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0202 	mvn.w	r2, #2
 8004330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fae3 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fad5 	bl	80048fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fae6 	bl	8004926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b04      	cmp	r3, #4
 800436c:	d122      	bne.n	80043b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b04      	cmp	r3, #4
 800437a:	d11b      	bne.n	80043b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0204 	mvn.w	r2, #4
 8004384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fab9 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
 80043a0:	e005      	b.n	80043ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 faab 	bl	80048fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fabc 	bl	8004926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0208 	mvn.w	r2, #8
 80043d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2204      	movs	r2, #4
 80043de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa8f 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa81 	bl	80048fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fa92 	bl	8004926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b10      	cmp	r3, #16
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b10      	cmp	r3, #16
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0210 	mvn.w	r2, #16
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2208      	movs	r2, #8
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa65 	bl	8004912 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fa57 	bl	80048fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 fa68 	bl	8004926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d107      	bne.n	8004488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0201 	mvn.w	r2, #1
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fb fed0 	bl	8000228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	2b80      	cmp	r3, #128	; 0x80
 8004494:	d10e      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 ff1c 	bl	80052ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c2:	d10e      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ce:	2b80      	cmp	r3, #128	; 0x80
 80044d0:	d107      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 ff0f 	bl	8005300 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d10e      	bne.n	800450e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d107      	bne.n	800450e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fa16 	bl	800493a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b20      	cmp	r3, #32
 800451a:	d10e      	bne.n	800453a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b20      	cmp	r3, #32
 8004528:	d107      	bne.n	800453a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0220 	mvn.w	r2, #32
 8004532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fecf 	bl	80052d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800455e:	2302      	movs	r3, #2
 8004560:	e0ff      	b.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b14      	cmp	r3, #20
 800456e:	f200 80f0 	bhi.w	8004752 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004572:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004578:	080045cd 	.word	0x080045cd
 800457c:	08004753 	.word	0x08004753
 8004580:	08004753 	.word	0x08004753
 8004584:	08004753 	.word	0x08004753
 8004588:	0800460d 	.word	0x0800460d
 800458c:	08004753 	.word	0x08004753
 8004590:	08004753 	.word	0x08004753
 8004594:	08004753 	.word	0x08004753
 8004598:	0800464f 	.word	0x0800464f
 800459c:	08004753 	.word	0x08004753
 80045a0:	08004753 	.word	0x08004753
 80045a4:	08004753 	.word	0x08004753
 80045a8:	0800468f 	.word	0x0800468f
 80045ac:	08004753 	.word	0x08004753
 80045b0:	08004753 	.word	0x08004753
 80045b4:	08004753 	.word	0x08004753
 80045b8:	080046d1 	.word	0x080046d1
 80045bc:	08004753 	.word	0x08004753
 80045c0:	08004753 	.word	0x08004753
 80045c4:	08004753 	.word	0x08004753
 80045c8:	08004711 	.word	0x08004711
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fa34 	bl	8004a40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0208 	orr.w	r2, r2, #8
 80045e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0204 	bic.w	r2, r2, #4
 80045f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6999      	ldr	r1, [r3, #24]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	619a      	str	r2, [r3, #24]
      break;
 800460a:	e0a5      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fa9a 	bl	8004b4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6999      	ldr	r1, [r3, #24]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	619a      	str	r2, [r3, #24]
      break;
 800464c:	e084      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	4618      	mov	r0, r3
 8004656:	f000 faf9 	bl	8004c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0208 	orr.w	r2, r2, #8
 8004668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0204 	bic.w	r2, r2, #4
 8004678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69d9      	ldr	r1, [r3, #28]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	61da      	str	r2, [r3, #28]
      break;
 800468c:	e064      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fb57 	bl	8004d48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69da      	ldr	r2, [r3, #28]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69d9      	ldr	r1, [r3, #28]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	021a      	lsls	r2, r3, #8
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	61da      	str	r2, [r3, #28]
      break;
 80046ce:	e043      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fb9a 	bl	8004e10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0208 	orr.w	r2, r2, #8
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0204 	bic.w	r2, r2, #4
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800470e:	e023      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fbd8 	bl	8004ecc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800472a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	021a      	lsls	r2, r3, #8
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004750:	e002      	b.n	8004758 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
      break;
 8004756:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004760:	7dfb      	ldrb	r3, [r7, #23]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop

0800476c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_TIM_ConfigClockSource+0x1c>
 8004784:	2302      	movs	r3, #2
 8004786:	e0b6      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x18a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c4:	d03e      	beq.n	8004844 <HAL_TIM_ConfigClockSource+0xd8>
 80047c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ca:	f200 8087 	bhi.w	80048dc <HAL_TIM_ConfigClockSource+0x170>
 80047ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d2:	f000 8086 	beq.w	80048e2 <HAL_TIM_ConfigClockSource+0x176>
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047da:	d87f      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x170>
 80047dc:	2b70      	cmp	r3, #112	; 0x70
 80047de:	d01a      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0xaa>
 80047e0:	2b70      	cmp	r3, #112	; 0x70
 80047e2:	d87b      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x170>
 80047e4:	2b60      	cmp	r3, #96	; 0x60
 80047e6:	d050      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x11e>
 80047e8:	2b60      	cmp	r3, #96	; 0x60
 80047ea:	d877      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x170>
 80047ec:	2b50      	cmp	r3, #80	; 0x50
 80047ee:	d03c      	beq.n	800486a <HAL_TIM_ConfigClockSource+0xfe>
 80047f0:	2b50      	cmp	r3, #80	; 0x50
 80047f2:	d873      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x170>
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	d058      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x13e>
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d86f      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x170>
 80047fc:	2b30      	cmp	r3, #48	; 0x30
 80047fe:	d064      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x15e>
 8004800:	2b30      	cmp	r3, #48	; 0x30
 8004802:	d86b      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x170>
 8004804:	2b20      	cmp	r3, #32
 8004806:	d060      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x15e>
 8004808:	2b20      	cmp	r3, #32
 800480a:	d867      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x170>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d05c      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x15e>
 8004810:	2b10      	cmp	r3, #16
 8004812:	d05a      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x15e>
 8004814:	e062      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6899      	ldr	r1, [r3, #8]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f000 fc2b 	bl	8005080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	609a      	str	r2, [r3, #8]
      break;
 8004842:	e04f      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6899      	ldr	r1, [r3, #8]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f000 fc14 	bl	8005080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004866:	609a      	str	r2, [r3, #8]
      break;
 8004868:	e03c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	461a      	mov	r2, r3
 8004878:	f000 fb88 	bl	8004f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2150      	movs	r1, #80	; 0x50
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fbe1 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004888:	e02c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	461a      	mov	r2, r3
 8004898:	f000 fba7 	bl	8004fea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2160      	movs	r1, #96	; 0x60
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fbd1 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 80048a8:	e01c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6859      	ldr	r1, [r3, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	461a      	mov	r2, r3
 80048b8:	f000 fb68 	bl	8004f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fbc1 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 80048c8:	e00c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f000 fbb8 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 80048da:	e003      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      break;
 80048e0:	e000      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a32      	ldr	r2, [pc, #200]	; (8004a2c <TIM_Base_SetConfig+0xdc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d007      	beq.n	8004978 <TIM_Base_SetConfig+0x28>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d003      	beq.n	8004978 <TIM_Base_SetConfig+0x28>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a2f      	ldr	r2, [pc, #188]	; (8004a30 <TIM_Base_SetConfig+0xe0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d108      	bne.n	800498a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a27      	ldr	r2, [pc, #156]	; (8004a2c <TIM_Base_SetConfig+0xdc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <TIM_Base_SetConfig+0x6a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004998:	d00f      	beq.n	80049ba <TIM_Base_SetConfig+0x6a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a24      	ldr	r2, [pc, #144]	; (8004a30 <TIM_Base_SetConfig+0xe0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00b      	beq.n	80049ba <TIM_Base_SetConfig+0x6a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a23      	ldr	r2, [pc, #140]	; (8004a34 <TIM_Base_SetConfig+0xe4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d007      	beq.n	80049ba <TIM_Base_SetConfig+0x6a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <TIM_Base_SetConfig+0xe8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d003      	beq.n	80049ba <TIM_Base_SetConfig+0x6a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a21      	ldr	r2, [pc, #132]	; (8004a3c <TIM_Base_SetConfig+0xec>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d108      	bne.n	80049cc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <TIM_Base_SetConfig+0xdc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00b      	beq.n	8004a10 <TIM_Base_SetConfig+0xc0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a0e      	ldr	r2, [pc, #56]	; (8004a34 <TIM_Base_SetConfig+0xe4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <TIM_Base_SetConfig+0xc0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0d      	ldr	r2, [pc, #52]	; (8004a38 <TIM_Base_SetConfig+0xe8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_Base_SetConfig+0xc0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a0c      	ldr	r2, [pc, #48]	; (8004a3c <TIM_Base_SetConfig+0xec>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d103      	bne.n	8004a18 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40014000 	.word	0x40014000
 8004a38:	40014400 	.word	0x40014400
 8004a3c:	40014800 	.word	0x40014800

08004a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f023 0302 	bic.w	r3, r3, #2
 8004a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a28      	ldr	r2, [pc, #160]	; (8004b3c <TIM_OC1_SetConfig+0xfc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00b      	beq.n	8004ab8 <TIM_OC1_SetConfig+0x78>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a27      	ldr	r2, [pc, #156]	; (8004b40 <TIM_OC1_SetConfig+0x100>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d007      	beq.n	8004ab8 <TIM_OC1_SetConfig+0x78>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a26      	ldr	r2, [pc, #152]	; (8004b44 <TIM_OC1_SetConfig+0x104>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <TIM_OC1_SetConfig+0x78>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a25      	ldr	r2, [pc, #148]	; (8004b48 <TIM_OC1_SetConfig+0x108>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d10c      	bne.n	8004ad2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f023 0308 	bic.w	r3, r3, #8
 8004abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f023 0304 	bic.w	r3, r3, #4
 8004ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <TIM_OC1_SetConfig+0xfc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00b      	beq.n	8004af2 <TIM_OC1_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a18      	ldr	r2, [pc, #96]	; (8004b40 <TIM_OC1_SetConfig+0x100>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d007      	beq.n	8004af2 <TIM_OC1_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <TIM_OC1_SetConfig+0x104>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_OC1_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <TIM_OC1_SetConfig+0x108>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d111      	bne.n	8004b16 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	621a      	str	r2, [r3, #32]
}
 8004b30:	bf00      	nop
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800

08004b4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0210 	bic.w	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f023 0320 	bic.w	r3, r3, #32
 8004b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a24      	ldr	r2, [pc, #144]	; (8004c3c <TIM_OC2_SetConfig+0xf0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10d      	bne.n	8004bcc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <TIM_OC2_SetConfig+0xf0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00b      	beq.n	8004bec <TIM_OC2_SetConfig+0xa0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a1a      	ldr	r2, [pc, #104]	; (8004c40 <TIM_OC2_SetConfig+0xf4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d007      	beq.n	8004bec <TIM_OC2_SetConfig+0xa0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <TIM_OC2_SetConfig+0xf8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_OC2_SetConfig+0xa0>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <TIM_OC2_SetConfig+0xfc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d113      	bne.n	8004c14 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bf2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bfa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40014000 	.word	0x40014000
 8004c44:	40014400 	.word	0x40014400
 8004c48:	40014800 	.word	0x40014800

08004c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <TIM_OC3_SetConfig+0xec>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d10d      	bne.n	8004cca <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1a      	ldr	r2, [pc, #104]	; (8004d38 <TIM_OC3_SetConfig+0xec>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00b      	beq.n	8004cea <TIM_OC3_SetConfig+0x9e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <TIM_OC3_SetConfig+0xf0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d007      	beq.n	8004cea <TIM_OC3_SetConfig+0x9e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <TIM_OC3_SetConfig+0xf4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <TIM_OC3_SetConfig+0x9e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <TIM_OC3_SetConfig+0xf8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d113      	bne.n	8004d12 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	621a      	str	r2, [r3, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800

08004d48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	031b      	lsls	r3, r3, #12
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <TIM_OC4_SetConfig+0xb8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00b      	beq.n	8004dc4 <TIM_OC4_SetConfig+0x7c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <TIM_OC4_SetConfig+0xbc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d007      	beq.n	8004dc4 <TIM_OC4_SetConfig+0x7c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <TIM_OC4_SetConfig+0xc0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_OC4_SetConfig+0x7c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a13      	ldr	r2, [pc, #76]	; (8004e0c <TIM_OC4_SetConfig+0xc4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d109      	bne.n	8004dd8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	019b      	lsls	r3, r3, #6
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800

08004e10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <TIM_OC5_SetConfig+0xac>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00b      	beq.n	8004e82 <TIM_OC5_SetConfig+0x72>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <TIM_OC5_SetConfig+0xb0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <TIM_OC5_SetConfig+0x72>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <TIM_OC5_SetConfig+0xb4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_OC5_SetConfig+0x72>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <TIM_OC5_SetConfig+0xb8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d109      	bne.n	8004e96 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	621a      	str	r2, [r3, #32]
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800

08004ecc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	021b      	lsls	r3, r3, #8
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	051b      	lsls	r3, r3, #20
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a16      	ldr	r2, [pc, #88]	; (8004f7c <TIM_OC6_SetConfig+0xb0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_OC6_SetConfig+0x74>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a15      	ldr	r2, [pc, #84]	; (8004f80 <TIM_OC6_SetConfig+0xb4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_OC6_SetConfig+0x74>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a14      	ldr	r2, [pc, #80]	; (8004f84 <TIM_OC6_SetConfig+0xb8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC6_SetConfig+0x74>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a13      	ldr	r2, [pc, #76]	; (8004f88 <TIM_OC6_SetConfig+0xbc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d109      	bne.n	8004f54 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	029b      	lsls	r3, r3, #10
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40014000 	.word	0x40014000
 8004f84:	40014400 	.word	0x40014400
 8004f88:	40014800 	.word	0x40014800

08004f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f023 0201 	bic.w	r2, r3, #1
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f023 030a 	bic.w	r3, r3, #10
 8004fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b087      	sub	sp, #28
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f023 0210 	bic.w	r2, r3, #16
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	031b      	lsls	r3, r3, #12
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005026:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	f043 0307 	orr.w	r3, r3, #7
 800506c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	609a      	str	r2, [r3, #8]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800509a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	021a      	lsls	r2, r3, #8
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	609a      	str	r2, [r3, #8]
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 031f 	and.w	r3, r3, #31
 80050d2:	2201      	movs	r2, #1
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	43db      	mvns	r3, r3
 80050e2:	401a      	ands	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1a      	ldr	r2, [r3, #32]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	fa01 f303 	lsl.w	r3, r1, r3
 80050f8:	431a      	orrs	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005120:	2302      	movs	r3, #2
 8005122:	e054      	b.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a24      	ldr	r2, [pc, #144]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d108      	bne.n	8005160 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005154:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a17      	ldr	r2, [pc, #92]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00e      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518c:	d009      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a11      	ldr	r2, [pc, #68]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d10c      	bne.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40014000 	.word	0x40014000

080051e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005200:	2302      	movs	r3, #2
 8005202:	e060      	b.n	80052c6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4313      	orrs	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	041b      	lsls	r3, r3, #16
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d115      	bne.n	80052b4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	051b      	lsls	r3, r3, #20
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	40012c00 	.word	0x40012c00

080052d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e040      	b.n	80053a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fb fd72 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2224      	movs	r2, #36	; 0x24
 8005340:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0201 	bic.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fb78 	bl	8005a48 <UART_SetConfig>
 8005358:	4603      	mov	r3, r0
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e022      	b.n	80053a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fca2 	bl	8005cb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800537e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800538e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fd29 	bl	8005df8 <UART_CheckIdleState>
 80053a6:	4603      	mov	r3, r0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08a      	sub	sp, #40	; 0x28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d13d      	bne.n	8005442 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <HAL_UART_Receive_IT+0x22>
 80053cc:	88fb      	ldrh	r3, [r7, #6]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e036      	b.n	8005444 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_UART_Receive_IT+0x34>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e02f      	b.n	8005444 <HAL_UART_Receive_IT+0x94>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d018      	beq.n	8005432 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	613b      	str	r3, [r7, #16]
   return(result);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	623b      	str	r3, [r7, #32]
 8005420:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	69f9      	ldr	r1, [r7, #28]
 8005424:	6a3a      	ldr	r2, [r7, #32]
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	61bb      	str	r3, [r7, #24]
   return(result);
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e6      	bne.n	8005400 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	461a      	mov	r2, r3
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fdeb 	bl	8006014 <UART_Start_Receive_IT>
 800543e:	4603      	mov	r3, r0
 8005440:	e000      	b.n	8005444 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005442:	2302      	movs	r3, #2
  }
}
 8005444:	4618      	mov	r0, r3
 8005446:	3728      	adds	r7, #40	; 0x28
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b0ba      	sub	sp, #232	; 0xe8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005472:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005476:	f640 030f 	movw	r3, #2063	; 0x80f
 800547a:	4013      	ands	r3, r2
 800547c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005480:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d115      	bne.n	80054b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00f      	beq.n	80054b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 82a3 	beq.w	80059f0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
      }
      return;
 80054b2:	e29d      	b.n	80059f0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f000 8117 	beq.w	80056ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80054ce:	4b85      	ldr	r3, [pc, #532]	; (80056e4 <HAL_UART_IRQHandler+0x298>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 810a 	beq.w	80056ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d011      	beq.n	8005508 <HAL_UART_IRQHandler+0xbc>
 80054e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2201      	movs	r2, #1
 80054f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fe:	f043 0201 	orr.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d011      	beq.n	8005538 <HAL_UART_IRQHandler+0xec>
 8005514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2202      	movs	r2, #2
 8005526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800552e:	f043 0204 	orr.w	r2, r3, #4
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d011      	beq.n	8005568 <HAL_UART_IRQHandler+0x11c>
 8005544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00b      	beq.n	8005568 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2204      	movs	r2, #4
 8005556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555e:	f043 0202 	orr.w	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d017      	beq.n	80055a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005584:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2208      	movs	r2, #8
 8005592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800559a:	f043 0208 	orr.w	r2, r3, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d012      	beq.n	80055d6 <HAL_UART_IRQHandler+0x18a>
 80055b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00c      	beq.n	80055d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055cc:	f043 0220 	orr.w	r2, r3, #32
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8209 	beq.w	80059f4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00d      	beq.n	800560a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005610:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d005      	beq.n	800562e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005626:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800562a:	2b00      	cmp	r3, #0
 800562c:	d04f      	beq.n	80056ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fd9c 	bl	800616c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b40      	cmp	r3, #64	; 0x40
 8005640:	d141      	bne.n	80056c6 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3308      	adds	r3, #8
 8005648:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005658:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800565c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3308      	adds	r3, #8
 800566a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800566e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800567a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1d9      	bne.n	8005642 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	2b00      	cmp	r3, #0
 8005694:	d013      	beq.n	80056be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <HAL_UART_IRQHandler+0x29c>)
 800569c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fc ffac 	bl	8002600 <HAL_DMA_Abort_IT>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d017      	beq.n	80056de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80056b8:	4610      	mov	r0, r2
 80056ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056bc:	e00f      	b.n	80056de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f9ac 	bl	8005a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c4:	e00b      	b.n	80056de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9a8 	bl	8005a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056cc:	e007      	b.n	80056de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f9a4 	bl	8005a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80056dc:	e18a      	b.n	80059f4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056de:	bf00      	nop
    return;
 80056e0:	e188      	b.n	80059f4 <HAL_UART_IRQHandler+0x5a8>
 80056e2:	bf00      	nop
 80056e4:	04000120 	.word	0x04000120
 80056e8:	08006233 	.word	0x08006233

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	f040 8143 	bne.w	800597c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 813c 	beq.w	800597c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8135 	beq.w	800597c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2210      	movs	r2, #16
 8005718:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	f040 80b1 	bne.w	800588c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005736:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 815c 	beq.w	80059f8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800574a:	429a      	cmp	r2, r3
 800574c:	f080 8154 	bcs.w	80059f8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005756:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	2b20      	cmp	r3, #32
 8005762:	f000 8085 	beq.w	8005870 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800577a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800577e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005782:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005790:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005794:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800579c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1da      	bne.n	8005766 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3308      	adds	r3, #8
 80057b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3308      	adds	r3, #8
 80057d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e1      	bne.n	80057b0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3308      	adds	r3, #8
 80057f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005810:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005812:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005816:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800581e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e3      	bne.n	80057ec <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800583e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005840:	f023 0310 	bic.w	r3, r3, #16
 8005844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005852:	65bb      	str	r3, [r7, #88]	; 0x58
 8005854:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005858:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e4      	bne.n	8005830 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	4618      	mov	r0, r3
 800586c:	f7fc fe8f 	bl	800258e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800587c:	b29b      	uxth	r3, r3
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	b29b      	uxth	r3, r3
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f8d3 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800588a:	e0b5      	b.n	80059f8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005898:	b29b      	uxth	r3, r3
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80a7 	beq.w	80059fc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80058ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 80a2 	beq.w	80059fc <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058da:	647b      	str	r3, [r7, #68]	; 0x44
 80058dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e4      	bne.n	80058b8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3308      	adds	r3, #8
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	623b      	str	r3, [r7, #32]
   return(result);
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3308      	adds	r3, #8
 800590e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005912:	633a      	str	r2, [r7, #48]	; 0x30
 8005914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e3      	bne.n	80058ee <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	60fb      	str	r3, [r7, #12]
   return(result);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f023 0310 	bic.w	r3, r3, #16
 800594c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	69b9      	ldr	r1, [r7, #24]
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	617b      	str	r3, [r7, #20]
   return(result);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e4      	bne.n	8005938 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800596e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f85b 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800597a:	e03f      	b.n	80059fc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800597c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00e      	beq.n	80059a6 <HAL_UART_IRQHandler+0x55a>
 8005988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800598c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800599c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fde3 	bl	800656a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059a4:	e02d      	b.n	8005a02 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00e      	beq.n	80059d0 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d008      	beq.n	80059d0 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01c      	beq.n	8005a00 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	4798      	blx	r3
    }
    return;
 80059ce:	e017      	b.n	8005a00 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d012      	beq.n	8005a02 <HAL_UART_IRQHandler+0x5b6>
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00c      	beq.n	8005a02 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fc38 	bl	800625e <UART_EndTransmit_IT>
    return;
 80059ee:	e008      	b.n	8005a02 <HAL_UART_IRQHandler+0x5b6>
      return;
 80059f0:	bf00      	nop
 80059f2:	e006      	b.n	8005a02 <HAL_UART_IRQHandler+0x5b6>
    return;
 80059f4:	bf00      	nop
 80059f6:	e004      	b.n	8005a02 <HAL_UART_IRQHandler+0x5b6>
      return;
 80059f8:	bf00      	nop
 80059fa:	e002      	b.n	8005a02 <HAL_UART_IRQHandler+0x5b6>
      return;
 80059fc:	bf00      	nop
 80059fe:	e000      	b.n	8005a02 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005a00:	bf00      	nop
  }

}
 8005a02:	37e8      	adds	r7, #232	; 0xe8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b8a      	ldr	r3, [pc, #552]	; (8005c9c <UART_SetConfig+0x254>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	6979      	ldr	r1, [r7, #20]
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a78      	ldr	r2, [pc, #480]	; (8005ca0 <UART_SetConfig+0x258>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d120      	bne.n	8005b06 <UART_SetConfig+0xbe>
 8005ac4:	4b77      	ldr	r3, [pc, #476]	; (8005ca4 <UART_SetConfig+0x25c>)
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	f003 0303 	and.w	r3, r3, #3
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d817      	bhi.n	8005b00 <UART_SetConfig+0xb8>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <UART_SetConfig+0x90>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005ae9 	.word	0x08005ae9
 8005adc:	08005af5 	.word	0x08005af5
 8005ae0:	08005afb 	.word	0x08005afb
 8005ae4:	08005aef 	.word	0x08005aef
 8005ae8:	2300      	movs	r3, #0
 8005aea:	77fb      	strb	r3, [r7, #31]
 8005aec:	e01d      	b.n	8005b2a <UART_SetConfig+0xe2>
 8005aee:	2302      	movs	r3, #2
 8005af0:	77fb      	strb	r3, [r7, #31]
 8005af2:	e01a      	b.n	8005b2a <UART_SetConfig+0xe2>
 8005af4:	2304      	movs	r3, #4
 8005af6:	77fb      	strb	r3, [r7, #31]
 8005af8:	e017      	b.n	8005b2a <UART_SetConfig+0xe2>
 8005afa:	2308      	movs	r3, #8
 8005afc:	77fb      	strb	r3, [r7, #31]
 8005afe:	e014      	b.n	8005b2a <UART_SetConfig+0xe2>
 8005b00:	2310      	movs	r3, #16
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e011      	b.n	8005b2a <UART_SetConfig+0xe2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a67      	ldr	r2, [pc, #412]	; (8005ca8 <UART_SetConfig+0x260>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d102      	bne.n	8005b16 <UART_SetConfig+0xce>
 8005b10:	2300      	movs	r3, #0
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e009      	b.n	8005b2a <UART_SetConfig+0xe2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a64      	ldr	r2, [pc, #400]	; (8005cac <UART_SetConfig+0x264>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d102      	bne.n	8005b26 <UART_SetConfig+0xde>
 8005b20:	2300      	movs	r3, #0
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e001      	b.n	8005b2a <UART_SetConfig+0xe2>
 8005b26:	2310      	movs	r3, #16
 8005b28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b32:	d15b      	bne.n	8005bec <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005b34:	7ffb      	ldrb	r3, [r7, #31]
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d827      	bhi.n	8005b8a <UART_SetConfig+0x142>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <UART_SetConfig+0xf8>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b6d 	.word	0x08005b6d
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	08005b8b 	.word	0x08005b8b
 8005b50:	08005b7b 	.word	0x08005b7b
 8005b54:	08005b8b 	.word	0x08005b8b
 8005b58:	08005b8b 	.word	0x08005b8b
 8005b5c:	08005b8b 	.word	0x08005b8b
 8005b60:	08005b83 	.word	0x08005b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b64:	f7fe f80e 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8005b68:	61b8      	str	r0, [r7, #24]
        break;
 8005b6a:	e013      	b.n	8005b94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b6c:	f7fe f82c 	bl	8003bc8 <HAL_RCC_GetPCLK2Freq>
 8005b70:	61b8      	str	r0, [r7, #24]
        break;
 8005b72:	e00f      	b.n	8005b94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b74:	4b4e      	ldr	r3, [pc, #312]	; (8005cb0 <UART_SetConfig+0x268>)
 8005b76:	61bb      	str	r3, [r7, #24]
        break;
 8005b78:	e00c      	b.n	8005b94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7a:	f7fd ff8d 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8005b7e:	61b8      	str	r0, [r7, #24]
        break;
 8005b80:	e008      	b.n	8005b94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b86:	61bb      	str	r3, [r7, #24]
        break;
 8005b88:	e004      	b.n	8005b94 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	77bb      	strb	r3, [r7, #30]
        break;
 8005b92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d074      	beq.n	8005c84 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	005a      	lsls	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	441a      	add	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b0f      	cmp	r3, #15
 8005bb6:	d916      	bls.n	8005be6 <UART_SetConfig+0x19e>
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbe:	d212      	bcs.n	8005be6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f023 030f 	bic.w	r3, r3, #15
 8005bc8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	89fb      	ldrh	r3, [r7, #14]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	89fa      	ldrh	r2, [r7, #14]
 8005be2:	60da      	str	r2, [r3, #12]
 8005be4:	e04e      	b.n	8005c84 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	77bb      	strb	r3, [r7, #30]
 8005bea:	e04b      	b.n	8005c84 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bec:	7ffb      	ldrb	r3, [r7, #31]
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d827      	bhi.n	8005c42 <UART_SetConfig+0x1fa>
 8005bf2:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0x1b0>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c25 	.word	0x08005c25
 8005c00:	08005c2d 	.word	0x08005c2d
 8005c04:	08005c43 	.word	0x08005c43
 8005c08:	08005c33 	.word	0x08005c33
 8005c0c:	08005c43 	.word	0x08005c43
 8005c10:	08005c43 	.word	0x08005c43
 8005c14:	08005c43 	.word	0x08005c43
 8005c18:	08005c3b 	.word	0x08005c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c1c:	f7fd ffb2 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8005c20:	61b8      	str	r0, [r7, #24]
        break;
 8005c22:	e013      	b.n	8005c4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c24:	f7fd ffd0 	bl	8003bc8 <HAL_RCC_GetPCLK2Freq>
 8005c28:	61b8      	str	r0, [r7, #24]
        break;
 8005c2a:	e00f      	b.n	8005c4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c2c:	4b20      	ldr	r3, [pc, #128]	; (8005cb0 <UART_SetConfig+0x268>)
 8005c2e:	61bb      	str	r3, [r7, #24]
        break;
 8005c30:	e00c      	b.n	8005c4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c32:	f7fd ff31 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8005c36:	61b8      	str	r0, [r7, #24]
        break;
 8005c38:	e008      	b.n	8005c4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3e:	61bb      	str	r3, [r7, #24]
        break;
 8005c40:	e004      	b.n	8005c4c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	77bb      	strb	r3, [r7, #30]
        break;
 8005c4a:	bf00      	nop
    }

    if (pclk != 0U)
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d018      	beq.n	8005c84 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	085a      	lsrs	r2, r3, #1
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	441a      	add	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2b0f      	cmp	r3, #15
 8005c6c:	d908      	bls.n	8005c80 <UART_SetConfig+0x238>
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c74:	d204      	bcs.n	8005c80 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	60da      	str	r2, [r3, #12]
 8005c7e:	e001      	b.n	8005c84 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c90:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3720      	adds	r7, #32
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	efff69f3 	.word	0xefff69f3
 8005ca0:	40013800 	.word	0x40013800
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	40004400 	.word	0x40004400
 8005cac:	40004800 	.word	0x40004800
 8005cb0:	007a1200 	.word	0x007a1200

08005cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01a      	beq.n	8005dca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db2:	d10a      	bne.n	8005dca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	605a      	str	r2, [r3, #4]
  }
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e08:	f7fb f976 	bl	80010f8 <HAL_GetTick>
 8005e0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d10e      	bne.n	8005e3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f82d 	bl	8005e8a <UART_WaitOnFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e023      	b.n	8005e82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d10e      	bne.n	8005e66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f817 	bl	8005e8a <UART_WaitOnFlagUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e00d      	b.n	8005e82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b09c      	sub	sp, #112	; 0x70
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	603b      	str	r3, [r7, #0]
 8005e96:	4613      	mov	r3, r2
 8005e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9a:	e0a5      	b.n	8005fe8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea2:	f000 80a1 	beq.w	8005fe8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea6:	f7fb f927 	bl	80010f8 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d302      	bcc.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x32>
 8005eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d13e      	bne.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ecc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005edc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ee0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e6      	bne.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	f023 0301 	bic.w	r3, r3, #1
 8005f04:	663b      	str	r3, [r7, #96]	; 0x60
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e5      	bne.n	8005eee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e067      	b.n	800600a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d04f      	beq.n	8005fe8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f56:	d147      	bne.n	8005fe8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34
 8005f82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e6      	bne.n	8005f62 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	e853 3f00 	ldrex	r3, [r3]
 8005fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fb4:	623a      	str	r2, [r7, #32]
 8005fb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	69f9      	ldr	r1, [r7, #28]
 8005fba:	6a3a      	ldr	r2, [r7, #32]
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e5      	bne.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e010      	b.n	800600a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69da      	ldr	r2, [r3, #28]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	bf0c      	ite	eq
 8005ff8:	2301      	moveq	r3, #1
 8005ffa:	2300      	movne	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	429a      	cmp	r2, r3
 8006004:	f43f af4a 	beq.w	8005e9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3770      	adds	r7, #112	; 0x70
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006014:	b480      	push	{r7}
 8006016:	b091      	sub	sp, #68	; 0x44
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	88fa      	ldrh	r2, [r7, #6]
 800602c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006046:	d10e      	bne.n	8006066 <UART_Start_Receive_IT+0x52>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d105      	bne.n	800605c <UART_Start_Receive_IT+0x48>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006056:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800605a:	e02d      	b.n	80060b8 <UART_Start_Receive_IT+0xa4>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	22ff      	movs	r2, #255	; 0xff
 8006060:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006064:	e028      	b.n	80060b8 <UART_Start_Receive_IT+0xa4>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10d      	bne.n	800608a <UART_Start_Receive_IT+0x76>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <UART_Start_Receive_IT+0x6c>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	22ff      	movs	r2, #255	; 0xff
 800607a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800607e:	e01b      	b.n	80060b8 <UART_Start_Receive_IT+0xa4>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	227f      	movs	r2, #127	; 0x7f
 8006084:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006088:	e016      	b.n	80060b8 <UART_Start_Receive_IT+0xa4>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006092:	d10d      	bne.n	80060b0 <UART_Start_Receive_IT+0x9c>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d104      	bne.n	80060a6 <UART_Start_Receive_IT+0x92>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	227f      	movs	r2, #127	; 0x7f
 80060a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060a4:	e008      	b.n	80060b8 <UART_Start_Receive_IT+0xa4>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	223f      	movs	r2, #63	; 0x3f
 80060aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060ae:	e003      	b.n	80060b8 <UART_Start_Receive_IT+0xa4>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2222      	movs	r2, #34	; 0x22
 80060c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	f043 0301 	orr.w	r3, r3, #1
 80060dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3308      	adds	r3, #8
 80060e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060e6:	637a      	str	r2, [r7, #52]	; 0x34
 80060e8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e5      	bne.n	80060c6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006102:	d107      	bne.n	8006114 <UART_Start_Receive_IT+0x100>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d103      	bne.n	8006114 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4a15      	ldr	r2, [pc, #84]	; (8006164 <UART_Start_Receive_IT+0x150>)
 8006110:	665a      	str	r2, [r3, #100]	; 0x64
 8006112:	e002      	b.n	800611a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4a14      	ldr	r2, [pc, #80]	; (8006168 <UART_Start_Receive_IT+0x154>)
 8006118:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	613b      	str	r3, [r7, #16]
   return(result);
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006136:	63bb      	str	r3, [r7, #56]	; 0x38
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	623b      	str	r3, [r7, #32]
 8006142:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	69f9      	ldr	r1, [r7, #28]
 8006146:	6a3a      	ldr	r2, [r7, #32]
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	61bb      	str	r3, [r7, #24]
   return(result);
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e6      	bne.n	8006122 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3744      	adds	r7, #68	; 0x44
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	0800640f 	.word	0x0800640f
 8006168:	080062b3 	.word	0x080062b3

0800616c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800616c:	b480      	push	{r7}
 800616e:	b095      	sub	sp, #84	; 0x54
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006192:	643b      	str	r3, [r7, #64]	; 0x40
 8006194:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006198:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e6      	bne.n	8006174 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3308      	adds	r3, #8
 80061c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e5      	bne.n	80061a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d118      	bne.n	8006214 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	e853 3f00 	ldrex	r3, [r3]
 80061ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f023 0310 	bic.w	r3, r3, #16
 80061f6:	647b      	str	r3, [r7, #68]	; 0x44
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	461a      	mov	r2, r3
 80061fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006200:	61bb      	str	r3, [r7, #24]
 8006202:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6979      	ldr	r1, [r7, #20]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	613b      	str	r3, [r7, #16]
   return(result);
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e6      	bne.n	80061e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006226:	bf00      	nop
 8006228:	3754      	adds	r7, #84	; 0x54
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff fbe3 	bl	8005a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b088      	sub	sp, #32
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	60bb      	str	r3, [r7, #8]
   return(result);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6979      	ldr	r1, [r7, #20]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	613b      	str	r3, [r7, #16]
   return(result);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e6      	bne.n	8006266 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff fbaf 	bl	8005a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062aa:	bf00      	nop
 80062ac:	3720      	adds	r7, #32
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b096      	sub	sp, #88	; 0x58
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062c8:	2b22      	cmp	r3, #34	; 0x22
 80062ca:	f040 8094 	bne.w	80063f6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062d8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80062dc:	b2d9      	uxtb	r1, r3
 80062de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e8:	400a      	ands	r2, r1
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d177      	bne.n	8006406 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006326:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800632a:	653b      	str	r3, [r7, #80]	; 0x50
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006334:	647b      	str	r3, [r7, #68]	; 0x44
 8006336:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800633a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e6      	bne.n	8006316 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	623b      	str	r3, [r7, #32]
   return(result);
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	f023 0301 	bic.w	r3, r3, #1
 800635e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3308      	adds	r3, #8
 8006366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006368:	633a      	str	r2, [r7, #48]	; 0x30
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800636e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e5      	bne.n	8006348 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638c:	2b01      	cmp	r3, #1
 800638e:	d12e      	bne.n	80063ee <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	e853 3f00 	ldrex	r3, [r3]
 80063a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0310 	bic.w	r3, r3, #16
 80063aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	69b9      	ldr	r1, [r7, #24]
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	617b      	str	r3, [r7, #20]
   return(result);
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e6      	bne.n	8006396 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	2b10      	cmp	r3, #16
 80063d4:	d103      	bne.n	80063de <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2210      	movs	r2, #16
 80063dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fb22 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063ec:	e00b      	b.n	8006406 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7f9 feea 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 80063f4:	e007      	b.n	8006406 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699a      	ldr	r2, [r3, #24]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f042 0208 	orr.w	r2, r2, #8
 8006404:	619a      	str	r2, [r3, #24]
}
 8006406:	bf00      	nop
 8006408:	3758      	adds	r7, #88	; 0x58
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b096      	sub	sp, #88	; 0x58
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800641c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006424:	2b22      	cmp	r3, #34	; 0x22
 8006426:	f040 8094 	bne.w	8006552 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006430:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006438:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800643a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800643e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006442:	4013      	ands	r3, r2
 8006444:	b29a      	uxth	r2, r3
 8006446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006448:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644e:	1c9a      	adds	r2, r3, #2
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d177      	bne.n	8006562 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006490:	643b      	str	r3, [r7, #64]	; 0x40
 8006492:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e6      	bne.n	8006472 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3308      	adds	r3, #8
 80064aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f023 0301 	bic.w	r3, r3, #1
 80064ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3308      	adds	r3, #8
 80064c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e5      	bne.n	80064a4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d12e      	bne.n	800654a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f023 0310 	bic.w	r3, r3, #16
 8006506:	647b      	str	r3, [r7, #68]	; 0x44
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6979      	ldr	r1, [r7, #20]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	613b      	str	r3, [r7, #16]
   return(result);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e6      	bne.n	80064f2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	2b10      	cmp	r3, #16
 8006530:	d103      	bne.n	800653a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2210      	movs	r2, #16
 8006538:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff fa74 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006548:	e00b      	b.n	8006562 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7f9 fe3c 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8006550:	e007      	b.n	8006562 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	699a      	ldr	r2, [r3, #24]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0208 	orr.w	r2, r2, #8
 8006560:	619a      	str	r2, [r3, #24]
}
 8006562:	bf00      	nop
 8006564:	3758      	adds	r7, #88	; 0x58
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
	...

08006580 <__libc_init_array>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	4d0d      	ldr	r5, [pc, #52]	; (80065b8 <__libc_init_array+0x38>)
 8006584:	4c0d      	ldr	r4, [pc, #52]	; (80065bc <__libc_init_array+0x3c>)
 8006586:	1b64      	subs	r4, r4, r5
 8006588:	10a4      	asrs	r4, r4, #2
 800658a:	2600      	movs	r6, #0
 800658c:	42a6      	cmp	r6, r4
 800658e:	d109      	bne.n	80065a4 <__libc_init_array+0x24>
 8006590:	4d0b      	ldr	r5, [pc, #44]	; (80065c0 <__libc_init_array+0x40>)
 8006592:	4c0c      	ldr	r4, [pc, #48]	; (80065c4 <__libc_init_array+0x44>)
 8006594:	f000 f82e 	bl	80065f4 <_init>
 8006598:	1b64      	subs	r4, r4, r5
 800659a:	10a4      	asrs	r4, r4, #2
 800659c:	2600      	movs	r6, #0
 800659e:	42a6      	cmp	r6, r4
 80065a0:	d105      	bne.n	80065ae <__libc_init_array+0x2e>
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a8:	4798      	blx	r3
 80065aa:	3601      	adds	r6, #1
 80065ac:	e7ee      	b.n	800658c <__libc_init_array+0xc>
 80065ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b2:	4798      	blx	r3
 80065b4:	3601      	adds	r6, #1
 80065b6:	e7f2      	b.n	800659e <__libc_init_array+0x1e>
 80065b8:	08006644 	.word	0x08006644
 80065bc:	08006644 	.word	0x08006644
 80065c0:	08006644 	.word	0x08006644
 80065c4:	08006648 	.word	0x08006648

080065c8 <memcpy>:
 80065c8:	440a      	add	r2, r1
 80065ca:	4291      	cmp	r1, r2
 80065cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80065d0:	d100      	bne.n	80065d4 <memcpy+0xc>
 80065d2:	4770      	bx	lr
 80065d4:	b510      	push	{r4, lr}
 80065d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065de:	4291      	cmp	r1, r2
 80065e0:	d1f9      	bne.n	80065d6 <memcpy+0xe>
 80065e2:	bd10      	pop	{r4, pc}

080065e4 <memset>:
 80065e4:	4402      	add	r2, r0
 80065e6:	4603      	mov	r3, r0
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d100      	bne.n	80065ee <memset+0xa>
 80065ec:	4770      	bx	lr
 80065ee:	f803 1b01 	strb.w	r1, [r3], #1
 80065f2:	e7f9      	b.n	80065e8 <memset+0x4>

080065f4 <_init>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr

08006600 <_fini>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	bf00      	nop
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr
