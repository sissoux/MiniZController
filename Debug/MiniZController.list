
MiniZController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000648c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006614  08006614  00016614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800664c  0800664c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800664c  0800664c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800664c  0800664c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800664c  0800664c  0001664c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000000c  08006660  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08006660  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d3f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268f  00000000  00000000  00033d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00036410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  000373b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c427  00000000  00000000  00038268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001319f  00000000  00000000  0005468f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab89a  00000000  00000000  0006782e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001130c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ec  00000000  00000000  0011311c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080065fc 	.word	0x080065fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080065fc 	.word	0x080065fc

080001c8 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a11      	ldr	r2, [pc, #68]	; (8000218 <HAL_UART_RxCpltCallback+0x50>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d11a      	bne.n	800020e <HAL_UART_RxCpltCallback+0x46>
		{
			// Reset timeout
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 80001d8:	4b10      	ldr	r3, [pc, #64]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2200      	movs	r2, #0
 80001de:	625a      	str	r2, [r3, #36]	; 0x24

			// Add received byte to sbus FIFO
			SBUS_AddByte(gSBUSByte);
 80001e0:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <HAL_UART_RxCpltCallback+0x58>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 fbc3 	bl	8000970 <SBUS_AddByte>

			// Available sbus frame ?
			if (SBUS_GetChannel(&gSBUSChannels) == FRAME_COMPLETE)
 80001ea:	480e      	ldr	r0, [pc, #56]	; (8000224 <HAL_UART_RxCpltCallback+0x5c>)
 80001ec:	f000 fbe0 	bl	80009b0 <SBUS_GetChannel>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d106      	bne.n	8000204 <HAL_UART_RxCpltCallback+0x3c>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000200:	f002 fb2c 	bl	800285c <HAL_GPIO_WritePin>
//				II = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_1, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
//				III = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_2, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
//				IV = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_3, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
			}
			// Restart IT
			HAL_UART_Receive_IT(huart, &gSBUSByte, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	4906      	ldr	r1, [pc, #24]	; (8000220 <HAL_UART_RxCpltCallback+0x58>)
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f005 f8d5 	bl	80053b8 <HAL_UART_Receive_IT>
		}
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000208 	.word	0x20000208
 800021c:	20000290 	.word	0x20000290
 8000220:	20000080 	.word	0x20000080
 8000224:	200000d0 	.word	0x200000d0

08000228 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a08      	ldr	r2, [pc, #32]	; (8000254 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d108      	bne.n	800024a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		SBUS_TimeoutCallback();
 8000238:	f000 fbfe 	bl	8000a38 <SBUS_TimeoutCallback>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f002 fb09 	bl	800285c <HAL_GPIO_WritePin>
	}

}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000290 	.word	0x20000290

08000258 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d106      	bne.n	8000276 <HAL_ADC_ConvCpltCallback+0x1e>
	{
		Servo_Feedback = HAL_ADC_GetValue(&hadc1);
 8000268:	480a      	ldr	r0, [pc, #40]	; (8000294 <HAL_ADC_ConvCpltCallback+0x3c>)
 800026a:	f001 f955 	bl	8001518 <HAL_ADC_GetValue>
 800026e:	4603      	mov	r3, r0
 8000270:	4a09      	ldr	r2, [pc, #36]	; (8000298 <HAL_ADC_ConvCpltCallback+0x40>)
 8000272:	6013      	str	r3, [r2, #0]
	}
	else if(hadc == &hadc2)
	{
		Servo_Trim = HAL_ADC_GetValue(&hadc2);
	}
}
 8000274:	e009      	b.n	800028a <HAL_ADC_ConvCpltCallback+0x32>
	else if(hadc == &hadc2)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4a08      	ldr	r2, [pc, #32]	; (800029c <HAL_ADC_ConvCpltCallback+0x44>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d105      	bne.n	800028a <HAL_ADC_ConvCpltCallback+0x32>
		Servo_Trim = HAL_ADC_GetValue(&hadc2);
 800027e:	4807      	ldr	r0, [pc, #28]	; (800029c <HAL_ADC_ConvCpltCallback+0x44>)
 8000280:	f001 f94a 	bl	8001518 <HAL_ADC_GetValue>
 8000284:	4603      	mov	r3, r0
 8000286:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <HAL_ADC_ConvCpltCallback+0x48>)
 8000288:	6013      	str	r3, [r2, #0]
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	200000e8 	.word	0x200000e8
 8000298:	2000002c 	.word	0x2000002c
 800029c:	20000030 	.word	0x20000030
 80002a0:	2000028c 	.word	0x2000028c

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a8:	f000 fe4a 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ac:	f000 f82a 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b0:	f000 fb18 	bl	80008e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002b4:	f000 f884 	bl	80003c0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80002b8:	f000 f952 	bl	8000560 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80002bc:	f000 faa2 	bl	8000804 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80002c0:	f000 fad0 	bl	8000864 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80002c4:	f000 f8ee 	bl	80004a4 <MX_ADC2_Init>
  MX_TIM3_Init();
 80002c8:	f000 fa02 	bl	80006d0 <MX_TIM3_Init>
  MX_TIM16_Init();
 80002cc:	f000 fa74 	bl	80007b8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80002d0:	4807      	ldr	r0, [pc, #28]	; (80002f0 <main+0x4c>)
 80002d2:	f001 f841 	bl	8001358 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002d6:	2100      	movs	r1, #0
 80002d8:	4806      	ldr	r0, [pc, #24]	; (80002f4 <main+0x50>)
 80002da:	f003 feb1 	bl	8004040 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &gSBUSByte, 1);
 80002de:	2201      	movs	r2, #1
 80002e0:	4905      	ldr	r1, [pc, #20]	; (80002f8 <main+0x54>)
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <main+0x58>)
 80002e4:	f005 f868 	bl	80053b8 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80002e8:	4805      	ldr	r0, [pc, #20]	; (8000300 <main+0x5c>)
 80002ea:	f003 fd8b 	bl	8003e04 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ee:	e7fe      	b.n	80002ee <main+0x4a>
 80002f0:	200000e8 	.word	0x200000e8
 80002f4:	20000084 	.word	0x20000084
 80002f8:	20000080 	.word	0x20000080
 80002fc:	20000208 	.word	0x20000208
 8000300:	20000290 	.word	0x20000290

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b096      	sub	sp, #88	; 0x58
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800030e:	2228      	movs	r2, #40	; 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f006 f96a 	bl	80065ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	f107 031c 	add.w	r3, r7, #28
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]
 8000336:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000338:	2302      	movs	r3, #2
 800033a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033c:	2301      	movs	r3, #1
 800033e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000340:	2310      	movs	r3, #16
 8000342:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000344:	2302      	movs	r3, #2
 8000346:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000348:	2300      	movs	r3, #0
 800034a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800034c:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000350:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000352:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fa98 	bl	800288c <HAL_RCC_OscConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000362:	f000 faff 	bl	8000964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000366:	230f      	movs	r3, #15
 8000368:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036a:	2302      	movs	r3, #2
 800036c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800037a:	f107 031c 	add.w	r3, r7, #28
 800037e:	2101      	movs	r1, #1
 8000380:	4618      	mov	r0, r3
 8000382:	f003 f98b 	bl	800369c <HAL_RCC_ClockConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800038c:	f000 faea 	bl	8000964 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000390:	f241 0381 	movw	r3, #4225	; 0x1081
 8000394:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800039a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800039e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	4618      	mov	r0, r3
 80003a8:	f003 fbae 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80003b2:	f000 fad7 	bl	8000964 <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	3758      	adds	r7, #88	; 0x58
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	; 0x28
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003c6:	f107 031c 	add.w	r3, r7, #28
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003e2:	4b2f      	ldr	r3, [pc, #188]	; (80004a0 <MX_ADC1_Init+0xe0>)
 80003e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003ea:	4b2d      	ldr	r3, [pc, #180]	; (80004a0 <MX_ADC1_Init+0xe0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003f0:	4b2b      	ldr	r3, [pc, #172]	; (80004a0 <MX_ADC1_Init+0xe0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003f6:	4b2a      	ldr	r3, [pc, #168]	; (80004a0 <MX_ADC1_Init+0xe0>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003fc:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <MX_ADC1_Init+0xe0>)
 80003fe:	2200      	movs	r2, #0
 8000400:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000402:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <MX_ADC1_Init+0xe0>)
 8000404:	2200      	movs	r2, #0
 8000406:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800040a:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <MX_ADC1_Init+0xe0>)
 800040c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000410:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000412:	4b23      	ldr	r3, [pc, #140]	; (80004a0 <MX_ADC1_Init+0xe0>)
 8000414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000418:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <MX_ADC1_Init+0xe0>)
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <MX_ADC1_Init+0xe0>)
 8000422:	2201      	movs	r2, #1
 8000424:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000426:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <MX_ADC1_Init+0xe0>)
 8000428:	2200      	movs	r2, #0
 800042a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <MX_ADC1_Init+0xe0>)
 8000430:	2204      	movs	r2, #4
 8000432:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <MX_ADC1_Init+0xe0>)
 8000436:	2200      	movs	r2, #0
 8000438:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <MX_ADC1_Init+0xe0>)
 800043c:	2200      	movs	r2, #0
 800043e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000440:	4817      	ldr	r0, [pc, #92]	; (80004a0 <MX_ADC1_Init+0xe0>)
 8000442:	f000 fdf7 	bl	8001034 <HAL_ADC_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800044c:	f000 fa8a 	bl	8000964 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000454:	f107 031c 	add.w	r3, r7, #28
 8000458:	4619      	mov	r1, r3
 800045a:	4811      	ldr	r0, [pc, #68]	; (80004a0 <MX_ADC1_Init+0xe0>)
 800045c:	f001 fd74 	bl	8001f48 <HAL_ADCEx_MultiModeConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000466:	f000 fa7d 	bl	8000964 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800046a:	2302      	movs	r3, #2
 800046c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046e:	2301      	movs	r3, #1
 8000470:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000476:	2303      	movs	r3, #3
 8000478:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4619      	mov	r1, r3
 8000486:	4806      	ldr	r0, [pc, #24]	; (80004a0 <MX_ADC1_Init+0xe0>)
 8000488:	f001 fa9c 	bl	80019c4 <HAL_ADC_ConfigChannel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000492:	f000 fa67 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	3728      	adds	r7, #40	; 0x28
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200000e8 	.word	0x200000e8

080004a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004aa:	463b      	mov	r3, r7
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
 80004b8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80004ba:	4b27      	ldr	r3, [pc, #156]	; (8000558 <MX_ADC2_Init+0xb4>)
 80004bc:	4a27      	ldr	r2, [pc, #156]	; (800055c <MX_ADC2_Init+0xb8>)
 80004be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004c0:	4b25      	ldr	r3, [pc, #148]	; (8000558 <MX_ADC2_Init+0xb4>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004c6:	4b24      	ldr	r3, [pc, #144]	; (8000558 <MX_ADC2_Init+0xb4>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004cc:	4b22      	ldr	r3, [pc, #136]	; (8000558 <MX_ADC2_Init+0xb4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004d2:	4b21      	ldr	r3, [pc, #132]	; (8000558 <MX_ADC2_Init+0xb4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004d8:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <MX_ADC2_Init+0xb4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004e0:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <MX_ADC2_Init+0xb4>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e6:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <MX_ADC2_Init+0xb4>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004ec:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_ADC2_Init+0xb4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80004f2:	4b19      	ldr	r3, [pc, #100]	; (8000558 <MX_ADC2_Init+0xb4>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <MX_ADC2_Init+0xb4>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <MX_ADC2_Init+0xb4>)
 8000502:	2204      	movs	r2, #4
 8000504:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_ADC2_Init+0xb4>)
 8000508:	2200      	movs	r2, #0
 800050a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <MX_ADC2_Init+0xb4>)
 800050e:	2200      	movs	r2, #0
 8000510:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000512:	4811      	ldr	r0, [pc, #68]	; (8000558 <MX_ADC2_Init+0xb4>)
 8000514:	f000 fd8e 	bl	8001034 <HAL_ADC_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800051e:	f000 fa21 	bl	8000964 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000522:	2301      	movs	r3, #1
 8000524:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000526:	2301      	movs	r3, #1
 8000528:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800053a:	463b      	mov	r3, r7
 800053c:	4619      	mov	r1, r3
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <MX_ADC2_Init+0xb4>)
 8000540:	f001 fa40 	bl	80019c4 <HAL_ADC_ConfigChannel>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800054a:	f000 fa0b 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000030 	.word	0x20000030
 800055c:	50000100 	.word	0x50000100

08000560 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b09a      	sub	sp, #104	; 0x68
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000566:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000574:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	615a      	str	r2, [r3, #20]
 8000592:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	222c      	movs	r2, #44	; 0x2c
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f006 f826 	bl	80065ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005a0:	4b49      	ldr	r3, [pc, #292]	; (80006c8 <MX_TIM1_Init+0x168>)
 80005a2:	4a4a      	ldr	r2, [pc, #296]	; (80006cc <MX_TIM1_Init+0x16c>)
 80005a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005a6:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <MX_TIM1_Init+0x168>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ac:	4b46      	ldr	r3, [pc, #280]	; (80006c8 <MX_TIM1_Init+0x168>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005b2:	4b45      	ldr	r3, [pc, #276]	; (80006c8 <MX_TIM1_Init+0x168>)
 80005b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ba:	4b43      	ldr	r3, [pc, #268]	; (80006c8 <MX_TIM1_Init+0x168>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005c0:	4b41      	ldr	r3, [pc, #260]	; (80006c8 <MX_TIM1_Init+0x168>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c6:	4b40      	ldr	r3, [pc, #256]	; (80006c8 <MX_TIM1_Init+0x168>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005cc:	483e      	ldr	r0, [pc, #248]	; (80006c8 <MX_TIM1_Init+0x168>)
 80005ce:	f003 fbc1 	bl	8003d54 <HAL_TIM_Base_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005d8:	f000 f9c4 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005e6:	4619      	mov	r1, r3
 80005e8:	4837      	ldr	r0, [pc, #220]	; (80006c8 <MX_TIM1_Init+0x168>)
 80005ea:	f004 f8c3 	bl	8004774 <HAL_TIM_ConfigClockSource>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80005f4:	f000 f9b6 	bl	8000964 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80005f8:	4833      	ldr	r0, [pc, #204]	; (80006c8 <MX_TIM1_Init+0x168>)
 80005fa:	f003 fc5f 	bl	8003ebc <HAL_TIM_OC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000604:	f000 f9ae 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000608:	2300      	movs	r3, #0
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800060c:	2300      	movs	r3, #0
 800060e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000614:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000618:	4619      	mov	r1, r3
 800061a:	482b      	ldr	r0, [pc, #172]	; (80006c8 <MX_TIM1_Init+0x168>)
 800061c:	f004 fd7a 	bl	8005114 <HAL_TIMEx_MasterConfigSynchronization>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000626:	f000 f99d 	bl	8000964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800062a:	2300      	movs	r3, #0
 800062c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000632:	2300      	movs	r3, #0
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000636:	2300      	movs	r3, #0
 8000638:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063a:	2300      	movs	r3, #0
 800063c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800063e:	2300      	movs	r3, #0
 8000640:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000642:	2300      	movs	r3, #0
 8000644:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000646:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800064a:	2200      	movs	r2, #0
 800064c:	4619      	mov	r1, r3
 800064e:	481e      	ldr	r0, [pc, #120]	; (80006c8 <MX_TIM1_Init+0x168>)
 8000650:	f003 ff02 	bl	8004458 <HAL_TIM_OC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800065a:	f000 f983 	bl	8000964 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800065e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000662:	2204      	movs	r2, #4
 8000664:	4619      	mov	r1, r3
 8000666:	4818      	ldr	r0, [pc, #96]	; (80006c8 <MX_TIM1_Init+0x168>)
 8000668:	f003 fef6 	bl	8004458 <HAL_TIM_OC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000672:	f000 f977 	bl	8000964 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800068a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <MX_TIM1_Init+0x168>)
 80006ac:	f004 fda0 	bl	80051f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80006b6:	f000 f955 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <MX_TIM1_Init+0x168>)
 80006bc:	f000 fad8 	bl	8000c70 <HAL_TIM_MspPostInit>

}
 80006c0:	bf00      	nop
 80006c2:	3768      	adds	r7, #104	; 0x68
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200001bc 	.word	0x200001bc
 80006cc:	40012c00 	.word	0x40012c00

080006d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08e      	sub	sp, #56	; 0x38
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f0:	463b      	mov	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
 80006fe:	615a      	str	r2, [r3, #20]
 8000700:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000702:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <MX_TIM3_Init+0xe0>)
 8000704:	4a2b      	ldr	r2, [pc, #172]	; (80007b4 <MX_TIM3_Init+0xe4>)
 8000706:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 8000708:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <MX_TIM3_Init+0xe0>)
 800070a:	2210      	movs	r2, #16
 800070c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_TIM3_Init+0xe0>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <MX_TIM3_Init+0xe0>)
 8000716:	2232      	movs	r2, #50	; 0x32
 8000718:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <MX_TIM3_Init+0xe0>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <MX_TIM3_Init+0xe0>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000726:	4822      	ldr	r0, [pc, #136]	; (80007b0 <MX_TIM3_Init+0xe0>)
 8000728:	f003 fb14 	bl	8003d54 <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000732:	f000 f917 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800073c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000740:	4619      	mov	r1, r3
 8000742:	481b      	ldr	r0, [pc, #108]	; (80007b0 <MX_TIM3_Init+0xe0>)
 8000744:	f004 f816 	bl	8004774 <HAL_TIM_ConfigClockSource>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800074e:	f000 f909 	bl	8000964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000752:	4817      	ldr	r0, [pc, #92]	; (80007b0 <MX_TIM3_Init+0xe0>)
 8000754:	f003 fc13 	bl	8003f7e <HAL_TIM_PWM_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800075e:	f000 f901 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000762:	2320      	movs	r3, #32
 8000764:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	480f      	ldr	r0, [pc, #60]	; (80007b0 <MX_TIM3_Init+0xe0>)
 8000772:	f004 fccf 	bl	8005114 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800077c:	f000 f8f2 	bl	8000964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000780:	2360      	movs	r3, #96	; 0x60
 8000782:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_TIM3_Init+0xe0>)
 8000798:	f003 fed8 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80007a2:	f000 f8df 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3738      	adds	r7, #56	; 0x38
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000084 	.word	0x20000084
 80007b4:	40000400 	.word	0x40000400

080007b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_TIM16_Init+0x44>)
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <MX_TIM16_Init+0x48>)
 80007c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_TIM16_Init+0x44>)
 80007c4:	221f      	movs	r2, #31
 80007c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_TIM16_Init+0x44>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_TIM16_Init+0x44>)
 80007d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007d4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_TIM16_Init+0x44>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_TIM16_Init+0x44>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_TIM16_Init+0x44>)
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_TIM16_Init+0x44>)
 80007ea:	f003 fab3 	bl	8003d54 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80007f4:	f000 f8b6 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000290 	.word	0x20000290
 8000800:	40014400 	.word	0x40014400

08000804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_USART1_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_USART1_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000810:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_USART1_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART1_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000848:	f004 fd68 	bl	800531c <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f887 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000138 	.word	0x20000138
 8000860:	40013800 	.word	0x40013800

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_USART2_UART_Init+0x78>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <MX_USART2_UART_Init+0x7c>)
 8000872:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 8000876:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 800087e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000882:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 8000886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 80008a6:	2232      	movs	r2, #50	; 0x32
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
                              |UART_ADVFEATURE_DMADISABLEONERROR_INIT;
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 80008ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 80008b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008b8:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 80008bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART2_UART_Init+0x74>)
 80008c4:	f004 fd2a 	bl	800531c <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80008ce:	f000 f849 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000208 	.word	0x20000208
 80008dc:	40004400 	.word	0x40004400
 80008e0:	000186a0 	.word	0x000186a0

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_GPIO_Init+0x7c>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a18      	ldr	r2, [pc, #96]	; (8000960 <MX_GPIO_Init+0x7c>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_GPIO_Init+0x7c>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_GPIO_Init+0x7c>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <MX_GPIO_Init+0x7c>)
 8000918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_GPIO_Init+0x7c>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor1_EN_Pin|Motor2_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f001 ff92 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_EN_Pin Motor2_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = Motor1_EN_Pin|Motor2_EN_Pin|LED_Pin;
 8000938:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f001 fe10 	bl	8002578 <HAL_GPIO_Init>

}
 8000958:	bf00      	nop
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <SBUS_AddByte>:
	return 0;
}


uint32_t SBUS_AddByte(uint8_t Byte)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
	if (gByteBufferIndex < SBUS_FRAME_SIZE)
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <SBUS_AddByte+0x38>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b18      	cmp	r3, #24
 8000980:	d809      	bhi.n	8000996 <SBUS_AddByte+0x26>
		gByteBuffer[gByteBufferIndex++] = Byte;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <SBUS_AddByte+0x38>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	b2d1      	uxtb	r1, r2
 800098a:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <SBUS_AddByte+0x38>)
 800098c:	7011      	strb	r1, [r2, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <SBUS_AddByte+0x3c>)
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	5453      	strb	r3, [r2, r1]

	return gByteBufferIndex;
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <SBUS_AddByte+0x38>)
 8000998:	781b      	ldrb	r3, [r3, #0]
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	200002dc 	.word	0x200002dc
 80009ac:	200002e0 	.word	0x200002e0

080009b0 <SBUS_GetChannel>:


uint32_t SBUS_GetChannel(struct sbuschannels *pChannels)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	if (NULL == pChannels)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <SBUS_GetChannel+0x12>
		return FRAME_PENDING;
 80009be:	2300      	movs	r3, #0
 80009c0:	e030      	b.n	8000a24 <SBUS_GetChannel+0x74>

	// Enough byte received
	if (gByteBufferIndex == SBUS_FRAME_SIZE)
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <SBUS_GetChannel+0x7c>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b19      	cmp	r3, #25
 80009c8:	d12b      	bne.n	8000a22 <SBUS_GetChannel+0x72>
	{
		// Frame with Header and Footer?
		struct sbusframe *pFrame = (struct sbusframe *) gByteBuffer;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <SBUS_GetChannel+0x80>)
 80009cc:	60bb      	str	r3, [r7, #8]

		if (pFrame->Header == SBUS_HEADER && pFrame->Footer == SBUS_FOOTER)
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b0f      	cmp	r3, #15
 80009d4:	d125      	bne.n	8000a22 <SBUS_GetChannel+0x72>
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	7e1b      	ldrb	r3, [r3, #24]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d121      	bne.n	8000a22 <SBUS_GetChannel+0x72>
		{
			uint32_t ret = FRAME_COMPLETE;
 80009de:	2301      	movs	r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]

			// Return the frame
			memcpy(&pChannels[0], &gByteBuffer[1], sizeof(struct sbuschannels));
 80009e2:	2217      	movs	r2, #23
 80009e4:	4913      	ldr	r1, [pc, #76]	; (8000a34 <SBUS_GetChannel+0x84>)
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f005 fdf2 	bl	80065d0 <memcpy>

			// Check for frame errors
			if (pChannels->FrameLost)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7d9b      	ldrb	r3, [r3, #22]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <SBUS_GetChannel+0x52>
				ret |= FRAME_DROPPED;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	60fb      	str	r3, [r7, #12]

			if (pChannels->FailSafe)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7d9b      	ldrb	r3, [r3, #22]
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <SBUS_GetChannel+0x68>
				ret |= FRAME_FAILSAFE;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	60fb      	str	r3, [r7, #12]
//					pChannels->FailSafe,
//					pChannels->FrameLost);
//			CDC_Transmit_FS((uint8_t *)Str, strlen(Str));

			// Reset byte buffer
			gByteBufferIndex = 0;
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SBUS_GetChannel+0x7c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]

			return ret;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	e000      	b.n	8000a24 <SBUS_GetChannel+0x74>
		}
	}

	return FRAME_PENDING;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200002dc 	.word	0x200002dc
 8000a30:	200002e0 	.word	0x200002e0
 8000a34:	200002e1 	.word	0x200002e1

08000a38 <SBUS_TimeoutCallback>:

	return ((int32_t) ChannelValue * ScaleA + ScaleB) / ScaleD;
}

void SBUS_TimeoutCallback(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
	// Reset byte buffer
	gByteBufferIndex = 0;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <SBUS_TimeoutCallback+0x14>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	200002dc 	.word	0x200002dc

08000a50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x44>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_MspInit+0x44>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_MspInit+0x44>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x44>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x44>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x44>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ab8:	d136      	bne.n	8000b28 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000aba:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <HAL_ADC_MspInit+0x110>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a39      	ldr	r2, [pc, #228]	; (8000ba8 <HAL_ADC_MspInit+0x110>)
 8000ac2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ac4:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <HAL_ADC_MspInit+0x110>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d10b      	bne.n	8000ae4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000acc:	4b37      	ldr	r3, [pc, #220]	; (8000bac <HAL_ADC_MspInit+0x114>)
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	4a36      	ldr	r2, [pc, #216]	; (8000bac <HAL_ADC_MspInit+0x114>)
 8000ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	6153      	str	r3, [r2, #20]
 8000ad8:	4b34      	ldr	r3, [pc, #208]	; (8000bac <HAL_ADC_MspInit+0x114>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b31      	ldr	r3, [pc, #196]	; (8000bac <HAL_ADC_MspInit+0x114>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	4a30      	ldr	r2, [pc, #192]	; (8000bac <HAL_ADC_MspInit+0x114>)
 8000aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aee:	6153      	str	r3, [r2, #20]
 8000af0:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <HAL_ADC_MspInit+0x114>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Servo_FB_Pin|Vbat_Meas_Pin;
 8000afc:	2303      	movs	r3, #3
 8000afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b00:	2303      	movs	r3, #3
 8000b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f001 fd31 	bl	8002578 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2012      	movs	r0, #18
 8000b1c:	f001 fc7f 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b20:	2012      	movs	r0, #18
 8000b22:	f001 fc98 	bl	8002456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b26:	e03a      	b.n	8000b9e <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a20      	ldr	r2, [pc, #128]	; (8000bb0 <HAL_ADC_MspInit+0x118>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d135      	bne.n	8000b9e <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <HAL_ADC_MspInit+0x110>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <HAL_ADC_MspInit+0x110>)
 8000b3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_ADC_MspInit+0x110>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d10b      	bne.n	8000b5c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_ADC_MspInit+0x114>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	4a18      	ldr	r2, [pc, #96]	; (8000bac <HAL_ADC_MspInit+0x114>)
 8000b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	6153      	str	r3, [r2, #20]
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_ADC_MspInit+0x114>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <HAL_ADC_MspInit+0x114>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	4a12      	ldr	r2, [pc, #72]	; (8000bac <HAL_ADC_MspInit+0x114>)
 8000b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b66:	6153      	str	r3, [r2, #20]
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_ADC_MspInit+0x114>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Trim_Pin;
 8000b74:	2310      	movs	r3, #16
 8000b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo_Trim_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8a:	f001 fcf5 	bl	8002578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	2012      	movs	r0, #18
 8000b94:	f001 fc43 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b98:	2012      	movs	r0, #18
 8000b9a:	f001 fc5c 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 8000b9e:	bf00      	nop
 8000ba0:	3730      	adds	r7, #48	; 0x30
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000028 	.word	0x20000028
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	50000100 	.word	0x50000100

08000bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <HAL_TIM_Base_MspInit+0xac>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d114      	bne.n	8000bf0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <HAL_TIM_Base_MspInit+0xb0>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <HAL_TIM_Base_MspInit+0xb0>)
 8000bcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <HAL_TIM_Base_MspInit+0xb0>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2019      	movs	r0, #25
 8000be4:	f001 fc1b 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000be8:	2019      	movs	r0, #25
 8000bea:	f001 fc34 	bl	8002456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000bee:	e032      	b.n	8000c56 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <HAL_TIM_Base_MspInit+0xb4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d114      	bne.n	8000c24 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_TIM_Base_MspInit+0xb0>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_TIM_Base_MspInit+0xb0>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	61d3      	str	r3, [r2, #28]
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_TIM_Base_MspInit+0xb0>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	201d      	movs	r0, #29
 8000c18:	f001 fc01 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c1c:	201d      	movs	r0, #29
 8000c1e:	f001 fc1a 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 8000c22:	e018      	b.n	8000c56 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <HAL_TIM_Base_MspInit+0xb8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d113      	bne.n	8000c56 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_TIM_Base_MspInit+0xb0>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <HAL_TIM_Base_MspInit+0xb0>)
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	6193      	str	r3, [r2, #24]
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_TIM_Base_MspInit+0xb0>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2019      	movs	r0, #25
 8000c4c:	f001 fbe7 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c50:	2019      	movs	r0, #25
 8000c52:	f001 fc00 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40012c00 	.word	0x40012c00
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40000400 	.word	0x40000400
 8000c6c:	40014400 	.word	0x40014400

08000c70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <HAL_TIM_MspPostInit+0xa0>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d139      	bne.n	8000d06 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <HAL_TIM_MspPostInit+0xa4>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <HAL_TIM_MspPostInit+0xa4>)
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <HAL_TIM_MspPostInit+0xa4>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_TIM_MspPostInit+0xa4>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <HAL_TIM_MspPostInit+0xa4>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_TIM_MspPostInit+0xa4>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor1_2_Pin|Motor1_1_Pin|Motor2_1_Pin;
 8000cc2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f001 fc49 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor2_2_Pin;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000cf6:	2306      	movs	r3, #6
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor2_2_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_TIM_MspPostInit+0xa8>)
 8000d02:	f001 fc39 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	; 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40012c00 	.word	0x40012c00
 8000d14:	40021000 	.word	0x40021000
 8000d18:	48000400 	.word	0x48000400

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <HAL_UART_MspInit+0xe8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d128      	bne.n	8000d90 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d3e:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <HAL_UART_MspInit+0xec>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	4a31      	ldr	r2, [pc, #196]	; (8000e08 <HAL_UART_MspInit+0xec>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6193      	str	r3, [r2, #24]
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <HAL_UART_MspInit+0xec>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <HAL_UART_MspInit+0xec>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a2b      	ldr	r2, [pc, #172]	; (8000e08 <HAL_UART_MspInit+0xec>)
 8000d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <HAL_UART_MspInit+0xec>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d6e:	23c0      	movs	r3, #192	; 0xc0
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4820      	ldr	r0, [pc, #128]	; (8000e0c <HAL_UART_MspInit+0xf0>)
 8000d8a:	f001 fbf5 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8e:	e035      	b.n	8000dfc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <HAL_UART_MspInit+0xf4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d130      	bne.n	8000dfc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_UART_MspInit+0xec>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <HAL_UART_MspInit+0xec>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	61d3      	str	r3, [r2, #28]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0xec>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_UART_MspInit+0xec>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <HAL_UART_MspInit+0xec>)
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	6153      	str	r3, [r2, #20]
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_UART_MspInit+0xec>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f001 fbc6 	bl	8002578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2026      	movs	r0, #38	; 0x26
 8000df2:	f001 fb14 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000df6:	2026      	movs	r0, #38	; 0x26
 8000df8:	f001 fb2d 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 8000dfc:	bf00      	nop
 8000dfe:	3730      	adds	r7, #48	; 0x30
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40013800 	.word	0x40013800
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	40004400 	.word	0x40004400

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f8b4 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <ADC1_2_IRQHandler+0x14>)
 8000e6e:	f000 fb61 	bl	8001534 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000e72:	4803      	ldr	r0, [pc, #12]	; (8000e80 <ADC1_2_IRQHandler+0x18>)
 8000e74:	f000 fb5e 	bl	8001534 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200000e8 	.word	0x200000e8
 8000e80:	20000030 	.word	0x20000030

08000e84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000e8a:	f003 f9c5 	bl	8004218 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000e8e:	4803      	ldr	r0, [pc, #12]	; (8000e9c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000e90:	f003 f9c2 	bl	8004218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200001bc 	.word	0x200001bc
 8000e9c:	20000290 	.word	0x20000290

08000ea0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <TIM3_IRQHandler+0x10>)
 8000ea6:	f003 f9b7 	bl	8004218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000084 	.word	0x20000084

08000eb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <USART2_IRQHandler+0x10>)
 8000eba:	f004 facb 	bl	8005454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000208 	.word	0x20000208

08000ec8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef2:	490e      	ldr	r1, [pc, #56]	; (8000f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <LoopForever+0xe>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f08:	4c0b      	ldr	r4, [pc, #44]	; (8000f38 <LoopForever+0x16>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f16:	f7ff ffd7 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f005 fb35 	bl	8006588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f1e:	f7ff f9c1 	bl	80002a4 <main>

08000f22 <LoopForever>:

LoopForever:
    b LoopForever
 8000f22:	e7fe      	b.n	8000f22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f24:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f30:	08006654 	.word	0x08006654
  ldr r2, =_sbss
 8000f34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f38:	20000300 	.word	0x20000300

08000f3c <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <CAN_RX0_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x28>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x28>)
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f001 fa59 	bl	8002408 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fd78 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40022000 	.word	0x40022000

08000f6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fa71 	bl	8002472 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f001 fa39 	bl	800241e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	200002fc 	.word	0x200002fc

08000ff4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200002fc 	.word	0x200002fc

0800100c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09a      	sub	sp, #104	; 0x68
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001042:	2300      	movs	r3, #0
 8001044:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e172      	b.n	800133a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	2b00      	cmp	r3, #0
 8001064:	d176      	bne.n	8001154 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	2b00      	cmp	r3, #0
 800106c:	d152      	bne.n	8001114 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff fd05 	bl	8000a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d13b      	bne.n	8001114 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 f87d 	bl	800219c <ADC_Disable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d12f      	bne.n	8001114 <HAL_ADC_Init+0xe0>
 80010b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d12b      	bne.n	8001114 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010c4:	f023 0302 	bic.w	r3, r3, #2
 80010c8:	f043 0202 	orr.w	r2, r3, #2
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010de:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010ee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010f0:	4b94      	ldr	r3, [pc, #592]	; (8001344 <HAL_ADC_Init+0x310>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a94      	ldr	r2, [pc, #592]	; (8001348 <HAL_ADC_Init+0x314>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	0c9a      	lsrs	r2, r3, #18
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001106:	e002      	b.n	800110e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	3b01      	subs	r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f9      	bne.n	8001108 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800112c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001130:	d110      	bne.n	8001154 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f023 0312 	bic.w	r3, r3, #18
 800113a:	f043 0210 	orr.w	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f043 0201 	orr.w	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	2b00      	cmp	r3, #0
 800115e:	f040 80df 	bne.w	8001320 <HAL_ADC_Init+0x2ec>
 8001162:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 80da 	bne.w	8001320 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001176:	2b00      	cmp	r3, #0
 8001178:	f040 80d2 	bne.w	8001320 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001184:	f043 0202 	orr.w	r2, r3, #2
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800118c:	4b6f      	ldr	r3, [pc, #444]	; (800134c <HAL_ADC_Init+0x318>)
 800118e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001198:	d102      	bne.n	80011a0 <HAL_ADC_Init+0x16c>
 800119a:	4b6d      	ldr	r3, [pc, #436]	; (8001350 <HAL_ADC_Init+0x31c>)
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e002      	b.n	80011a6 <HAL_ADC_Init+0x172>
 80011a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011a4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d108      	bne.n	80011c6 <HAL_ADC_Init+0x192>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_ADC_Init+0x192>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_ADC_Init+0x194>
 80011c6:	2300      	movs	r3, #0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d11c      	bne.n	8001206 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011cc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d010      	beq.n	80011f4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d107      	bne.n	80011ee <HAL_ADC_Init+0x1ba>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d101      	bne.n	80011ee <HAL_ADC_Init+0x1ba>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_ADC_Init+0x1bc>
 80011ee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d108      	bne.n	8001206 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80011f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	431a      	orrs	r2, r3
 8001202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001204:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7e5b      	ldrb	r3, [r3, #25]
 800120a:	035b      	lsls	r3, r3, #13
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001210:	2a01      	cmp	r2, #1
 8001212:	d002      	beq.n	800121a <HAL_ADC_Init+0x1e6>
 8001214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001218:	e000      	b.n	800121c <HAL_ADC_Init+0x1e8>
 800121a:	2200      	movs	r2, #0
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4313      	orrs	r3, r2
 800122a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800122c:	4313      	orrs	r3, r2
 800122e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d11b      	bne.n	8001272 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7e5b      	ldrb	r3, [r3, #25]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	3b01      	subs	r3, #1
 8001248:	045a      	lsls	r2, r3, #17
 800124a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800124c:	4313      	orrs	r3, r2
 800124e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001252:	663b      	str	r3, [r7, #96]	; 0x60
 8001254:	e00d      	b.n	8001272 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800125e:	f043 0220 	orr.w	r2, r3, #32
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f043 0201 	orr.w	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001276:	2b01      	cmp	r3, #1
 8001278:	d007      	beq.n	800128a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001282:	4313      	orrs	r3, r2
 8001284:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001286:	4313      	orrs	r3, r2
 8001288:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b00      	cmp	r3, #0
 8001296:	d114      	bne.n	80012c2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012a6:	f023 0302 	bic.w	r3, r3, #2
 80012aa:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7e1b      	ldrb	r3, [r3, #24]
 80012b0:	039a      	lsls	r2, r3, #14
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4313      	orrs	r3, r2
 80012bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012be:	4313      	orrs	r3, r2
 80012c0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_ADC_Init+0x320>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012d2:	430b      	orrs	r3, r1
 80012d4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d10c      	bne.n	80012f8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	f023 010f 	bic.w	r1, r3, #15
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	1e5a      	subs	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	631a      	str	r2, [r3, #48]	; 0x30
 80012f6:	e007      	b.n	8001308 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 020f 	bic.w	r2, r2, #15
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f023 0303 	bic.w	r3, r3, #3
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
 800131e:	e00a      	b.n	8001336 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f023 0312 	bic.w	r3, r3, #18
 8001328:	f043 0210 	orr.w	r2, r3, #16
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001330:	2301      	movs	r3, #1
 8001332:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001336:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800133a:	4618      	mov	r0, r3
 800133c:	3768      	adds	r7, #104	; 0x68
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000000 	.word	0x20000000
 8001348:	431bde83 	.word	0x431bde83
 800134c:	50000300 	.word	0x50000300
 8001350:	50000100 	.word	0x50000100
 8001354:	fff0c007 	.word	0xfff0c007

08001358 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	2b00      	cmp	r3, #0
 8001370:	f040 80c6 	bne.w	8001500 <HAL_ADC_Start_IT+0x1a8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Start_IT+0x2a>
 800137e:	2302      	movs	r3, #2
 8001380:	e0c1      	b.n	8001506 <HAL_ADC_Start_IT+0x1ae>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fea2 	bl	80020d4 <ADC_Enable>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f040 80ad 	bne.w	80014f6 <HAL_ADC_Start_IT+0x19e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013b0:	4b57      	ldr	r3, [pc, #348]	; (8001510 <HAL_ADC_Start_IT+0x1b8>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <HAL_ADC_Start_IT+0x6e>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013c4:	d115      	bne.n	80013f2 <HAL_ADC_Start_IT+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d027      	beq.n	8001430 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80013f0:	e01e      	b.n	8001430 <HAL_ADC_Start_IT+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001406:	d004      	beq.n	8001412 <HAL_ADC_Start_IT+0xba>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a41      	ldr	r2, [pc, #260]	; (8001514 <HAL_ADC_Start_IT+0x1bc>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10e      	bne.n	8001430 <HAL_ADC_Start_IT+0xd8>
 8001412:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d007      	beq.n	8001430 <HAL_ADC_Start_IT+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001428:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800143c:	d106      	bne.n	800144c <HAL_ADC_Start_IT+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f023 0206 	bic.w	r2, r3, #6
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	645a      	str	r2, [r3, #68]	; 0x44
 800144a:	e002      	b.n	8001452 <HAL_ADC_Start_IT+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	221c      	movs	r2, #28
 8001460:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	2b08      	cmp	r3, #8
 8001468:	d110      	bne.n	800148c <HAL_ADC_Start_IT+0x134>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0204 	bic.w	r2, r2, #4
 8001478:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f042 0208 	orr.w	r2, r2, #8
 8001488:	605a      	str	r2, [r3, #4]
          break;
 800148a:	e008      	b.n	800149e <HAL_ADC_Start_IT+0x146>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 020c 	orr.w	r2, r2, #12
 800149a:	605a      	str	r2, [r3, #4]
          break;
 800149c:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <HAL_ADC_Start_IT+0x15e>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0210 	bic.w	r2, r2, #16
 80014b4:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_ADC_Start_IT+0x1b8>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d010      	beq.n	80014e4 <HAL_ADC_Start_IT+0x18c>
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_ADC_Start_IT+0x1b8>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d00a      	beq.n	80014e4 <HAL_ADC_Start_IT+0x18c>
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_ADC_Start_IT+0x1b8>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 031f 	and.w	r3, r3, #31
 80014d6:	2b09      	cmp	r3, #9
 80014d8:	d004      	beq.n	80014e4 <HAL_ADC_Start_IT+0x18c>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014e2:	d10f      	bne.n	8001504 <HAL_ADC_Start_IT+0x1ac>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0204 	orr.w	r2, r2, #4
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	e006      	b.n	8001504 <HAL_ADC_Start_IT+0x1ac>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80014fe:	e001      	b.n	8001504 <HAL_ADC_Start_IT+0x1ac>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001500:	2302      	movs	r3, #2
 8001502:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	50000300 	.word	0x50000300
 8001514:	50000100 	.word	0x50000100

08001518 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b04      	cmp	r3, #4
 8001554:	d106      	bne.n	8001564 <HAL_ADC_IRQHandler+0x30>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b04      	cmp	r3, #4
 8001562:	d00d      	beq.n	8001580 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800156e:	2b08      	cmp	r3, #8
 8001570:	d17a      	bne.n	8001668 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b08      	cmp	r3, #8
 800157e:	d173      	bne.n	8001668 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001598:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_ADC_IRQHandler+0x288>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d010      	beq.n	80015c6 <HAL_ADC_IRQHandler+0x92>
 80015a4:	4b85      	ldr	r3, [pc, #532]	; (80017bc <HAL_ADC_IRQHandler+0x288>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 031f 	and.w	r3, r3, #31
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d00a      	beq.n	80015c6 <HAL_ADC_IRQHandler+0x92>
 80015b0:	4b82      	ldr	r3, [pc, #520]	; (80017bc <HAL_ADC_IRQHandler+0x288>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	2b09      	cmp	r3, #9
 80015ba:	d004      	beq.n	80015c6 <HAL_ADC_IRQHandler+0x92>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c4:	d104      	bne.n	80015d0 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	e003      	b.n	80015d8 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80015d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d139      	bne.n	800165a <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d134      	bne.n	800165a <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d12d      	bne.n	800165a <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11a      	bne.n	8001642 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 020c 	bic.w	r2, r2, #12
 800161a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d112      	bne.n	800165a <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	641a      	str	r2, [r3, #64]	; 0x40
 8001640:	e00b      	b.n	800165a <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f043 0210 	orr.w	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7fe fdfc 	bl	8000258 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	220c      	movs	r2, #12
 8001666:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b20      	cmp	r3, #32
 8001674:	d106      	bne.n	8001684 <HAL_ADC_IRQHandler+0x150>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	2b20      	cmp	r3, #32
 8001682:	d00f      	beq.n	80016a4 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800168e:	2b40      	cmp	r3, #64	; 0x40
 8001690:	f040 80a9 	bne.w	80017e6 <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169e:	2b40      	cmp	r3, #64	; 0x40
 80016a0:	f040 80a1 	bne.w	80017e6 <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <HAL_ADC_IRQHandler+0x288>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d010      	beq.n	80016de <HAL_ADC_IRQHandler+0x1aa>
 80016bc:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <HAL_ADC_IRQHandler+0x288>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	2b05      	cmp	r3, #5
 80016c6:	d00a      	beq.n	80016de <HAL_ADC_IRQHandler+0x1aa>
 80016c8:	4b3c      	ldr	r3, [pc, #240]	; (80017bc <HAL_ADC_IRQHandler+0x288>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	2b09      	cmp	r3, #9
 80016d2:	d004      	beq.n	80016de <HAL_ADC_IRQHandler+0x1aa>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016dc:	d104      	bne.n	80016e8 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	e003      	b.n	80016f0 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80016e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d16c      	bne.n	80017d8 <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00b      	beq.n	8001720 <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001712:	2b00      	cmp	r3, #0
 8001714:	d160      	bne.n	80017d8 <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800171c:	2b00      	cmp	r3, #0
 800171e:	d15b      	bne.n	80017d8 <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172a:	2b40      	cmp	r3, #64	; 0x40
 800172c:	d154      	bne.n	80017d8 <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800172e:	4b23      	ldr	r3, [pc, #140]	; (80017bc <HAL_ADC_IRQHandler+0x288>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	2b00      	cmp	r3, #0
 8001738:	d010      	beq.n	800175c <HAL_ADC_IRQHandler+0x228>
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_ADC_IRQHandler+0x288>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	2b06      	cmp	r3, #6
 8001744:	d00a      	beq.n	800175c <HAL_ADC_IRQHandler+0x228>
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_ADC_IRQHandler+0x288>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	2b07      	cmp	r3, #7
 8001750:	d004      	beq.n	800175c <HAL_ADC_IRQHandler+0x228>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175a:	d104      	bne.n	8001766 <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	e003      	b.n	800176e <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001766:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d12f      	bne.n	80017d8 <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d11c      	bne.n	80017c0 <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001794:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d114      	bne.n	80017d8 <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ba:	e00d      	b.n	80017d8 <HAL_ADC_IRQHandler+0x2a4>
 80017bc:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f043 0210 	orr.w	r2, r3, #16
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f8cb 	bl	8001974 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2260      	movs	r2, #96	; 0x60
 80017e4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f0:	2b80      	cmp	r3, #128	; 0x80
 80017f2:	d113      	bne.n	800181c <HAL_ADC_IRQHandler+0x2e8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fe:	2b80      	cmp	r3, #128	; 0x80
 8001800:	d10c      	bne.n	800181c <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fbfc 	bl	800100c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800182a:	d115      	bne.n	8001858 <HAL_ADC_IRQHandler+0x324>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800183a:	d10d      	bne.n	8001858 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f8a7 	bl	800199c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001856:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001866:	d115      	bne.n	8001894 <HAL_ADC_IRQHandler+0x360>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001876:	d10d      	bne.n	8001894 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f893 	bl	80019b0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001892:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b10      	cmp	r3, #16
 80018a0:	d13d      	bne.n	800191e <HAL_ADC_IRQHandler+0x3ea>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	d136      	bne.n	800191e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d102      	bne.n	80018be <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 80018b8:	2301      	movs	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e019      	b.n	80018f2 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018be:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <HAL_ADC_IRQHandler+0x43c>)
 80018c0:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10a      	bne.n	80018f2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80018dc:	2301      	movs	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e007      	b.n	80018f2 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80018ee:	2301      	movs	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d10e      	bne.n	8001916 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fb85 	bl	8001020 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2210      	movs	r2, #16
 800191c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192c:	d11b      	bne.n	8001966 <HAL_ADC_IRQHandler+0x432>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193c:	d113      	bne.n	8001966 <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f043 0208 	orr.w	r2, r3, #8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800195e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f811 	bl	8001988 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	50000300 	.word	0x50000300

08001974 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b09b      	sub	sp, #108	; 0x6c
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x22>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e2a5      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x56e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 8289 	bne.w	8001f10 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d81c      	bhi.n	8001a40 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	461a      	mov	r2, r3
 8001a1a:	231f      	movs	r3, #31
 8001a1c:	4093      	lsls	r3, r2
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	4019      	ands	r1, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fa00 f203 	lsl.w	r2, r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a3e:	e063      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b09      	cmp	r3, #9
 8001a46:	d81e      	bhi.n	8001a86 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	3b1e      	subs	r3, #30
 8001a5c:	221f      	movs	r2, #31
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4019      	ands	r1, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	3b1e      	subs	r3, #30
 8001a78:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	635a      	str	r2, [r3, #52]	; 0x34
 8001a84:	e040      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b0e      	cmp	r3, #14
 8001a8c:	d81e      	bhi.n	8001acc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	3b3c      	subs	r3, #60	; 0x3c
 8001aa2:	221f      	movs	r2, #31
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4019      	ands	r1, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	3b3c      	subs	r3, #60	; 0x3c
 8001abe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38
 8001aca:	e01d      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	3b5a      	subs	r3, #90	; 0x5a
 8001ae0:	221f      	movs	r2, #31
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	4019      	ands	r1, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	3b5a      	subs	r3, #90	; 0x5a
 8001afc:	fa00 f203 	lsl.w	r2, r0, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 80e5 	bne.w	8001ce2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	d91c      	bls.n	8001b5a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6999      	ldr	r1, [r3, #24]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b1e      	subs	r3, #30
 8001b32:	2207      	movs	r2, #7
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4019      	ands	r1, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6898      	ldr	r0, [r3, #8]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b1e      	subs	r3, #30
 8001b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	619a      	str	r2, [r3, #24]
 8001b58:	e019      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6959      	ldr	r1, [r3, #20]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4019      	ands	r1, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6898      	ldr	r0, [r3, #8]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	08db      	lsrs	r3, r3, #3
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d84f      	bhi.n	8001c50 <HAL_ADC_ConfigChannel+0x28c>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001bc9 	.word	0x08001bc9
 8001bbc:	08001beb 	.word	0x08001beb
 8001bc0:	08001c0d 	.word	0x08001c0d
 8001bc4:	08001c2f 	.word	0x08001c2f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bce:	4b9e      	ldr	r3, [pc, #632]	; (8001e48 <HAL_ADC_ConfigChannel+0x484>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	0691      	lsls	r1, r2, #26
 8001bd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001be6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001be8:	e07e      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bf0:	4b95      	ldr	r3, [pc, #596]	; (8001e48 <HAL_ADC_ConfigChannel+0x484>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	0691      	lsls	r1, r2, #26
 8001bfa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c08:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c0a:	e06d      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c12:	4b8d      	ldr	r3, [pc, #564]	; (8001e48 <HAL_ADC_ConfigChannel+0x484>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	0691      	lsls	r1, r2, #26
 8001c1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c2a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c2c:	e05c      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c34:	4b84      	ldr	r3, [pc, #528]	; (8001e48 <HAL_ADC_ConfigChannel+0x484>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	0691      	lsls	r1, r2, #26
 8001c3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c40:	430a      	orrs	r2, r1
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c4c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c4e:	e04b      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	069b      	lsls	r3, r3, #26
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d107      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c72:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	069b      	lsls	r3, r3, #26
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d107      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c96:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	069b      	lsls	r3, r3, #26
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d107      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cba:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	069b      	lsls	r3, r3, #26
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d10a      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cde:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001ce0:	e001      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001ce2:	bf00      	nop
 8001ce4:	e000      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001ce6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d108      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x344>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x344>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x346>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 810b 	bne.w	8001f26 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d00f      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2201      	movs	r2, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	400a      	ands	r2, r1
 8001d32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d36:	e049      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2201      	movs	r2, #1
 8001d46:	409a      	lsls	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b09      	cmp	r3, #9
 8001d58:	d91c      	bls.n	8001d94 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6999      	ldr	r1, [r3, #24]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b1b      	subs	r3, #27
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	4019      	ands	r1, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6898      	ldr	r0, [r3, #8]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	3b1b      	subs	r3, #27
 8001d86:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	619a      	str	r2, [r3, #24]
 8001d92:	e01b      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6959      	ldr	r1, [r3, #20]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	2207      	movs	r2, #7
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	4019      	ands	r1, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6898      	ldr	r0, [r3, #8]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <HAL_ADC_ConfigChannel+0x488>)
 8001dce:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d015      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001de8:	2b11      	cmp	r3, #17
 8001dea:	d105      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00b      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001dfc:	2b12      	cmp	r3, #18
 8001dfe:	f040 8092 	bne.w	8001f26 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 808b 	bne.w	8001f26 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e18:	d102      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x45c>
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_ADC_ConfigChannel+0x48c>)
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e002      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x462>
 8001e20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e24:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10f      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x490>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d108      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x490>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e007      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x492>
 8001e46:	bf00      	nop
 8001e48:	83fff000 	.word	0x83fff000
 8001e4c:	50000300 	.word	0x50000300
 8001e50:	50000100 	.word	0x50000100
 8001e54:	2300      	movs	r3, #0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d150      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e5a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d010      	beq.n	8001e82 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d107      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x4b8>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x4b8>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x4ba>
 8001e7c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d13c      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d11d      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x502>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e92:	d118      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e9e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <HAL_ADC_ConfigChannel+0x57c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <HAL_ADC_ConfigChannel+0x580>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0c9a      	lsrs	r2, r3, #18
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eb6:	e002      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f9      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ec4:	e02e      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b11      	cmp	r3, #17
 8001ecc:	d10b      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x522>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ed6:	d106      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ee4:	e01e      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b12      	cmp	r3, #18
 8001eec:	d11a      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001efa:	e013      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f043 0220 	orr.w	r2, r3, #32
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f0e:	e00a      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f043 0220 	orr.w	r2, r3, #32
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f22:	e000      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f24:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	376c      	adds	r7, #108	; 0x6c
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000
 8001f44:	431bde83 	.word	0x431bde83

08001f48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b099      	sub	sp, #100	; 0x64
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f60:	d102      	bne.n	8001f68 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001f62:	4b5a      	ldr	r3, [pc, #360]	; (80020cc <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	e002      	b.n	8001f6e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001f68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f6c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0a2      	b.n	80020be <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e09b      	b.n	80020be <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d17f      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d179      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa8:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001faa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d040      	beq.n	8002036 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fc6:	035b      	lsls	r3, r3, #13
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fce:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d108      	bne.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d15c      	bne.n	80020b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d107      	bne.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002012:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002014:	2b00      	cmp	r3, #0
 8002016:	d14b      	bne.n	80020b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002020:	f023 030f 	bic.w	r3, r3, #15
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	6811      	ldr	r1, [r2, #0]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	6892      	ldr	r2, [r2, #8]
 800202c:	430a      	orrs	r2, r1
 800202e:	431a      	orrs	r2, r3
 8002030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002032:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002034:	e03c      	b.n	80020b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800203e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002040:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d108      	bne.n	8002062 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002062:	2300      	movs	r3, #0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d123      	bne.n	80020b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002084:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	d112      	bne.n	80020b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800208a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002092:	f023 030f 	bic.w	r3, r3, #15
 8002096:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002098:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800209a:	e009      	b.n	80020b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80020ae:	e000      	b.n	80020b2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020b0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80020be:	4618      	mov	r0, r3
 80020c0:	3764      	adds	r7, #100	; 0x64
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	50000100 	.word	0x50000100
 80020d0:	50000300 	.word	0x50000300

080020d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <ADC_Enable+0x2c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <ADC_Enable+0x2c>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <ADC_Enable+0x2e>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d143      	bne.n	800218e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <ADC_Enable+0xc4>)
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00d      	beq.n	8002130 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f043 0210 	orr.w	r2, r3, #16
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f043 0201 	orr.w	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e02f      	b.n	8002190 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002140:	f7fe ff58 	bl	8000ff4 <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002146:	e01b      	b.n	8002180 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002148:	f7fe ff54 	bl	8000ff4 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d914      	bls.n	8002180 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	d00d      	beq.n	8002180 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f043 0210 	orr.w	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e007      	b.n	8002190 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d1dc      	bne.n	8002148 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	8000003f 	.word	0x8000003f

0800219c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d108      	bne.n	80021c8 <ADC_Disable+0x2c>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <ADC_Disable+0x2c>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <ADC_Disable+0x2e>
 80021c8:	2300      	movs	r3, #0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d047      	beq.n	800225e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030d 	and.w	r3, r3, #13
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d10f      	bne.n	80021fc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0202 	orr.w	r2, r2, #2
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2203      	movs	r2, #3
 80021f2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80021f4:	f7fe fefe 	bl	8000ff4 <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021fa:	e029      	b.n	8002250 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f043 0210 	orr.w	r2, r3, #16
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e023      	b.n	8002260 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002218:	f7fe feec 	bl	8000ff4 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d914      	bls.n	8002250 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10d      	bne.n	8002250 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f043 0210 	orr.w	r2, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e007      	b.n	8002260 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b01      	cmp	r3, #1
 800225c:	d0dc      	beq.n	8002218 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4907      	ldr	r1, [pc, #28]	; (8002304 <__NVIC_EnableIRQ+0x38>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d4:	d301      	bcc.n	80023da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00f      	b.n	80023fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <SysTick_Config+0x40>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e2:	210f      	movs	r1, #15
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	f7ff ff8e 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <SysTick_Config+0x40>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f2:	4b04      	ldr	r3, [pc, #16]	; (8002404 <SysTick_Config+0x40>)
 80023f4:	2207      	movs	r2, #7
 80023f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	e000e010 	.word	0xe000e010

08002408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff29 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002430:	f7ff ff3e 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 8002434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f7ff ff8e 	bl	800235c <NVIC_EncodePriority>
 8002440:	4602      	mov	r2, r0
 8002442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff5d 	bl	8002308 <__NVIC_SetPriority>
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff31 	bl	80022cc <__NVIC_EnableIRQ>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffa2 	bl	80023c4 <SysTick_Config>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002498:	2b02      	cmp	r3, #2
 800249a:	d008      	beq.n	80024ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2204      	movs	r2, #4
 80024a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e020      	b.n	80024f0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 020e 	bic.w	r2, r2, #14
 80024bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0201 	bic.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f202 	lsl.w	r2, r1, r2
 80024dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800250e:	2b02      	cmp	r3, #2
 8002510:	d005      	beq.n	800251e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2204      	movs	r2, #4
 8002516:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e027      	b.n	800256e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 020e 	bic.w	r2, r2, #14
 800252c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f202 	lsl.w	r2, r1, r2
 800254c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
    } 
  }
  return status;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002586:	e14e      	b.n	8002826 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8140 	beq.w	8002820 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d005      	beq.n	80025b8 <HAL_GPIO_Init+0x40>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d130      	bne.n	800261a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ee:	2201      	movs	r2, #1
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	f003 0201 	and.w	r2, r3, #1
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b03      	cmp	r3, #3
 8002624:	d017      	beq.n	8002656 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d123      	bne.n	80026aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	08da      	lsrs	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3208      	adds	r2, #8
 80026a4:	6939      	ldr	r1, [r7, #16]
 80026a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	2203      	movs	r2, #3
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0203 	and.w	r2, r3, #3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 809a 	beq.w	8002820 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ec:	4b55      	ldr	r3, [pc, #340]	; (8002844 <HAL_GPIO_Init+0x2cc>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a54      	ldr	r2, [pc, #336]	; (8002844 <HAL_GPIO_Init+0x2cc>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b52      	ldr	r3, [pc, #328]	; (8002844 <HAL_GPIO_Init+0x2cc>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002704:	4a50      	ldr	r2, [pc, #320]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800272e:	d013      	beq.n	8002758 <HAL_GPIO_Init+0x1e0>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a46      	ldr	r2, [pc, #280]	; (800284c <HAL_GPIO_Init+0x2d4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d00d      	beq.n	8002754 <HAL_GPIO_Init+0x1dc>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a45      	ldr	r2, [pc, #276]	; (8002850 <HAL_GPIO_Init+0x2d8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d007      	beq.n	8002750 <HAL_GPIO_Init+0x1d8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a44      	ldr	r2, [pc, #272]	; (8002854 <HAL_GPIO_Init+0x2dc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d101      	bne.n	800274c <HAL_GPIO_Init+0x1d4>
 8002748:	2303      	movs	r3, #3
 800274a:	e006      	b.n	800275a <HAL_GPIO_Init+0x1e2>
 800274c:	2305      	movs	r3, #5
 800274e:	e004      	b.n	800275a <HAL_GPIO_Init+0x1e2>
 8002750:	2302      	movs	r3, #2
 8002752:	e002      	b.n	800275a <HAL_GPIO_Init+0x1e2>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_GPIO_Init+0x1e2>
 8002758:	2300      	movs	r3, #0
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	f002 0203 	and.w	r2, r2, #3
 8002760:	0092      	lsls	r2, r2, #2
 8002762:	4093      	lsls	r3, r2
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800276a:	4937      	ldr	r1, [pc, #220]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	3302      	adds	r3, #2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002778:	4b37      	ldr	r3, [pc, #220]	; (8002858 <HAL_GPIO_Init+0x2e0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	43db      	mvns	r3, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800279c:	4a2e      	ldr	r2, [pc, #184]	; (8002858 <HAL_GPIO_Init+0x2e0>)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027a2:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <HAL_GPIO_Init+0x2e0>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4013      	ands	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027c6:	4a24      	ldr	r2, [pc, #144]	; (8002858 <HAL_GPIO_Init+0x2e0>)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027cc:	4b22      	ldr	r3, [pc, #136]	; (8002858 <HAL_GPIO_Init+0x2e0>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027f0:	4a19      	ldr	r2, [pc, #100]	; (8002858 <HAL_GPIO_Init+0x2e0>)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_GPIO_Init+0x2e0>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800281a:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <HAL_GPIO_Init+0x2e0>)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3301      	adds	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	f47f aea9 	bne.w	8002588 <HAL_GPIO_Init+0x10>
  }
}
 8002836:	bf00      	nop
 8002838:	bf00      	nop
 800283a:	371c      	adds	r7, #28
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	40021000 	.word	0x40021000
 8002848:	40010000 	.word	0x40010000
 800284c:	48000400 	.word	0x48000400
 8002850:	48000800 	.word	0x48000800
 8002854:	48000c00 	.word	0x48000c00
 8002858:	40010400 	.word	0x40010400

0800285c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	4613      	mov	r3, r2
 800286a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800286c:	787b      	ldrb	r3, [r7, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002878:	e002      	b.n	8002880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002892:	af00      	add	r7, sp, #0
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f000 bef4 	b.w	800368e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 816a 	beq.w	8002b8a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028b6:	4bb3      	ldr	r3, [pc, #716]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d00c      	beq.n	80028dc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028c2:	4bb0      	ldr	r3, [pc, #704]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d159      	bne.n	8002982 <HAL_RCC_OscConfig+0xf6>
 80028ce:	4bad      	ldr	r3, [pc, #692]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028da:	d152      	bne.n	8002982 <HAL_RCC_OscConfig+0xf6>
 80028dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d102      	bne.n	800290e <HAL_RCC_OscConfig+0x82>
 8002908:	4b9e      	ldr	r3, [pc, #632]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	e015      	b.n	800293a <HAL_RCC_OscConfig+0xae>
 800290e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002912:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002926:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800292a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002936:	4b93      	ldr	r3, [pc, #588]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800293e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002942:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002946:	fa92 f2a2 	rbit	r2, r2
 800294a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800294e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002952:	fab2 f282 	clz	r2, r2
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f042 0220 	orr.w	r2, r2, #32
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	f002 021f 	and.w	r2, r2, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 810c 	beq.w	8002b88 <HAL_RCC_OscConfig+0x2fc>
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f040 8106 	bne.w	8002b88 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	f000 be86 	b.w	800368e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d106      	bne.n	800299c <HAL_RCC_OscConfig+0x110>
 800298e:	4b7d      	ldr	r3, [pc, #500]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7c      	ldr	r2, [pc, #496]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e030      	b.n	80029fe <HAL_RCC_OscConfig+0x172>
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x134>
 80029a6:	4b77      	ldr	r3, [pc, #476]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a76      	ldr	r2, [pc, #472]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b74      	ldr	r3, [pc, #464]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a73      	ldr	r2, [pc, #460]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80029b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e01e      	b.n	80029fe <HAL_RCC_OscConfig+0x172>
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ca:	d10c      	bne.n	80029e6 <HAL_RCC_OscConfig+0x15a>
 80029cc:	4b6d      	ldr	r3, [pc, #436]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a6c      	ldr	r2, [pc, #432]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80029d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a69      	ldr	r2, [pc, #420]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80029de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	e00b      	b.n	80029fe <HAL_RCC_OscConfig+0x172>
 80029e6:	4b67      	ldr	r3, [pc, #412]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a66      	ldr	r2, [pc, #408]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80029ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a63      	ldr	r2, [pc, #396]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 80029f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029fe:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	f023 020f 	bic.w	r2, r3, #15
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	495d      	ldr	r1, [pc, #372]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d059      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe faea 	bl	8000ff4 <HAL_GetTick>
 8002a20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a26:	f7fe fae5 	bl	8000ff4 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d902      	bls.n	8002a3c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	f000 be29 	b.w	800368e <HAL_RCC_OscConfig+0xe02>
 8002a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a40:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002a50:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d102      	bne.n	8002a6e <HAL_RCC_OscConfig+0x1e2>
 8002a68:	4b46      	ldr	r3, [pc, #280]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_OscConfig+0x20e>
 8002a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a72:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a86:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a8a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002a96:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a9e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002aa2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002aa6:	fa92 f2a2 	rbit	r2, r2
 8002aaa:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002aae:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	f042 0220 	orr.w	r2, r2, #32
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	f002 021f 	and.w	r2, r2, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0ab      	beq.n	8002a26 <HAL_RCC_OscConfig+0x19a>
 8002ace:	e05c      	b.n	8002b8a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fa90 	bl	8000ff4 <HAL_GetTick>
 8002ad4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ada:	f7fe fa8b 	bl	8000ff4 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d902      	bls.n	8002af0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	f000 bdcf 	b.w	800368e <HAL_RCC_OscConfig+0xe02>
 8002af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002af4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b04:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b08:	fab3 f383 	clz	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d102      	bne.n	8002b22 <HAL_RCC_OscConfig+0x296>
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	e015      	b.n	8002b4e <HAL_RCC_OscConfig+0x2c2>
 8002b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b3e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <HAL_RCC_OscConfig+0x2f8>)
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b52:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002b56:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b5a:	fa92 f2a2 	rbit	r2, r2
 8002b5e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002b62:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002b66:	fab2 f282 	clz	r2, r2
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f042 0220 	orr.w	r2, r2, #32
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	f002 021f 	and.w	r2, r2, #31
 8002b76:	2101      	movs	r1, #1
 8002b78:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1ab      	bne.n	8002ada <HAL_RCC_OscConfig+0x24e>
 8002b82:	e002      	b.n	8002b8a <HAL_RCC_OscConfig+0x2fe>
 8002b84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 816f 	beq.w	8002e78 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b9a:	4bd0      	ldr	r3, [pc, #832]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ba6:	4bcd      	ldr	r3, [pc, #820]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d16c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x400>
 8002bb2:	4bca      	ldr	r3, [pc, #808]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d166      	bne.n	8002c8c <HAL_RCC_OscConfig+0x400>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002bd0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d102      	bne.n	8002bee <HAL_RCC_OscConfig+0x362>
 8002be8:	4bbc      	ldr	r3, [pc, #752]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	e013      	b.n	8002c16 <HAL_RCC_OscConfig+0x38a>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c12:	4bb2      	ldr	r3, [pc, #712]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	2202      	movs	r2, #2
 8002c18:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c1c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c20:	fa92 f2a2 	rbit	r2, r2
 8002c24:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c28:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c2c:	fab2 f282 	clz	r2, r2
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f042 0220 	orr.w	r2, r2, #32
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f002 021f 	and.w	r2, r2, #31
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <HAL_RCC_OscConfig+0x3cc>
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d002      	beq.n	8002c58 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f000 bd1b 	b.w	800368e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c58:	4ba0      	ldr	r3, [pc, #640]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	21f8      	movs	r1, #248	; 0xf8
 8002c68:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002c70:	fa91 f1a1 	rbit	r1, r1
 8002c74:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002c78:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002c7c:	fab1 f181 	clz	r1, r1
 8002c80:	b2c9      	uxtb	r1, r1
 8002c82:	408b      	lsls	r3, r1
 8002c84:	4995      	ldr	r1, [pc, #596]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	e0f5      	b.n	8002e78 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8085 	beq.w	8002da2 <HAL_RCC_OscConfig+0x516>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002caa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe f996 	bl	8000ff4 <HAL_GetTick>
 8002cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cce:	f7fe f991 	bl	8000ff4 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d902      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	f000 bcd5 	b.w	800368e <HAL_RCC_OscConfig+0xe02>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002cf6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d102      	bne.n	8002d14 <HAL_RCC_OscConfig+0x488>
 8002d0e:	4b73      	ldr	r3, [pc, #460]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	e013      	b.n	8002d3c <HAL_RCC_OscConfig+0x4b0>
 8002d14:	2302      	movs	r3, #2
 8002d16:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d26:	2302      	movs	r3, #2
 8002d28:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d2c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002d38:	4b68      	ldr	r3, [pc, #416]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002d42:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d46:	fa92 f2a2 	rbit	r2, r2
 8002d4a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002d4e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002d52:	fab2 f282 	clz	r2, r2
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f042 0220 	orr.w	r2, r2, #32
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	f002 021f 	and.w	r2, r2, #31
 8002d62:	2101      	movs	r1, #1
 8002d64:	fa01 f202 	lsl.w	r2, r1, r2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0af      	beq.n	8002cce <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6e:	4b5b      	ldr	r3, [pc, #364]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	21f8      	movs	r1, #248	; 0xf8
 8002d7e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d86:	fa91 f1a1 	rbit	r1, r1
 8002d8a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002d8e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002d92:	fab1 f181 	clz	r1, r1
 8002d96:	b2c9      	uxtb	r1, r1
 8002d98:	408b      	lsls	r3, r1
 8002d9a:	4950      	ldr	r1, [pc, #320]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]
 8002da0:	e06a      	b.n	8002e78 <HAL_RCC_OscConfig+0x5ec>
 8002da2:	2301      	movs	r3, #1
 8002da4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002db4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db8:	fab3 f383 	clz	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2300      	movs	r3, #0
 8002dcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe f911 	bl	8000ff4 <HAL_GetTick>
 8002dd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7fe f90c 	bl	8000ff4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d902      	bls.n	8002dee <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	f000 bc50 	b.w	800368e <HAL_RCC_OscConfig+0xe02>
 8002dee:	2302      	movs	r3, #2
 8002df0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d102      	bne.n	8002e1e <HAL_RCC_OscConfig+0x592>
 8002e18:	4b30      	ldr	r3, [pc, #192]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	e013      	b.n	8002e46 <HAL_RCC_OscConfig+0x5ba>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e30:	2302      	movs	r3, #2
 8002e32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e42:	4b26      	ldr	r3, [pc, #152]	; (8002edc <HAL_RCC_OscConfig+0x650>)
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	2202      	movs	r2, #2
 8002e48:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002e4c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e50:	fa92 f2a2 	rbit	r2, r2
 8002e54:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002e58:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e5c:	fab2 f282 	clz	r2, r2
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f042 0220 	orr.w	r2, r2, #32
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	f002 021f 	and.w	r2, r2, #31
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1af      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80da 	beq.w	800303c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d069      	beq.n	8002f66 <HAL_RCC_OscConfig+0x6da>
 8002e92:	2301      	movs	r3, #1
 8002e94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_OscConfig+0x654>)
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2301      	movs	r3, #1
 8002eba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fe f89a 	bl	8000ff4 <HAL_GetTick>
 8002ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec4:	e00e      	b.n	8002ee4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec6:	f7fe f895 	bl	8000ff4 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d906      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e3d9      	b.n	800368e <HAL_RCC_OscConfig+0xe02>
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	10908120 	.word	0x10908120
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ef6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002efa:	2202      	movs	r2, #2
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f12:	2202      	movs	r2, #2
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	fa93 f2a3 	rbit	r2, r3
 8002f20:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002f24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f26:	4ba5      	ldr	r3, [pc, #660]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 8002f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f2a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f2e:	2102      	movs	r1, #2
 8002f30:	6019      	str	r1, [r3, #0]
 8002f32:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	fa93 f1a3 	rbit	r1, r3
 8002f3c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f40:	6019      	str	r1, [r3, #0]
  return result;
 8002f42:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0b0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x63a>
 8002f64:	e06a      	b.n	800303c <HAL_RCC_OscConfig+0x7b0>
 8002f66:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	fa93 f2a3 	rbit	r2, r3
 8002f78:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f7c:	601a      	str	r2, [r3, #0]
  return result;
 8002f7e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002f82:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4b8c      	ldr	r3, [pc, #560]	; (80031c0 <HAL_RCC_OscConfig+0x934>)
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	461a      	mov	r2, r3
 8002f94:	2300      	movs	r3, #0
 8002f96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f98:	f7fe f82c 	bl	8000ff4 <HAL_GetTick>
 8002f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa0:	e009      	b.n	8002fb6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa2:	f7fe f827 	bl	8000ff4 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e36b      	b.n	800368e <HAL_RCC_OscConfig+0xe02>
 8002fb6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002fba:	2202      	movs	r2, #2
 8002fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	fa93 f2a3 	rbit	r2, r3
 8002fc8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	fa93 f2a3 	rbit	r2, r3
 8002fe0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002fea:	2202      	movs	r2, #2
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	fa93 f2a3 	rbit	r2, r3
 8002ff8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ffc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffe:	4b6f      	ldr	r3, [pc, #444]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 8003000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003002:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003006:	2102      	movs	r1, #2
 8003008:	6019      	str	r1, [r3, #0]
 800300a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	fa93 f1a3 	rbit	r1, r3
 8003014:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003018:	6019      	str	r1, [r3, #0]
  return result;
 800301a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	2101      	movs	r1, #1
 8003032:	fa01 f303 	lsl.w	r3, r1, r3
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1b2      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8158 	beq.w	80032fc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304c:	2300      	movs	r3, #0
 800304e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003052:	4b5a      	ldr	r3, [pc, #360]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d112      	bne.n	8003084 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	4b57      	ldr	r3, [pc, #348]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4a56      	ldr	r2, [pc, #344]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 8003064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003068:	61d3      	str	r3, [r2, #28]
 800306a:	4b54      	ldr	r3, [pc, #336]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003072:	f107 0308 	add.w	r3, r7, #8
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f107 0308 	add.w	r3, r7, #8
 800307c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800307e:	2301      	movs	r3, #1
 8003080:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	4b4f      	ldr	r3, [pc, #316]	; (80031c4 <HAL_RCC_OscConfig+0x938>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d11a      	bne.n	80030c6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003090:	4b4c      	ldr	r3, [pc, #304]	; (80031c4 <HAL_RCC_OscConfig+0x938>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a4b      	ldr	r2, [pc, #300]	; (80031c4 <HAL_RCC_OscConfig+0x938>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309c:	f7fd ffaa 	bl	8000ff4 <HAL_GetTick>
 80030a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a4:	e009      	b.n	80030ba <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a6:	f7fd ffa5 	bl	8000ff4 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e2e9      	b.n	800368e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <HAL_RCC_OscConfig+0x938>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0ef      	beq.n	80030a6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x852>
 80030d0:	4b3a      	ldr	r3, [pc, #232]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4a39      	ldr	r2, [pc, #228]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6213      	str	r3, [r2, #32]
 80030dc:	e02f      	b.n	800313e <HAL_RCC_OscConfig+0x8b2>
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10c      	bne.n	8003102 <HAL_RCC_OscConfig+0x876>
 80030e8:	4b34      	ldr	r3, [pc, #208]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4a33      	ldr	r2, [pc, #204]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	6213      	str	r3, [r2, #32]
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4a30      	ldr	r2, [pc, #192]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 80030fa:	f023 0304 	bic.w	r3, r3, #4
 80030fe:	6213      	str	r3, [r2, #32]
 8003100:	e01d      	b.n	800313e <HAL_RCC_OscConfig+0x8b2>
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b05      	cmp	r3, #5
 800310a:	d10c      	bne.n	8003126 <HAL_RCC_OscConfig+0x89a>
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a2a      	ldr	r2, [pc, #168]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	4b28      	ldr	r3, [pc, #160]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4a27      	ldr	r2, [pc, #156]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6213      	str	r3, [r2, #32]
 8003124:	e00b      	b.n	800313e <HAL_RCC_OscConfig+0x8b2>
 8003126:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a24      	ldr	r2, [pc, #144]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	6213      	str	r3, [r2, #32]
 8003132:	4b22      	ldr	r3, [pc, #136]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4a21      	ldr	r2, [pc, #132]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d06b      	beq.n	8003220 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003148:	f7fd ff54 	bl	8000ff4 <HAL_GetTick>
 800314c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	e00b      	b.n	800316a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fd ff4f 	bl	8000ff4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e291      	b.n	800368e <HAL_RCC_OscConfig+0xe02>
 800316a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800316e:	2202      	movs	r2, #2
 8003170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	fa93 f2a3 	rbit	r2, r3
 800317c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003186:	2202      	movs	r2, #2
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	fa93 f2a3 	rbit	r2, r3
 8003194:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003198:	601a      	str	r2, [r3, #0]
  return result;
 800319a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800319e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d109      	bne.n	80031c8 <HAL_RCC_OscConfig+0x93c>
 80031b4:	4b01      	ldr	r3, [pc, #4]	; (80031bc <HAL_RCC_OscConfig+0x930>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	e014      	b.n	80031e4 <HAL_RCC_OscConfig+0x958>
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	10908120 	.word	0x10908120
 80031c4:	40007000 	.word	0x40007000
 80031c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031cc:	2202      	movs	r2, #2
 80031ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	fa93 f2a3 	rbit	r2, r3
 80031da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	4bbb      	ldr	r3, [pc, #748]	; (80034d0 <HAL_RCC_OscConfig+0xc44>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80031e8:	2102      	movs	r1, #2
 80031ea:	6011      	str	r1, [r2, #0]
 80031ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	fa92 f1a2 	rbit	r1, r2
 80031f6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80031fa:	6011      	str	r1, [r2, #0]
  return result;
 80031fc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	fab2 f282 	clz	r2, r2
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	f002 021f 	and.w	r2, r2, #31
 8003212:	2101      	movs	r1, #1
 8003214:	fa01 f202 	lsl.w	r2, r1, r2
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d099      	beq.n	8003152 <HAL_RCC_OscConfig+0x8c6>
 800321e:	e063      	b.n	80032e8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003220:	f7fd fee8 	bl	8000ff4 <HAL_GetTick>
 8003224:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003228:	e00b      	b.n	8003242 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fd fee3 	bl	8000ff4 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e225      	b.n	800368e <HAL_RCC_OscConfig+0xe02>
 8003242:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003246:	2202      	movs	r2, #2
 8003248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	fa93 f2a3 	rbit	r2, r3
 8003254:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800325e:	2202      	movs	r2, #2
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	fa93 f2a3 	rbit	r2, r3
 800326c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003270:	601a      	str	r2, [r3, #0]
  return result;
 8003272:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003276:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d102      	bne.n	8003292 <HAL_RCC_OscConfig+0xa06>
 800328c:	4b90      	ldr	r3, [pc, #576]	; (80034d0 <HAL_RCC_OscConfig+0xc44>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	e00d      	b.n	80032ae <HAL_RCC_OscConfig+0xa22>
 8003292:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003296:	2202      	movs	r2, #2
 8003298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	fa93 f2a3 	rbit	r2, r3
 80032a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	4b89      	ldr	r3, [pc, #548]	; (80034d0 <HAL_RCC_OscConfig+0xc44>)
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80032b2:	2102      	movs	r1, #2
 80032b4:	6011      	str	r1, [r2, #0]
 80032b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	fa92 f1a2 	rbit	r1, r2
 80032c0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80032c4:	6011      	str	r1, [r2, #0]
  return result;
 80032c6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	fab2 f282 	clz	r2, r2
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	f002 021f 	and.w	r2, r2, #31
 80032dc:	2101      	movs	r1, #1
 80032de:	fa01 f202 	lsl.w	r2, r1, r2
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1a0      	bne.n	800322a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d105      	bne.n	80032fc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f0:	4b77      	ldr	r3, [pc, #476]	; (80034d0 <HAL_RCC_OscConfig+0xc44>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	4a76      	ldr	r2, [pc, #472]	; (80034d0 <HAL_RCC_OscConfig+0xc44>)
 80032f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 81c2 	beq.w	800368c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003308:	4b71      	ldr	r3, [pc, #452]	; (80034d0 <HAL_RCC_OscConfig+0xc44>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 030c 	and.w	r3, r3, #12
 8003310:	2b08      	cmp	r3, #8
 8003312:	f000 819c 	beq.w	800364e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b02      	cmp	r3, #2
 800331e:	f040 8114 	bne.w	800354a <HAL_RCC_OscConfig+0xcbe>
 8003322:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003326:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800332a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	fa93 f2a3 	rbit	r2, r3
 8003336:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800333a:	601a      	str	r2, [r3, #0]
  return result;
 800333c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003340:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800334c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	461a      	mov	r2, r3
 8003354:	2300      	movs	r3, #0
 8003356:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fd fe4c 	bl	8000ff4 <HAL_GetTick>
 800335c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003360:	e009      	b.n	8003376 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003362:	f7fd fe47 	bl	8000ff4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e18b      	b.n	800368e <HAL_RCC_OscConfig+0xe02>
 8003376:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800337a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	fa93 f2a3 	rbit	r2, r3
 800338a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800338e:	601a      	str	r2, [r3, #0]
  return result;
 8003390:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003394:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d102      	bne.n	80033b0 <HAL_RCC_OscConfig+0xb24>
 80033aa:	4b49      	ldr	r3, [pc, #292]	; (80034d0 <HAL_RCC_OscConfig+0xc44>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	e01b      	b.n	80033e8 <HAL_RCC_OscConfig+0xb5c>
 80033b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fa93 f2a3 	rbit	r2, r3
 80033c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80033ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	4b3a      	ldr	r3, [pc, #232]	; (80034d0 <HAL_RCC_OscConfig+0xc44>)
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80033ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033f0:	6011      	str	r1, [r2, #0]
 80033f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	fa92 f1a2 	rbit	r1, r2
 80033fc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003400:	6011      	str	r1, [r2, #0]
  return result;
 8003402:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	fab2 f282 	clz	r2, r2
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f042 0220 	orr.w	r2, r2, #32
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	f002 021f 	and.w	r2, r2, #31
 8003418:	2101      	movs	r1, #1
 800341a:	fa01 f202 	lsl.w	r2, r1, r2
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d19e      	bne.n	8003362 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003424:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <HAL_RCC_OscConfig+0xc44>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	430b      	orrs	r3, r1
 800343a:	4925      	ldr	r1, [pc, #148]	; (80034d0 <HAL_RCC_OscConfig+0xc44>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
 8003440:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003444:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	fa93 f2a3 	rbit	r2, r3
 8003454:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003458:	601a      	str	r2, [r3, #0]
  return result;
 800345a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800345e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800346a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	461a      	mov	r2, r3
 8003472:	2301      	movs	r3, #1
 8003474:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fd fdbd 	bl	8000ff4 <HAL_GetTick>
 800347a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347e:	e009      	b.n	8003494 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003480:	f7fd fdb8 	bl	8000ff4 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0fc      	b.n	800368e <HAL_RCC_OscConfig+0xe02>
 8003494:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800349c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	fa93 f2a3 	rbit	r2, r3
 80034a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034ac:	601a      	str	r2, [r3, #0]
  return result;
 80034ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_RCC_OscConfig+0xc48>
 80034c8:	4b01      	ldr	r3, [pc, #4]	; (80034d0 <HAL_RCC_OscConfig+0xc44>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	e01e      	b.n	800350c <HAL_RCC_OscConfig+0xc80>
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	fa93 f2a3 	rbit	r2, r3
 80034e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	fa93 f2a3 	rbit	r2, r3
 8003502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	4b63      	ldr	r3, [pc, #396]	; (8003698 <HAL_RCC_OscConfig+0xe0c>)
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003510:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003514:	6011      	str	r1, [r2, #0]
 8003516:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	fa92 f1a2 	rbit	r1, r2
 8003520:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003524:	6011      	str	r1, [r2, #0]
  return result;
 8003526:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	fab2 f282 	clz	r2, r2
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	f042 0220 	orr.w	r2, r2, #32
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	f002 021f 	and.w	r2, r2, #31
 800353c:	2101      	movs	r1, #1
 800353e:	fa01 f202 	lsl.w	r2, r1, r2
 8003542:	4013      	ands	r3, r2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d09b      	beq.n	8003480 <HAL_RCC_OscConfig+0xbf4>
 8003548:	e0a0      	b.n	800368c <HAL_RCC_OscConfig+0xe00>
 800354a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800354e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	fa93 f2a3 	rbit	r2, r3
 800355e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003562:	601a      	str	r2, [r3, #0]
  return result;
 8003564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003568:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003574:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	461a      	mov	r2, r3
 800357c:	2300      	movs	r3, #0
 800357e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fd fd38 	bl	8000ff4 <HAL_GetTick>
 8003584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003588:	e009      	b.n	800359e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358a:	f7fd fd33 	bl	8000ff4 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e077      	b.n	800368e <HAL_RCC_OscConfig+0xe02>
 800359e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	fa93 f2a3 	rbit	r2, r3
 80035b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b6:	601a      	str	r2, [r3, #0]
  return result;
 80035b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d102      	bne.n	80035d8 <HAL_RCC_OscConfig+0xd4c>
 80035d2:	4b31      	ldr	r3, [pc, #196]	; (8003698 <HAL_RCC_OscConfig+0xe0c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	e01b      	b.n	8003610 <HAL_RCC_OscConfig+0xd84>
 80035d8:	f107 0320 	add.w	r3, r7, #32
 80035dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	f107 0320 	add.w	r3, r7, #32
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	fa93 f2a3 	rbit	r2, r3
 80035ec:	f107 031c 	add.w	r3, r7, #28
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f107 0318 	add.w	r3, r7, #24
 80035f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	f107 0318 	add.w	r3, r7, #24
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	fa93 f2a3 	rbit	r2, r3
 8003606:	f107 0314 	add.w	r3, r7, #20
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	4b22      	ldr	r3, [pc, #136]	; (8003698 <HAL_RCC_OscConfig+0xe0c>)
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	f107 0210 	add.w	r2, r7, #16
 8003614:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003618:	6011      	str	r1, [r2, #0]
 800361a:	f107 0210 	add.w	r2, r7, #16
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	fa92 f1a2 	rbit	r1, r2
 8003624:	f107 020c 	add.w	r2, r7, #12
 8003628:	6011      	str	r1, [r2, #0]
  return result;
 800362a:	f107 020c 	add.w	r2, r7, #12
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	fab2 f282 	clz	r2, r2
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	f042 0220 	orr.w	r2, r2, #32
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	f002 021f 	and.w	r2, r2, #31
 8003640:	2101      	movs	r1, #1
 8003642:	fa01 f202 	lsl.w	r2, r1, r2
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d19e      	bne.n	800358a <HAL_RCC_OscConfig+0xcfe>
 800364c:	e01e      	b.n	800368c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800364e:	1d3b      	adds	r3, r7, #4
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e018      	b.n	800368e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800365c:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <HAL_RCC_OscConfig+0xe0c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003664:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003668:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	429a      	cmp	r2, r3
 8003674:	d108      	bne.n	8003688 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003676:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800367a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000

0800369c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b09e      	sub	sp, #120	; 0x78
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e162      	b.n	800397a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b4:	4b90      	ldr	r3, [pc, #576]	; (80038f8 <HAL_RCC_ClockConfig+0x25c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d910      	bls.n	80036e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b8d      	ldr	r3, [pc, #564]	; (80038f8 <HAL_RCC_ClockConfig+0x25c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 0207 	bic.w	r2, r3, #7
 80036ca:	498b      	ldr	r1, [pc, #556]	; (80038f8 <HAL_RCC_ClockConfig+0x25c>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b89      	ldr	r3, [pc, #548]	; (80038f8 <HAL_RCC_ClockConfig+0x25c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e14a      	b.n	800397a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f0:	4b82      	ldr	r3, [pc, #520]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	497f      	ldr	r1, [pc, #508]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80dc 	beq.w	80038c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d13c      	bne.n	8003792 <HAL_RCC_ClockConfig+0xf6>
 8003718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800371c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003728:	fab3 f383 	clz	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d102      	bne.n	8003742 <HAL_RCC_ClockConfig+0xa6>
 800373c:	4b6f      	ldr	r3, [pc, #444]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	e00f      	b.n	8003762 <HAL_RCC_ClockConfig+0xc6>
 8003742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003746:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	667b      	str	r3, [r7, #100]	; 0x64
 8003750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003754:	663b      	str	r3, [r7, #96]	; 0x60
 8003756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800375e:	4b67      	ldr	r3, [pc, #412]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003766:	65ba      	str	r2, [r7, #88]	; 0x58
 8003768:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800376a:	fa92 f2a2 	rbit	r2, r2
 800376e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003770:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003772:	fab2 f282 	clz	r2, r2
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	f042 0220 	orr.w	r2, r2, #32
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	f002 021f 	and.w	r2, r2, #31
 8003782:	2101      	movs	r1, #1
 8003784:	fa01 f202 	lsl.w	r2, r1, r2
 8003788:	4013      	ands	r3, r2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d17b      	bne.n	8003886 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0f3      	b.n	800397a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d13c      	bne.n	8003814 <HAL_RCC_ClockConfig+0x178>
 800379a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800379e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d102      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x128>
 80037be:	4b4f      	ldr	r3, [pc, #316]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	e00f      	b.n	80037e4 <HAL_RCC_ClockConfig+0x148>
 80037c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	647b      	str	r3, [r7, #68]	; 0x44
 80037d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037d6:	643b      	str	r3, [r7, #64]	; 0x40
 80037d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037e0:	4b46      	ldr	r3, [pc, #280]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80037ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ec:	fa92 f2a2 	rbit	r2, r2
 80037f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80037f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f4:	fab2 f282 	clz	r2, r2
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	f002 021f 	and.w	r2, r2, #31
 8003804:	2101      	movs	r1, #1
 8003806:	fa01 f202 	lsl.w	r2, r1, r2
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d13a      	bne.n	8003886 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0b2      	b.n	800397a <HAL_RCC_ClockConfig+0x2de>
 8003814:	2302      	movs	r3, #2
 8003816:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	fa93 f3a3 	rbit	r3, r3
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d102      	bne.n	800383c <HAL_RCC_ClockConfig+0x1a0>
 8003836:	4b31      	ldr	r3, [pc, #196]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	e00d      	b.n	8003858 <HAL_RCC_ClockConfig+0x1bc>
 800383c:	2302      	movs	r3, #2
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
 8003848:	2302      	movs	r3, #2
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	4b29      	ldr	r3, [pc, #164]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	2202      	movs	r2, #2
 800385a:	61ba      	str	r2, [r7, #24]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	fa92 f2a2 	rbit	r2, r2
 8003862:	617a      	str	r2, [r7, #20]
  return result;
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	fab2 f282 	clz	r2, r2
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	f042 0220 	orr.w	r2, r2, #32
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	f002 021f 	and.w	r2, r2, #31
 8003876:	2101      	movs	r1, #1
 8003878:	fa01 f202 	lsl.w	r2, r1, r2
 800387c:	4013      	ands	r3, r2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e079      	b.n	800397a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003886:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	491a      	ldr	r1, [pc, #104]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003898:	f7fd fbac 	bl	8000ff4 <HAL_GetTick>
 800389c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a0:	f7fd fba8 	bl	8000ff4 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e061      	b.n	800397a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	4b11      	ldr	r3, [pc, #68]	; (80038fc <HAL_RCC_ClockConfig+0x260>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 020c 	and.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1eb      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCC_ClockConfig+0x25c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d214      	bcs.n	8003900 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <HAL_RCC_ClockConfig+0x25c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 0207 	bic.w	r2, r3, #7
 80038de:	4906      	ldr	r1, [pc, #24]	; (80038f8 <HAL_RCC_ClockConfig+0x25c>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <HAL_RCC_ClockConfig+0x25c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e040      	b.n	800397a <HAL_RCC_ClockConfig+0x2de>
 80038f8:	40022000 	.word	0x40022000
 80038fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_RCC_ClockConfig+0x2e8>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	491a      	ldr	r1, [pc, #104]	; (8003984 <HAL_RCC_ClockConfig+0x2e8>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <HAL_RCC_ClockConfig+0x2e8>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4912      	ldr	r1, [pc, #72]	; (8003984 <HAL_RCC_ClockConfig+0x2e8>)
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800393e:	f000 f829 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8003942:	4601      	mov	r1, r0
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <HAL_RCC_ClockConfig+0x2e8>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800394c:	22f0      	movs	r2, #240	; 0xf0
 800394e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	fa92 f2a2 	rbit	r2, r2
 8003956:	60fa      	str	r2, [r7, #12]
  return result;
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	fab2 f282 	clz	r2, r2
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	40d3      	lsrs	r3, r2
 8003962:	4a09      	ldr	r2, [pc, #36]	; (8003988 <HAL_RCC_ClockConfig+0x2ec>)
 8003964:	5cd3      	ldrb	r3, [r2, r3]
 8003966:	fa21 f303 	lsr.w	r3, r1, r3
 800396a:	4a08      	ldr	r2, [pc, #32]	; (800398c <HAL_RCC_ClockConfig+0x2f0>)
 800396c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <HAL_RCC_ClockConfig+0x2f4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd fafa 	bl	8000f6c <HAL_InitTick>
  
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3778      	adds	r7, #120	; 0x78
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	08006614 	.word	0x08006614
 800398c:	20000000 	.word	0x20000000
 8003990:	20000004 	.word	0x20000004

08003994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003994:	b480      	push	{r7}
 8003996:	b08b      	sub	sp, #44	; 0x2c
 8003998:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80039ae:	4b29      	ldr	r3, [pc, #164]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d002      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x30>
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d003      	beq.n	80039ca <HAL_RCC_GetSysClockFreq+0x36>
 80039c2:	e03c      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039c4:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039c6:	623b      	str	r3, [r7, #32]
      break;
 80039c8:	e03c      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80039d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80039d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	fa92 f2a2 	rbit	r2, r2
 80039dc:	607a      	str	r2, [r7, #4]
  return result;
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	40d3      	lsrs	r3, r2
 80039e8:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xc8>)
 80039ea:	5cd3      	ldrb	r3, [r2, r3]
 80039ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80039ee:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	220f      	movs	r2, #15
 80039f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	fa92 f2a2 	rbit	r2, r2
 8003a00:	60fa      	str	r2, [r7, #12]
  return result;
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	fab2 f282 	clz	r2, r2
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	40d3      	lsrs	r3, r2
 8003a0c:	4a14      	ldr	r2, [pc, #80]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a0e:	5cd3      	ldrb	r3, [r2, r3]
 8003a10:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a1c:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2c:	e004      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	623b      	str	r3, [r7, #32]
      break;
 8003a3c:	e002      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a40:	623b      	str	r3, [r7, #32]
      break;
 8003a42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a44:	6a3b      	ldr	r3, [r7, #32]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	372c      	adds	r7, #44	; 0x2c
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40021000 	.word	0x40021000
 8003a58:	007a1200 	.word	0x007a1200
 8003a5c:	0800662c 	.word	0x0800662c
 8003a60:	0800663c 	.word	0x0800663c
 8003a64:	003d0900 	.word	0x003d0900

08003a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000000 	.word	0x20000000

08003a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a86:	f7ff ffef 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003a8a:	4601      	mov	r1, r0
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	fa92 f2a2 	rbit	r2, r2
 8003aa0:	603a      	str	r2, [r7, #0]
  return result;
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	fab2 f282 	clz	r2, r2
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	40d3      	lsrs	r3, r2
 8003aac:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003aae:	5cd3      	ldrb	r3, [r2, r3]
 8003ab0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	08006624 	.word	0x08006624

08003ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003aca:	f7ff ffcd 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003ace:	4601      	mov	r1, r0
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ad8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003adc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	fa92 f2a2 	rbit	r2, r2
 8003ae4:	603a      	str	r2, [r7, #0]
  return result;
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	fab2 f282 	clz	r2, r2
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	40d3      	lsrs	r3, r2
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08006624 	.word	0x08006624

08003b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b092      	sub	sp, #72	; 0x48
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80cd 	beq.w	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2c:	4b86      	ldr	r3, [pc, #536]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10e      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b38:	4b83      	ldr	r3, [pc, #524]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	4a82      	ldr	r2, [pc, #520]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b42:	61d3      	str	r3, [r2, #28]
 8003b44:	4b80      	ldr	r3, [pc, #512]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b56:	4b7d      	ldr	r3, [pc, #500]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d118      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b62:	4b7a      	ldr	r3, [pc, #488]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a79      	ldr	r2, [pc, #484]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6e:	f7fd fa41 	bl	8000ff4 <HAL_GetTick>
 8003b72:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b74:	e008      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b76:	f7fd fa3d 	bl	8000ff4 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b64      	cmp	r3, #100	; 0x64
 8003b82:	d901      	bls.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0db      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b88:	4b70      	ldr	r3, [pc, #448]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b94:	4b6c      	ldr	r3, [pc, #432]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d07d      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d076      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bb2:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bc0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	fa93 f3a3 	rbit	r3, r3
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bcc:	fab3 f383 	clz	r3, r3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4b5e      	ldr	r3, [pc, #376]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2301      	movs	r3, #1
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf0:	fab3 f383 	clz	r3, r3
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b55      	ldr	r3, [pc, #340]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	461a      	mov	r2, r3
 8003c00:	2300      	movs	r3, #0
 8003c02:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c04:	4a50      	ldr	r2, [pc, #320]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c08:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d045      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fd f9ee 	bl	8000ff4 <HAL_GetTick>
 8003c18:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f7fd f9ea 	bl	8000ff4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e086      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003c32:	2302      	movs	r3, #2
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3e:	2302      	movs	r3, #2
 8003c40:	623b      	str	r3, [r7, #32]
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	61fb      	str	r3, [r7, #28]
  return result;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f043 0302 	orr.w	r3, r3, #2
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d102      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c60:	4b39      	ldr	r3, [pc, #228]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	e007      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003c66:	2302      	movs	r3, #2
 8003c68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	4b35      	ldr	r3, [pc, #212]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	2202      	movs	r2, #2
 8003c78:	613a      	str	r2, [r7, #16]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	fa92 f2a2 	rbit	r2, r2
 8003c80:	60fa      	str	r2, [r7, #12]
  return result;
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	fab2 f282 	clz	r2, r2
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	f002 021f 	and.w	r2, r2, #31
 8003c94:	2101      	movs	r1, #1
 8003c96:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0bd      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ca0:	4b29      	ldr	r3, [pc, #164]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4926      	ldr	r1, [pc, #152]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d105      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cba:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f023 0203 	bic.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	491a      	ldr	r1, [pc, #104]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cf0:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	f023 0210 	bic.w	r2, r3, #16
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4912      	ldr	r1, [pc, #72]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	490b      	ldr	r1, [pc, #44]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	4903      	ldr	r1, [pc, #12]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3748      	adds	r7, #72	; 0x48
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40007000 	.word	0x40007000
 8003d50:	10908100 	.word	0x10908100

08003d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e049      	b.n	8003dfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fc ff1a 	bl	8000bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f000 fde0 	bl	8004958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d001      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e040      	b.n	8003e9e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <HAL_TIM_Base_Start_IT+0xa8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00e      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x58>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e46:	d009      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x58>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xac>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x58>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d115      	bne.n	8003e88 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d015      	beq.n	8003e9a <HAL_TIM_Base_Start_IT+0x96>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e74:	d011      	beq.n	8003e9a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0201 	orr.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e86:	e008      	b.n	8003e9a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	e000      	b.n	8003e9c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40012c00 	.word	0x40012c00
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	00010007 	.word	0x00010007

08003ebc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e049      	b.n	8003f62 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f841 	bl	8003f6a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f000 fd2c 	bl	8004958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e049      	b.n	8004024 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f841 	bl	800402c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f000 fccb 	bl	8004958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <HAL_TIM_PWM_Start+0x24>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	bf14      	ite	ne
 800405c:	2301      	movne	r3, #1
 800405e:	2300      	moveq	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e03c      	b.n	80040de <HAL_TIM_PWM_Start+0x9e>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b04      	cmp	r3, #4
 8004068:	d109      	bne.n	800407e <HAL_TIM_PWM_Start+0x3e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b01      	cmp	r3, #1
 8004074:	bf14      	ite	ne
 8004076:	2301      	movne	r3, #1
 8004078:	2300      	moveq	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	e02f      	b.n	80040de <HAL_TIM_PWM_Start+0x9e>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d109      	bne.n	8004098 <HAL_TIM_PWM_Start+0x58>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	bf14      	ite	ne
 8004090:	2301      	movne	r3, #1
 8004092:	2300      	moveq	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	e022      	b.n	80040de <HAL_TIM_PWM_Start+0x9e>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b0c      	cmp	r3, #12
 800409c:	d109      	bne.n	80040b2 <HAL_TIM_PWM_Start+0x72>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	e015      	b.n	80040de <HAL_TIM_PWM_Start+0x9e>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d109      	bne.n	80040cc <HAL_TIM_PWM_Start+0x8c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	bf14      	ite	ne
 80040c4:	2301      	movne	r3, #1
 80040c6:	2300      	moveq	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	e008      	b.n	80040de <HAL_TIM_PWM_Start+0x9e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	bf14      	ite	ne
 80040d8:	2301      	movne	r3, #1
 80040da:	2300      	moveq	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e088      	b.n	80041f8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_PWM_Start+0xb6>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f4:	e023      	b.n	800413e <HAL_TIM_PWM_Start+0xfe>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_PWM_Start+0xc6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	e01b      	b.n	800413e <HAL_TIM_PWM_Start+0xfe>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d104      	bne.n	8004116 <HAL_TIM_PWM_Start+0xd6>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004114:	e013      	b.n	800413e <HAL_TIM_PWM_Start+0xfe>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b0c      	cmp	r3, #12
 800411a:	d104      	bne.n	8004126 <HAL_TIM_PWM_Start+0xe6>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004124:	e00b      	b.n	800413e <HAL_TIM_PWM_Start+0xfe>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b10      	cmp	r3, #16
 800412a:	d104      	bne.n	8004136 <HAL_TIM_PWM_Start+0xf6>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004134:	e003      	b.n	800413e <HAL_TIM_PWM_Start+0xfe>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2201      	movs	r2, #1
 8004144:	6839      	ldr	r1, [r7, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 ffbe 	bl	80050c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2b      	ldr	r2, [pc, #172]	; (8004200 <HAL_TIM_PWM_Start+0x1c0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00e      	beq.n	8004174 <HAL_TIM_PWM_Start+0x134>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2a      	ldr	r2, [pc, #168]	; (8004204 <HAL_TIM_PWM_Start+0x1c4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d009      	beq.n	8004174 <HAL_TIM_PWM_Start+0x134>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a28      	ldr	r2, [pc, #160]	; (8004208 <HAL_TIM_PWM_Start+0x1c8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d004      	beq.n	8004174 <HAL_TIM_PWM_Start+0x134>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a27      	ldr	r2, [pc, #156]	; (800420c <HAL_TIM_PWM_Start+0x1cc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d101      	bne.n	8004178 <HAL_TIM_PWM_Start+0x138>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <HAL_TIM_PWM_Start+0x13a>
 8004178:	2300      	movs	r3, #0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d007      	beq.n	800418e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800418c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_TIM_PWM_Start+0x1c0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00e      	beq.n	80041b6 <HAL_TIM_PWM_Start+0x176>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d009      	beq.n	80041b6 <HAL_TIM_PWM_Start+0x176>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1a      	ldr	r2, [pc, #104]	; (8004210 <HAL_TIM_PWM_Start+0x1d0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d004      	beq.n	80041b6 <HAL_TIM_PWM_Start+0x176>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a14      	ldr	r2, [pc, #80]	; (8004204 <HAL_TIM_PWM_Start+0x1c4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d115      	bne.n	80041e2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	4b15      	ldr	r3, [pc, #84]	; (8004214 <HAL_TIM_PWM_Start+0x1d4>)
 80041be:	4013      	ands	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b06      	cmp	r3, #6
 80041c6:	d015      	beq.n	80041f4 <HAL_TIM_PWM_Start+0x1b4>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ce:	d011      	beq.n	80041f4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e0:	e008      	b.n	80041f4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0201 	orr.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	e000      	b.n	80041f6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40014000 	.word	0x40014000
 8004208:	40014400 	.word	0x40014400
 800420c:	40014800 	.word	0x40014800
 8004210:	40000400 	.word	0x40000400
 8004214:	00010007 	.word	0x00010007

08004218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b02      	cmp	r3, #2
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0202 	mvn.w	r2, #2
 8004244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fb5d 	bl	800491a <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fb4f 	bl	8004906 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fb60 	bl	800492e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0204 	mvn.w	r2, #4
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fb33 	bl	800491a <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fb25 	bl	8004906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fb36 	bl	800492e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d122      	bne.n	800431c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d11b      	bne.n	800431c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0208 	mvn.w	r2, #8
 80042ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2204      	movs	r2, #4
 80042f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fb09 	bl	800491a <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fafb 	bl	8004906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fb0c 	bl	800492e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b10      	cmp	r3, #16
 8004328:	d122      	bne.n	8004370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b10      	cmp	r3, #16
 8004336:	d11b      	bne.n	8004370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0210 	mvn.w	r2, #16
 8004340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2208      	movs	r2, #8
 8004346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fadf 	bl	800491a <HAL_TIM_IC_CaptureCallback>
 800435c:	e005      	b.n	800436a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fad1 	bl	8004906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fae2 	bl	800492e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10e      	bne.n	800439c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0201 	mvn.w	r2, #1
 8004394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fb ff46 	bl	8000228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b80      	cmp	r3, #128	; 0x80
 80043a8:	d10e      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d107      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 ff96 	bl	80052f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d6:	d10e      	bne.n	80043f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b80      	cmp	r3, #128	; 0x80
 80043e4:	d107      	bne.n	80043f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 ff89 	bl	8005308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	d10e      	bne.n	8004422 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d107      	bne.n	8004422 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800441a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fa90 	bl	8004942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b20      	cmp	r3, #32
 800442e:	d10e      	bne.n	800444e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	d107      	bne.n	800444e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f06f 0220 	mvn.w	r2, #32
 8004446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 ff49 	bl	80052e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004472:	2302      	movs	r3, #2
 8004474:	e066      	b.n	8004544 <HAL_TIM_OC_ConfigChannel+0xec>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b14      	cmp	r3, #20
 8004482:	d857      	bhi.n	8004534 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004484:	a201      	add	r2, pc, #4	; (adr r2, 800448c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448a:	bf00      	nop
 800448c:	080044e1 	.word	0x080044e1
 8004490:	08004535 	.word	0x08004535
 8004494:	08004535 	.word	0x08004535
 8004498:	08004535 	.word	0x08004535
 800449c:	080044ef 	.word	0x080044ef
 80044a0:	08004535 	.word	0x08004535
 80044a4:	08004535 	.word	0x08004535
 80044a8:	08004535 	.word	0x08004535
 80044ac:	080044fd 	.word	0x080044fd
 80044b0:	08004535 	.word	0x08004535
 80044b4:	08004535 	.word	0x08004535
 80044b8:	08004535 	.word	0x08004535
 80044bc:	0800450b 	.word	0x0800450b
 80044c0:	08004535 	.word	0x08004535
 80044c4:	08004535 	.word	0x08004535
 80044c8:	08004535 	.word	0x08004535
 80044cc:	08004519 	.word	0x08004519
 80044d0:	08004535 	.word	0x08004535
 80044d4:	08004535 	.word	0x08004535
 80044d8:	08004535 	.word	0x08004535
 80044dc:	08004527 	.word	0x08004527
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 faae 	bl	8004a48 <TIM_OC1_SetConfig>
      break;
 80044ec:	e025      	b.n	800453a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fb2d 	bl	8004b54 <TIM_OC2_SetConfig>
      break;
 80044fa:	e01e      	b.n	800453a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fba6 	bl	8004c54 <TIM_OC3_SetConfig>
      break;
 8004508:	e017      	b.n	800453a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fc1d 	bl	8004d50 <TIM_OC4_SetConfig>
      break;
 8004516:	e010      	b.n	800453a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fc7a 	bl	8004e18 <TIM_OC5_SetConfig>
      break;
 8004524:	e009      	b.n	800453a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fcd1 	bl	8004ed4 <TIM_OC6_SetConfig>
      break;
 8004532:	e002      	b.n	800453a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75fb      	strb	r3, [r7, #23]
      break;
 8004538:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004566:	2302      	movs	r3, #2
 8004568:	e0ff      	b.n	800476a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b14      	cmp	r3, #20
 8004576:	f200 80f0 	bhi.w	800475a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	080045d5 	.word	0x080045d5
 8004584:	0800475b 	.word	0x0800475b
 8004588:	0800475b 	.word	0x0800475b
 800458c:	0800475b 	.word	0x0800475b
 8004590:	08004615 	.word	0x08004615
 8004594:	0800475b 	.word	0x0800475b
 8004598:	0800475b 	.word	0x0800475b
 800459c:	0800475b 	.word	0x0800475b
 80045a0:	08004657 	.word	0x08004657
 80045a4:	0800475b 	.word	0x0800475b
 80045a8:	0800475b 	.word	0x0800475b
 80045ac:	0800475b 	.word	0x0800475b
 80045b0:	08004697 	.word	0x08004697
 80045b4:	0800475b 	.word	0x0800475b
 80045b8:	0800475b 	.word	0x0800475b
 80045bc:	0800475b 	.word	0x0800475b
 80045c0:	080046d9 	.word	0x080046d9
 80045c4:	0800475b 	.word	0x0800475b
 80045c8:	0800475b 	.word	0x0800475b
 80045cc:	0800475b 	.word	0x0800475b
 80045d0:	08004719 	.word	0x08004719
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fa34 	bl	8004a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0208 	orr.w	r2, r2, #8
 80045ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0204 	bic.w	r2, r2, #4
 80045fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6999      	ldr	r1, [r3, #24]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	619a      	str	r2, [r3, #24]
      break;
 8004612:	e0a5      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fa9a 	bl	8004b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800462e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6999      	ldr	r1, [r3, #24]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	021a      	lsls	r2, r3, #8
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	619a      	str	r2, [r3, #24]
      break;
 8004654:	e084      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	4618      	mov	r0, r3
 800465e:	f000 faf9 	bl	8004c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0208 	orr.w	r2, r2, #8
 8004670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0204 	bic.w	r2, r2, #4
 8004680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69d9      	ldr	r1, [r3, #28]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	61da      	str	r2, [r3, #28]
      break;
 8004694:	e064      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fb57 	bl	8004d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69d9      	ldr	r1, [r3, #28]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	021a      	lsls	r2, r3, #8
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	61da      	str	r2, [r3, #28]
      break;
 80046d6:	e043      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fb9a 	bl	8004e18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0208 	orr.w	r2, r2, #8
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0204 	bic.w	r2, r2, #4
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004716:	e023      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fbd8 	bl	8004ed4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004732:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	021a      	lsls	r2, r3, #8
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004758:	e002      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	75fb      	strb	r3, [r7, #23]
      break;
 800475e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004768:	7dfb      	ldrb	r3, [r7, #23]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop

08004774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_TIM_ConfigClockSource+0x1c>
 800478c:	2302      	movs	r3, #2
 800478e:	e0b6      	b.n	80048fe <HAL_TIM_ConfigClockSource+0x18a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047cc:	d03e      	beq.n	800484c <HAL_TIM_ConfigClockSource+0xd8>
 80047ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d2:	f200 8087 	bhi.w	80048e4 <HAL_TIM_ConfigClockSource+0x170>
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047da:	f000 8086 	beq.w	80048ea <HAL_TIM_ConfigClockSource+0x176>
 80047de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e2:	d87f      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x170>
 80047e4:	2b70      	cmp	r3, #112	; 0x70
 80047e6:	d01a      	beq.n	800481e <HAL_TIM_ConfigClockSource+0xaa>
 80047e8:	2b70      	cmp	r3, #112	; 0x70
 80047ea:	d87b      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x170>
 80047ec:	2b60      	cmp	r3, #96	; 0x60
 80047ee:	d050      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x11e>
 80047f0:	2b60      	cmp	r3, #96	; 0x60
 80047f2:	d877      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x170>
 80047f4:	2b50      	cmp	r3, #80	; 0x50
 80047f6:	d03c      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0xfe>
 80047f8:	2b50      	cmp	r3, #80	; 0x50
 80047fa:	d873      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x170>
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d058      	beq.n	80048b2 <HAL_TIM_ConfigClockSource+0x13e>
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d86f      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x170>
 8004804:	2b30      	cmp	r3, #48	; 0x30
 8004806:	d064      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15e>
 8004808:	2b30      	cmp	r3, #48	; 0x30
 800480a:	d86b      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x170>
 800480c:	2b20      	cmp	r3, #32
 800480e:	d060      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15e>
 8004810:	2b20      	cmp	r3, #32
 8004812:	d867      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x170>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d05c      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15e>
 8004818:	2b10      	cmp	r3, #16
 800481a:	d05a      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15e>
 800481c:	e062      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6899      	ldr	r1, [r3, #8]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f000 fc2b 	bl	8005088 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	609a      	str	r2, [r3, #8]
      break;
 800484a:	e04f      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6899      	ldr	r1, [r3, #8]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f000 fc14 	bl	8005088 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800486e:	609a      	str	r2, [r3, #8]
      break;
 8004870:	e03c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6859      	ldr	r1, [r3, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	461a      	mov	r2, r3
 8004880:	f000 fb88 	bl	8004f94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2150      	movs	r1, #80	; 0x50
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fbe1 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004890:	e02c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6859      	ldr	r1, [r3, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	461a      	mov	r2, r3
 80048a0:	f000 fba7 	bl	8004ff2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2160      	movs	r1, #96	; 0x60
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fbd1 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 80048b0:	e01c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6859      	ldr	r1, [r3, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	461a      	mov	r2, r3
 80048c0:	f000 fb68 	bl	8004f94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2140      	movs	r1, #64	; 0x40
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fbc1 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 80048d0:	e00c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f000 fbb8 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 80048e2:	e003      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      break;
 80048e8:	e000      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a32      	ldr	r2, [pc, #200]	; (8004a34 <TIM_Base_SetConfig+0xdc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d007      	beq.n	8004980 <TIM_Base_SetConfig+0x28>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004976:	d003      	beq.n	8004980 <TIM_Base_SetConfig+0x28>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a2f      	ldr	r2, [pc, #188]	; (8004a38 <TIM_Base_SetConfig+0xe0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d108      	bne.n	8004992 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a27      	ldr	r2, [pc, #156]	; (8004a34 <TIM_Base_SetConfig+0xdc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <TIM_Base_SetConfig+0x6a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a0:	d00f      	beq.n	80049c2 <TIM_Base_SetConfig+0x6a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a24      	ldr	r2, [pc, #144]	; (8004a38 <TIM_Base_SetConfig+0xe0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00b      	beq.n	80049c2 <TIM_Base_SetConfig+0x6a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a23      	ldr	r2, [pc, #140]	; (8004a3c <TIM_Base_SetConfig+0xe4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d007      	beq.n	80049c2 <TIM_Base_SetConfig+0x6a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a22      	ldr	r2, [pc, #136]	; (8004a40 <TIM_Base_SetConfig+0xe8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d003      	beq.n	80049c2 <TIM_Base_SetConfig+0x6a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a21      	ldr	r2, [pc, #132]	; (8004a44 <TIM_Base_SetConfig+0xec>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d108      	bne.n	80049d4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a0e      	ldr	r2, [pc, #56]	; (8004a34 <TIM_Base_SetConfig+0xdc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00b      	beq.n	8004a18 <TIM_Base_SetConfig+0xc0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <TIM_Base_SetConfig+0xe4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d007      	beq.n	8004a18 <TIM_Base_SetConfig+0xc0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a0d      	ldr	r2, [pc, #52]	; (8004a40 <TIM_Base_SetConfig+0xe8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_Base_SetConfig+0xc0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a0c      	ldr	r2, [pc, #48]	; (8004a44 <TIM_Base_SetConfig+0xec>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d103      	bne.n	8004a20 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	615a      	str	r2, [r3, #20]
}
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40012c00 	.word	0x40012c00
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800

08004a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f023 0201 	bic.w	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0303 	bic.w	r3, r3, #3
 8004a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f023 0302 	bic.w	r3, r3, #2
 8004a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a28      	ldr	r2, [pc, #160]	; (8004b44 <TIM_OC1_SetConfig+0xfc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00b      	beq.n	8004ac0 <TIM_OC1_SetConfig+0x78>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a27      	ldr	r2, [pc, #156]	; (8004b48 <TIM_OC1_SetConfig+0x100>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d007      	beq.n	8004ac0 <TIM_OC1_SetConfig+0x78>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a26      	ldr	r2, [pc, #152]	; (8004b4c <TIM_OC1_SetConfig+0x104>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <TIM_OC1_SetConfig+0x78>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a25      	ldr	r2, [pc, #148]	; (8004b50 <TIM_OC1_SetConfig+0x108>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d10c      	bne.n	8004ada <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f023 0308 	bic.w	r3, r3, #8
 8004ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f023 0304 	bic.w	r3, r3, #4
 8004ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a19      	ldr	r2, [pc, #100]	; (8004b44 <TIM_OC1_SetConfig+0xfc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00b      	beq.n	8004afa <TIM_OC1_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <TIM_OC1_SetConfig+0x100>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d007      	beq.n	8004afa <TIM_OC1_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <TIM_OC1_SetConfig+0x104>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d003      	beq.n	8004afa <TIM_OC1_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a16      	ldr	r2, [pc, #88]	; (8004b50 <TIM_OC1_SetConfig+0x108>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d111      	bne.n	8004b1e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	621a      	str	r2, [r3, #32]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40014400 	.word	0x40014400
 8004b50:	40014800 	.word	0x40014800

08004b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0210 	bic.w	r2, r3, #16
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 0320 	bic.w	r3, r3, #32
 8004ba2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a24      	ldr	r2, [pc, #144]	; (8004c44 <TIM_OC2_SetConfig+0xf0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d10d      	bne.n	8004bd4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a1b      	ldr	r2, [pc, #108]	; (8004c44 <TIM_OC2_SetConfig+0xf0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00b      	beq.n	8004bf4 <TIM_OC2_SetConfig+0xa0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a1a      	ldr	r2, [pc, #104]	; (8004c48 <TIM_OC2_SetConfig+0xf4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d007      	beq.n	8004bf4 <TIM_OC2_SetConfig+0xa0>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <TIM_OC2_SetConfig+0xf8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_OC2_SetConfig+0xa0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <TIM_OC2_SetConfig+0xfc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d113      	bne.n	8004c1c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bfa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c02:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	621a      	str	r2, [r3, #32]
}
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40012c00 	.word	0x40012c00
 8004c48:	40014000 	.word	0x40014000
 8004c4c:	40014400 	.word	0x40014400
 8004c50:	40014800 	.word	0x40014800

08004c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0303 	bic.w	r3, r3, #3
 8004c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <TIM_OC3_SetConfig+0xec>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d10d      	bne.n	8004cd2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cd0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1a      	ldr	r2, [pc, #104]	; (8004d40 <TIM_OC3_SetConfig+0xec>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_OC3_SetConfig+0x9e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a19      	ldr	r2, [pc, #100]	; (8004d44 <TIM_OC3_SetConfig+0xf0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_OC3_SetConfig+0x9e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a18      	ldr	r2, [pc, #96]	; (8004d48 <TIM_OC3_SetConfig+0xf4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_OC3_SetConfig+0x9e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a17      	ldr	r2, [pc, #92]	; (8004d4c <TIM_OC3_SetConfig+0xf8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d113      	bne.n	8004d1a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800

08004d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	031b      	lsls	r3, r3, #12
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <TIM_OC4_SetConfig+0xb8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_OC4_SetConfig+0x7c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <TIM_OC4_SetConfig+0xbc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_OC4_SetConfig+0x7c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <TIM_OC4_SetConfig+0xc0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC4_SetConfig+0x7c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a13      	ldr	r2, [pc, #76]	; (8004e14 <TIM_OC4_SetConfig+0xc4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d109      	bne.n	8004de0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	019b      	lsls	r3, r3, #6
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	621a      	str	r2, [r3, #32]
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40014400 	.word	0x40014400
 8004e14:	40014800 	.word	0x40014800

08004e18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a15      	ldr	r2, [pc, #84]	; (8004ec4 <TIM_OC5_SetConfig+0xac>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <TIM_OC5_SetConfig+0x72>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <TIM_OC5_SetConfig+0xb0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_OC5_SetConfig+0x72>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <TIM_OC5_SetConfig+0xb4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_OC5_SetConfig+0x72>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a12      	ldr	r2, [pc, #72]	; (8004ed0 <TIM_OC5_SetConfig+0xb8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d109      	bne.n	8004e9e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800

08004ed4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	051b      	lsls	r3, r3, #20
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <TIM_OC6_SetConfig+0xb0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <TIM_OC6_SetConfig+0x74>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <TIM_OC6_SetConfig+0xb4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_OC6_SetConfig+0x74>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a14      	ldr	r2, [pc, #80]	; (8004f8c <TIM_OC6_SetConfig+0xb8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_OC6_SetConfig+0x74>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <TIM_OC6_SetConfig+0xbc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d109      	bne.n	8004f5c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800

08004f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f023 0201 	bic.w	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f023 030a 	bic.w	r3, r3, #10
 8004fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b087      	sub	sp, #28
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0210 	bic.w	r2, r3, #16
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800501c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	031b      	lsls	r3, r3, #12
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800502e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	f043 0307 	orr.w	r3, r3, #7
 8005074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	021a      	lsls	r2, r3, #8
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	609a      	str	r2, [r3, #8]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	2201      	movs	r2, #1
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a1a      	ldr	r2, [r3, #32]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	43db      	mvns	r3, r3
 80050ea:	401a      	ands	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1a      	ldr	r2, [r3, #32]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005100:	431a      	orrs	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005128:	2302      	movs	r3, #2
 800512a:	e054      	b.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a24      	ldr	r2, [pc, #144]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800515c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00e      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005194:	d009      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a11      	ldr	r2, [pc, #68]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10c      	bne.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40014000 	.word	0x40014000

080051f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005208:	2302      	movs	r3, #2
 800520a:	e060      	b.n	80052ce <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	041b      	lsls	r3, r3, #16
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a14      	ldr	r2, [pc, #80]	; (80052dc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d115      	bne.n	80052bc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	051b      	lsls	r3, r3, #20
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00

080052e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e040      	b.n	80053b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fb fcec 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2224      	movs	r2, #36	; 0x24
 8005348:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fb78 	bl	8005a50 <UART_SetConfig>
 8005360:	4603      	mov	r3, r0
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e022      	b.n	80053b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fca2 	bl	8005cbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fd29 	bl	8005e00 <UART_CheckIdleState>
 80053ae:	4603      	mov	r3, r0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	; 0x28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d13d      	bne.n	800544a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <HAL_UART_Receive_IT+0x22>
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e036      	b.n	800544c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_UART_Receive_IT+0x34>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e02f      	b.n	800544c <HAL_UART_Receive_IT+0x94>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d018      	beq.n	800543a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	613b      	str	r3, [r7, #16]
   return(result);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	623b      	str	r3, [r7, #32]
 8005428:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	69f9      	ldr	r1, [r7, #28]
 800542c:	6a3a      	ldr	r2, [r7, #32]
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	61bb      	str	r3, [r7, #24]
   return(result);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e6      	bne.n	8005408 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	461a      	mov	r2, r3
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fdeb 	bl	800601c <UART_Start_Receive_IT>
 8005446:	4603      	mov	r3, r0
 8005448:	e000      	b.n	800544c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800544a:	2302      	movs	r3, #2
  }
}
 800544c:	4618      	mov	r0, r3
 800544e:	3728      	adds	r7, #40	; 0x28
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b0ba      	sub	sp, #232	; 0xe8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800547a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800547e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005482:	4013      	ands	r3, r2
 8005484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d115      	bne.n	80054bc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00f      	beq.n	80054bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d009      	beq.n	80054bc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 82a3 	beq.w	80059f8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	4798      	blx	r3
      }
      return;
 80054ba:	e29d      	b.n	80059f8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8117 	beq.w	80056f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80054d6:	4b85      	ldr	r3, [pc, #532]	; (80056ec <HAL_UART_IRQHandler+0x298>)
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 810a 	beq.w	80056f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d011      	beq.n	8005510 <HAL_UART_IRQHandler+0xbc>
 80054ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2201      	movs	r2, #1
 80054fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005506:	f043 0201 	orr.w	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d011      	beq.n	8005540 <HAL_UART_IRQHandler+0xec>
 800551c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00b      	beq.n	8005540 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2202      	movs	r2, #2
 800552e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005536:	f043 0204 	orr.w	r2, r3, #4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d011      	beq.n	8005570 <HAL_UART_IRQHandler+0x11c>
 800554c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00b      	beq.n	8005570 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2204      	movs	r2, #4
 800555e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005566:	f043 0202 	orr.w	r2, r3, #2
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b00      	cmp	r3, #0
 800557a:	d017      	beq.n	80055ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800557c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b00      	cmp	r3, #0
 8005586:	d105      	bne.n	8005594 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800558c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00b      	beq.n	80055ac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2208      	movs	r2, #8
 800559a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a2:	f043 0208 	orr.w	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d012      	beq.n	80055de <HAL_UART_IRQHandler+0x18a>
 80055b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00c      	beq.n	80055de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d4:	f043 0220 	orr.w	r2, r3, #32
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8209 	beq.w	80059fc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00d      	beq.n	8005612 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005618:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d005      	beq.n	8005636 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800562a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800562e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005632:	2b00      	cmp	r3, #0
 8005634:	d04f      	beq.n	80056d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fd9c 	bl	8006174 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d141      	bne.n	80056ce <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005660:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3308      	adds	r3, #8
 8005672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005676:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800567a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005682:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800568e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1d9      	bne.n	800564a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	2b00      	cmp	r3, #0
 800569c:	d013      	beq.n	80056c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <HAL_UART_IRQHandler+0x29c>)
 80056a4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fc ff26 	bl	80024fc <HAL_DMA_Abort_IT>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d017      	beq.n	80056e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80056c0:	4610      	mov	r0, r2
 80056c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c4:	e00f      	b.n	80056e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9ac 	bl	8005a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056cc:	e00b      	b.n	80056e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f9a8 	bl	8005a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d4:	e007      	b.n	80056e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f9a4 	bl	8005a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80056e4:	e18a      	b.n	80059fc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e6:	bf00      	nop
    return;
 80056e8:	e188      	b.n	80059fc <HAL_UART_IRQHandler+0x5a8>
 80056ea:	bf00      	nop
 80056ec:	04000120 	.word	0x04000120
 80056f0:	0800623b 	.word	0x0800623b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	f040 8143 	bne.w	8005984 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 813c 	beq.w	8005984 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800570c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8135 	beq.w	8005984 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2210      	movs	r2, #16
 8005720:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	f040 80b1 	bne.w	8005894 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800573e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 815c 	beq.w	8005a00 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800574e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005752:	429a      	cmp	r2, r3
 8005754:	f080 8154 	bcs.w	8005a00 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800575e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	2b20      	cmp	r3, #32
 800576a:	f000 8085 	beq.w	8005878 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005782:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800578a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005798:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800579c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1da      	bne.n	800576e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3308      	adds	r3, #8
 80057be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057e0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e1      	bne.n	80057b8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3308      	adds	r3, #8
 80057fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3308      	adds	r3, #8
 8005814:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005818:	66fa      	str	r2, [r7, #108]	; 0x6c
 800581a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800581e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e3      	bne.n	80057f4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005848:	f023 0310 	bic.w	r3, r3, #16
 800584c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800585a:	65bb      	str	r3, [r7, #88]	; 0x58
 800585c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e4      	bne.n	8005838 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	4618      	mov	r0, r3
 8005874:	f7fc fe09 	bl	800248a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005884:	b29b      	uxth	r3, r3
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	b29b      	uxth	r3, r3
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f8d3 	bl	8005a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005892:	e0b5      	b.n	8005a00 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80a7 	beq.w	8005a04 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80058b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80a2 	beq.w	8005a04 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058e2:	647b      	str	r3, [r7, #68]	; 0x44
 80058e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e4      	bne.n	80058c0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	623b      	str	r3, [r7, #32]
   return(result);
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3308      	adds	r3, #8
 8005916:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800591a:	633a      	str	r2, [r7, #48]	; 0x30
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e3      	bne.n	80058f6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	60fb      	str	r3, [r7, #12]
   return(result);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f023 0310 	bic.w	r3, r3, #16
 8005954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	69b9      	ldr	r1, [r7, #24]
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	617b      	str	r3, [r7, #20]
   return(result);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e4      	bne.n	8005940 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005976:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f85b 	bl	8005a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005982:	e03f      	b.n	8005a04 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00e      	beq.n	80059ae <HAL_UART_IRQHandler+0x55a>
 8005990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80059a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fde3 	bl	8006572 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059ac:	e02d      	b.n	8005a0a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00e      	beq.n	80059d8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d008      	beq.n	80059d8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01c      	beq.n	8005a08 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	4798      	blx	r3
    }
    return;
 80059d6:	e017      	b.n	8005a08 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d012      	beq.n	8005a0a <HAL_UART_IRQHandler+0x5b6>
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00c      	beq.n	8005a0a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fc38 	bl	8006266 <UART_EndTransmit_IT>
    return;
 80059f6:	e008      	b.n	8005a0a <HAL_UART_IRQHandler+0x5b6>
      return;
 80059f8:	bf00      	nop
 80059fa:	e006      	b.n	8005a0a <HAL_UART_IRQHandler+0x5b6>
    return;
 80059fc:	bf00      	nop
 80059fe:	e004      	b.n	8005a0a <HAL_UART_IRQHandler+0x5b6>
      return;
 8005a00:	bf00      	nop
 8005a02:	e002      	b.n	8005a0a <HAL_UART_IRQHandler+0x5b6>
      return;
 8005a04:	bf00      	nop
 8005a06:	e000      	b.n	8005a0a <HAL_UART_IRQHandler+0x5b6>
    return;
 8005a08:	bf00      	nop
  }

}
 8005a0a:	37e8      	adds	r7, #232	; 0xe8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b8a      	ldr	r3, [pc, #552]	; (8005ca4 <UART_SetConfig+0x254>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	6979      	ldr	r1, [r7, #20]
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a78      	ldr	r2, [pc, #480]	; (8005ca8 <UART_SetConfig+0x258>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d120      	bne.n	8005b0e <UART_SetConfig+0xbe>
 8005acc:	4b77      	ldr	r3, [pc, #476]	; (8005cac <UART_SetConfig+0x25c>)
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d817      	bhi.n	8005b08 <UART_SetConfig+0xb8>
 8005ad8:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <UART_SetConfig+0x90>)
 8005ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ade:	bf00      	nop
 8005ae0:	08005af1 	.word	0x08005af1
 8005ae4:	08005afd 	.word	0x08005afd
 8005ae8:	08005b03 	.word	0x08005b03
 8005aec:	08005af7 	.word	0x08005af7
 8005af0:	2300      	movs	r3, #0
 8005af2:	77fb      	strb	r3, [r7, #31]
 8005af4:	e01d      	b.n	8005b32 <UART_SetConfig+0xe2>
 8005af6:	2302      	movs	r3, #2
 8005af8:	77fb      	strb	r3, [r7, #31]
 8005afa:	e01a      	b.n	8005b32 <UART_SetConfig+0xe2>
 8005afc:	2304      	movs	r3, #4
 8005afe:	77fb      	strb	r3, [r7, #31]
 8005b00:	e017      	b.n	8005b32 <UART_SetConfig+0xe2>
 8005b02:	2308      	movs	r3, #8
 8005b04:	77fb      	strb	r3, [r7, #31]
 8005b06:	e014      	b.n	8005b32 <UART_SetConfig+0xe2>
 8005b08:	2310      	movs	r3, #16
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e011      	b.n	8005b32 <UART_SetConfig+0xe2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a67      	ldr	r2, [pc, #412]	; (8005cb0 <UART_SetConfig+0x260>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d102      	bne.n	8005b1e <UART_SetConfig+0xce>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e009      	b.n	8005b32 <UART_SetConfig+0xe2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a64      	ldr	r2, [pc, #400]	; (8005cb4 <UART_SetConfig+0x264>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d102      	bne.n	8005b2e <UART_SetConfig+0xde>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e001      	b.n	8005b32 <UART_SetConfig+0xe2>
 8005b2e:	2310      	movs	r3, #16
 8005b30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b3a:	d15b      	bne.n	8005bf4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005b3c:	7ffb      	ldrb	r3, [r7, #31]
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d827      	bhi.n	8005b92 <UART_SetConfig+0x142>
 8005b42:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <UART_SetConfig+0xf8>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b6d 	.word	0x08005b6d
 8005b4c:	08005b75 	.word	0x08005b75
 8005b50:	08005b7d 	.word	0x08005b7d
 8005b54:	08005b93 	.word	0x08005b93
 8005b58:	08005b83 	.word	0x08005b83
 8005b5c:	08005b93 	.word	0x08005b93
 8005b60:	08005b93 	.word	0x08005b93
 8005b64:	08005b93 	.word	0x08005b93
 8005b68:	08005b8b 	.word	0x08005b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b6c:	f7fd ff88 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8005b70:	61b8      	str	r0, [r7, #24]
        break;
 8005b72:	e013      	b.n	8005b9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b74:	f7fd ffa6 	bl	8003ac4 <HAL_RCC_GetPCLK2Freq>
 8005b78:	61b8      	str	r0, [r7, #24]
        break;
 8005b7a:	e00f      	b.n	8005b9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b7c:	4b4e      	ldr	r3, [pc, #312]	; (8005cb8 <UART_SetConfig+0x268>)
 8005b7e:	61bb      	str	r3, [r7, #24]
        break;
 8005b80:	e00c      	b.n	8005b9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b82:	f7fd ff07 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8005b86:	61b8      	str	r0, [r7, #24]
        break;
 8005b88:	e008      	b.n	8005b9c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8e:	61bb      	str	r3, [r7, #24]
        break;
 8005b90:	e004      	b.n	8005b9c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	77bb      	strb	r3, [r7, #30]
        break;
 8005b9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d074      	beq.n	8005c8c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	005a      	lsls	r2, r3, #1
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	441a      	add	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b0f      	cmp	r3, #15
 8005bbe:	d916      	bls.n	8005bee <UART_SetConfig+0x19e>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc6:	d212      	bcs.n	8005bee <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f023 030f 	bic.w	r3, r3, #15
 8005bd0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	89fb      	ldrh	r3, [r7, #14]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	89fa      	ldrh	r2, [r7, #14]
 8005bea:	60da      	str	r2, [r3, #12]
 8005bec:	e04e      	b.n	8005c8c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	77bb      	strb	r3, [r7, #30]
 8005bf2:	e04b      	b.n	8005c8c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bf4:	7ffb      	ldrb	r3, [r7, #31]
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d827      	bhi.n	8005c4a <UART_SetConfig+0x1fa>
 8005bfa:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <UART_SetConfig+0x1b0>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c25 	.word	0x08005c25
 8005c04:	08005c2d 	.word	0x08005c2d
 8005c08:	08005c35 	.word	0x08005c35
 8005c0c:	08005c4b 	.word	0x08005c4b
 8005c10:	08005c3b 	.word	0x08005c3b
 8005c14:	08005c4b 	.word	0x08005c4b
 8005c18:	08005c4b 	.word	0x08005c4b
 8005c1c:	08005c4b 	.word	0x08005c4b
 8005c20:	08005c43 	.word	0x08005c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c24:	f7fd ff2c 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8005c28:	61b8      	str	r0, [r7, #24]
        break;
 8005c2a:	e013      	b.n	8005c54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c2c:	f7fd ff4a 	bl	8003ac4 <HAL_RCC_GetPCLK2Freq>
 8005c30:	61b8      	str	r0, [r7, #24]
        break;
 8005c32:	e00f      	b.n	8005c54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c34:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <UART_SetConfig+0x268>)
 8005c36:	61bb      	str	r3, [r7, #24]
        break;
 8005c38:	e00c      	b.n	8005c54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c3a:	f7fd feab 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8005c3e:	61b8      	str	r0, [r7, #24]
        break;
 8005c40:	e008      	b.n	8005c54 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c46:	61bb      	str	r3, [r7, #24]
        break;
 8005c48:	e004      	b.n	8005c54 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	77bb      	strb	r3, [r7, #30]
        break;
 8005c52:	bf00      	nop
    }

    if (pclk != 0U)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d018      	beq.n	8005c8c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	085a      	lsrs	r2, r3, #1
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	441a      	add	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2b0f      	cmp	r3, #15
 8005c74:	d908      	bls.n	8005c88 <UART_SetConfig+0x238>
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7c:	d204      	bcs.n	8005c88 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	60da      	str	r2, [r3, #12]
 8005c86:	e001      	b.n	8005c8c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c98:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	efff69f3 	.word	0xefff69f3
 8005ca8:	40013800 	.word	0x40013800
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	40004400 	.word	0x40004400
 8005cb4:	40004800 	.word	0x40004800
 8005cb8:	007a1200 	.word	0x007a1200

08005cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01a      	beq.n	8005dd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dba:	d10a      	bne.n	8005dd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	605a      	str	r2, [r3, #4]
  }
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e10:	f7fb f8f0 	bl	8000ff4 <HAL_GetTick>
 8005e14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d10e      	bne.n	8005e42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f82d 	bl	8005e92 <UART_WaitOnFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e023      	b.n	8005e8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d10e      	bne.n	8005e6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f817 	bl	8005e92 <UART_WaitOnFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e00d      	b.n	8005e8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b09c      	sub	sp, #112	; 0x70
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	603b      	str	r3, [r7, #0]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea2:	e0a5      	b.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eaa:	f000 80a1 	beq.w	8005ff0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eae:	f7fb f8a1 	bl	8000ff4 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d302      	bcc.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d13e      	bne.n	8005f42 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ed8:	667b      	str	r3, [r7, #100]	; 0x64
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ee4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ee8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e6      	bne.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3308      	adds	r3, #8
 8005efc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3308      	adds	r3, #8
 8005f14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f16:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e5      	bne.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e067      	b.n	8006012 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d04f      	beq.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f5e:	d147      	bne.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f88:	637b      	str	r3, [r7, #52]	; 0x34
 8005f8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e6      	bne.n	8005f6a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	613b      	str	r3, [r7, #16]
   return(result);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f023 0301 	bic.w	r3, r3, #1
 8005fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fbc:	623a      	str	r2, [r7, #32]
 8005fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	69f9      	ldr	r1, [r7, #28]
 8005fc2:	6a3a      	ldr	r2, [r7, #32]
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e5      	bne.n	8005f9c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e010      	b.n	8006012 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69da      	ldr	r2, [r3, #28]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	429a      	cmp	r2, r3
 800600c:	f43f af4a 	beq.w	8005ea4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3770      	adds	r7, #112	; 0x70
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800601c:	b480      	push	{r7}
 800601e:	b091      	sub	sp, #68	; 0x44
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604e:	d10e      	bne.n	800606e <UART_Start_Receive_IT+0x52>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d105      	bne.n	8006064 <UART_Start_Receive_IT+0x48>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800605e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006062:	e02d      	b.n	80060c0 <UART_Start_Receive_IT+0xa4>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	22ff      	movs	r2, #255	; 0xff
 8006068:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800606c:	e028      	b.n	80060c0 <UART_Start_Receive_IT+0xa4>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10d      	bne.n	8006092 <UART_Start_Receive_IT+0x76>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d104      	bne.n	8006088 <UART_Start_Receive_IT+0x6c>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	22ff      	movs	r2, #255	; 0xff
 8006082:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006086:	e01b      	b.n	80060c0 <UART_Start_Receive_IT+0xa4>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	227f      	movs	r2, #127	; 0x7f
 800608c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006090:	e016      	b.n	80060c0 <UART_Start_Receive_IT+0xa4>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800609a:	d10d      	bne.n	80060b8 <UART_Start_Receive_IT+0x9c>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d104      	bne.n	80060ae <UART_Start_Receive_IT+0x92>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	227f      	movs	r2, #127	; 0x7f
 80060a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060ac:	e008      	b.n	80060c0 <UART_Start_Receive_IT+0xa4>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	223f      	movs	r2, #63	; 0x3f
 80060b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060b6:	e003      	b.n	80060c0 <UART_Start_Receive_IT+0xa4>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2222      	movs	r2, #34	; 0x22
 80060cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3308      	adds	r3, #8
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3308      	adds	r3, #8
 80060ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060ee:	637a      	str	r2, [r7, #52]	; 0x34
 80060f0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e5      	bne.n	80060ce <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610a:	d107      	bne.n	800611c <UART_Start_Receive_IT+0x100>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d103      	bne.n	800611c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4a15      	ldr	r2, [pc, #84]	; (800616c <UART_Start_Receive_IT+0x150>)
 8006118:	665a      	str	r2, [r3, #100]	; 0x64
 800611a:	e002      	b.n	8006122 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4a14      	ldr	r2, [pc, #80]	; (8006170 <UART_Start_Receive_IT+0x154>)
 8006120:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	613b      	str	r3, [r7, #16]
   return(result);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800613e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	623b      	str	r3, [r7, #32]
 800614a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	69f9      	ldr	r1, [r7, #28]
 800614e:	6a3a      	ldr	r2, [r7, #32]
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	61bb      	str	r3, [r7, #24]
   return(result);
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e6      	bne.n	800612a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3744      	adds	r7, #68	; 0x44
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	08006417 	.word	0x08006417
 8006170:	080062bb 	.word	0x080062bb

08006174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006174:	b480      	push	{r7}
 8006176:	b095      	sub	sp, #84	; 0x54
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006190:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800619a:	643b      	str	r3, [r7, #64]	; 0x40
 800619c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e6      	bne.n	800617c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	f023 0301 	bic.w	r3, r3, #1
 80061c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3308      	adds	r3, #8
 80061cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d118      	bne.n	800621c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f023 0310 	bic.w	r3, r3, #16
 80061fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6979      	ldr	r1, [r7, #20]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	613b      	str	r3, [r7, #16]
   return(result);
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e6      	bne.n	80061ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2220      	movs	r2, #32
 8006220:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800622e:	bf00      	nop
 8006230:	3754      	adds	r7, #84	; 0x54
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f7ff fbe3 	bl	8005a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b088      	sub	sp, #32
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	60bb      	str	r3, [r7, #8]
   return(result);
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006282:	61fb      	str	r3, [r7, #28]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6979      	ldr	r1, [r7, #20]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	613b      	str	r3, [r7, #16]
   return(result);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e6      	bne.n	800626e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff fbaf 	bl	8005a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062b2:	bf00      	nop
 80062b4:	3720      	adds	r7, #32
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b096      	sub	sp, #88	; 0x58
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d0:	2b22      	cmp	r3, #34	; 0x22
 80062d2:	f040 8094 	bne.w	80063fe <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80062e4:	b2d9      	uxtb	r1, r3
 80062e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f0:	400a      	ands	r2, r1
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d177      	bne.n	800640e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006332:	653b      	str	r3, [r7, #80]	; 0x50
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633c:	647b      	str	r3, [r7, #68]	; 0x44
 800633e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800634a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e6      	bne.n	800631e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	623b      	str	r3, [r7, #32]
   return(result);
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3308      	adds	r3, #8
 800636e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006370:	633a      	str	r2, [r7, #48]	; 0x30
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e5      	bne.n	8006350 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006394:	2b01      	cmp	r3, #1
 8006396:	d12e      	bne.n	80063f6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0310 	bic.w	r3, r3, #16
 80063b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063bc:	61fb      	str	r3, [r7, #28]
 80063be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	69b9      	ldr	r1, [r7, #24]
 80063c2:	69fa      	ldr	r2, [r7, #28]
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	617b      	str	r3, [r7, #20]
   return(result);
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e6      	bne.n	800639e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f003 0310 	and.w	r3, r3, #16
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d103      	bne.n	80063e6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2210      	movs	r2, #16
 80063e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fb22 	bl	8005a38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063f4:	e00b      	b.n	800640e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7f9 fee6 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 80063fc:	e007      	b.n	800640e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699a      	ldr	r2, [r3, #24]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0208 	orr.w	r2, r2, #8
 800640c:	619a      	str	r2, [r3, #24]
}
 800640e:	bf00      	nop
 8006410:	3758      	adds	r7, #88	; 0x58
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b096      	sub	sp, #88	; 0x58
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006424:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800642c:	2b22      	cmp	r3, #34	; 0x22
 800642e:	f040 8094 	bne.w	800655a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006438:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006440:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006442:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006446:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800644a:	4013      	ands	r3, r2
 800644c:	b29a      	uxth	r2, r3
 800644e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006450:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006456:	1c9a      	adds	r2, r3, #2
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d177      	bne.n	800656a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800648e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006498:	643b      	str	r3, [r7, #64]	; 0x40
 800649a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800649e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e6      	bne.n	800647a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3308      	adds	r3, #8
 80064b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3308      	adds	r3, #8
 80064ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e5      	bne.n	80064ac <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d12e      	bne.n	8006552 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	60bb      	str	r3, [r7, #8]
   return(result);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f023 0310 	bic.w	r3, r3, #16
 800650e:	647b      	str	r3, [r7, #68]	; 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6979      	ldr	r1, [r7, #20]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	613b      	str	r3, [r7, #16]
   return(result);
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e6      	bne.n	80064fa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f003 0310 	and.w	r3, r3, #16
 8006536:	2b10      	cmp	r3, #16
 8006538:	d103      	bne.n	8006542 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2210      	movs	r2, #16
 8006540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fa74 	bl	8005a38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006550:	e00b      	b.n	800656a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7f9 fe38 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8006558:	e007      	b.n	800656a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699a      	ldr	r2, [r3, #24]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0208 	orr.w	r2, r2, #8
 8006568:	619a      	str	r2, [r3, #24]
}
 800656a:	bf00      	nop
 800656c:	3758      	adds	r7, #88	; 0x58
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
	...

08006588 <__libc_init_array>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4d0d      	ldr	r5, [pc, #52]	; (80065c0 <__libc_init_array+0x38>)
 800658c:	4c0d      	ldr	r4, [pc, #52]	; (80065c4 <__libc_init_array+0x3c>)
 800658e:	1b64      	subs	r4, r4, r5
 8006590:	10a4      	asrs	r4, r4, #2
 8006592:	2600      	movs	r6, #0
 8006594:	42a6      	cmp	r6, r4
 8006596:	d109      	bne.n	80065ac <__libc_init_array+0x24>
 8006598:	4d0b      	ldr	r5, [pc, #44]	; (80065c8 <__libc_init_array+0x40>)
 800659a:	4c0c      	ldr	r4, [pc, #48]	; (80065cc <__libc_init_array+0x44>)
 800659c:	f000 f82e 	bl	80065fc <_init>
 80065a0:	1b64      	subs	r4, r4, r5
 80065a2:	10a4      	asrs	r4, r4, #2
 80065a4:	2600      	movs	r6, #0
 80065a6:	42a6      	cmp	r6, r4
 80065a8:	d105      	bne.n	80065b6 <__libc_init_array+0x2e>
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b0:	4798      	blx	r3
 80065b2:	3601      	adds	r6, #1
 80065b4:	e7ee      	b.n	8006594 <__libc_init_array+0xc>
 80065b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ba:	4798      	blx	r3
 80065bc:	3601      	adds	r6, #1
 80065be:	e7f2      	b.n	80065a6 <__libc_init_array+0x1e>
 80065c0:	0800664c 	.word	0x0800664c
 80065c4:	0800664c 	.word	0x0800664c
 80065c8:	0800664c 	.word	0x0800664c
 80065cc:	08006650 	.word	0x08006650

080065d0 <memcpy>:
 80065d0:	440a      	add	r2, r1
 80065d2:	4291      	cmp	r1, r2
 80065d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065d8:	d100      	bne.n	80065dc <memcpy+0xc>
 80065da:	4770      	bx	lr
 80065dc:	b510      	push	{r4, lr}
 80065de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065e6:	4291      	cmp	r1, r2
 80065e8:	d1f9      	bne.n	80065de <memcpy+0xe>
 80065ea:	bd10      	pop	{r4, pc}

080065ec <memset>:
 80065ec:	4402      	add	r2, r0
 80065ee:	4603      	mov	r3, r0
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d100      	bne.n	80065f6 <memset+0xa>
 80065f4:	4770      	bx	lr
 80065f6:	f803 1b01 	strb.w	r1, [r3], #1
 80065fa:	e7f9      	b.n	80065f0 <memset+0x4>

080065fc <_init>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr

08006608 <_fini>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr
