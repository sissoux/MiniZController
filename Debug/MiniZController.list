
MiniZController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007028  08007028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007060  08007060  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08007060  08007060  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007060  08007060  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007060  08007060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007064  08007064  00017064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000014  0800707c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  0800707c  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140ea  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c3  00000000  00000000  0003412e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  000367f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  000377b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c43f  00000000  00000000  00038690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013353  00000000  00000000  00054acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab9ff  00000000  00000000  00067e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113821  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004270  00000000  00000000  00113874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007010 	.word	0x08007010

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08007010 	.word	0x08007010

080001c8 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a11      	ldr	r2, [pc, #68]	; (8000218 <HAL_UART_RxCpltCallback+0x50>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d11a      	bne.n	800020e <HAL_UART_RxCpltCallback+0x46>
		{
			// Reset timeout
			__HAL_TIM_SET_COUNTER(&htim16, 0);
 80001d8:	4b10      	ldr	r3, [pc, #64]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2200      	movs	r2, #0
 80001de:	625a      	str	r2, [r3, #36]	; 0x24

			// Add received byte to sbus FIFO
			SBUS_AddByte(gSBUSByte);
 80001e0:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <HAL_UART_RxCpltCallback+0x58>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 fdb9 	bl	8000d5c <SBUS_AddByte>

			// Available sbus frame ?
			if (SBUS_GetChannel(&gSBUSChannels) == FRAME_COMPLETE)
 80001ea:	480e      	ldr	r0, [pc, #56]	; (8000224 <HAL_UART_RxCpltCallback+0x5c>)
 80001ec:	f000 fdd6 	bl	8000d9c <SBUS_GetChannel>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d106      	bne.n	8000204 <HAL_UART_RxCpltCallback+0x3c>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000200:	f002 ff8c 	bl	800311c <HAL_GPIO_WritePin>
//				II = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_1, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
//				III = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_2, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
//				IV = (int16_t)SBUS_NormalizeChannel(gSBUSChannels.Channel_3, MIN_CHANNEL_VALUE, MAX_CHANNEL_VALUE);
			}
			// Restart IT
			HAL_UART_Receive_IT(huart, &gSBUSByte, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	4906      	ldr	r1, [pc, #24]	; (8000220 <HAL_UART_RxCpltCallback+0x58>)
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f005 fddf 	bl	8005dcc <HAL_UART_Receive_IT>
		}
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000270 	.word	0x20000270
 800021c:	2000033c 	.word	0x2000033c
 8000220:	200000a4 	.word	0x200000a4
 8000224:	200000f4 	.word	0x200000f4

08000228 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a0a      	ldr	r2, [pc, #40]	; (800025c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d101      	bne.n	800023c <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		SBUS_TimeoutCallback();
 8000238:	f000 fdf4 	bl	8000e24 <SBUS_TimeoutCallback>
	}
	if (htim == &htim3)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a08      	ldr	r2, [pc, #32]	; (8000260 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800024a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024e:	f002 ff65 	bl	800311c <HAL_GPIO_WritePin>
	}

}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	2000033c 	.word	0x2000033c
 8000260:	200000a8 	.word	0x200000a8

08000264 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4a08      	ldr	r2, [pc, #32]	; (8000290 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8000270:	4293      	cmp	r3, r2
 8000272:	d109      	bne.n	8000288 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800027a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027e:	f002 ff4d 	bl	800311c <HAL_GPIO_WritePin>
		UpdateOutput=1;
 8000282:	4b04      	ldr	r3, [pc, #16]	; (8000294 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8000284:	2201      	movs	r2, #1
 8000286:	701a      	strb	r2, [r3, #0]
	}
}
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	200000a8 	.word	0x200000a8
 8000294:	20000040 	.word	0x20000040

08000298 <WriteMotorsSpeed>:
{
	return VBAT_GAIN*(float)RawValue;
}

void WriteMotorsSpeed(uint32_t ServoValue, uint8_t ServoDir, uint32_t MotorValue, uint8_t MotorDir)	//value is a per thousand value of max speed.
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	607a      	str	r2, [r7, #4]
 80002a2:	461a      	mov	r2, r3
 80002a4:	460b      	mov	r3, r1
 80002a6:	72fb      	strb	r3, [r7, #11]
 80002a8:	4613      	mov	r3, r2
 80002aa:	72bb      	strb	r3, [r7, #10]
	uint32_t tmpccer;
	tmpccer = htim1.Instance->CCER; // Get the TIMx CCER register value
 80002ac:	4b40      	ldr	r3, [pc, #256]	; (80003b0 <WriteMotorsSpeed+0x118>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	6a1b      	ldr	r3, [r3, #32]
 80002b2:	617b      	str	r3, [r7, #20]

	if (MotorDir==0)
 80002b4:	7abb      	ldrb	r3, [r7, #10]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d108      	bne.n	80002cc <WriteMotorsSpeed+0x34>
	{
		tmpccer &= ~TIM_CCER_CC1E;
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	f023 0301 	bic.w	r3, r3, #1
 80002c0:	617b      	str	r3, [r7, #20]
		tmpccer |= TIM_CCER_CC1NE;
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	f043 0304 	orr.w	r3, r3, #4
 80002c8:	617b      	str	r3, [r7, #20]
 80002ca:	e00a      	b.n	80002e2 <WriteMotorsSpeed+0x4a>
	}
	else if (MotorDir==1)
 80002cc:	7abb      	ldrb	r3, [r7, #10]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d107      	bne.n	80002e2 <WriteMotorsSpeed+0x4a>
	{
		tmpccer &= ~TIM_CCER_CC1NE;
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	f023 0304 	bic.w	r3, r3, #4
 80002d8:	617b      	str	r3, [r7, #20]
		tmpccer |= TIM_CCER_CC1E;
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	617b      	str	r3, [r7, #20]
	}

	if (ServoDir==0)
 80002e2:	7afb      	ldrb	r3, [r7, #11]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d108      	bne.n	80002fa <WriteMotorsSpeed+0x62>
	{
		tmpccer &= ~TIM_CCER_CC2E;
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	f023 0310 	bic.w	r3, r3, #16
 80002ee:	617b      	str	r3, [r7, #20]
		tmpccer |= TIM_CCER_CC2NE;
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	e00a      	b.n	8000310 <WriteMotorsSpeed+0x78>
	}
	else if (ServoDir==1)
 80002fa:	7afb      	ldrb	r3, [r7, #11]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d107      	bne.n	8000310 <WriteMotorsSpeed+0x78>
	{
		tmpccer &= ~TIM_CCER_CC2NE;
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000306:	617b      	str	r3, [r7, #20]
		tmpccer |= TIM_CCER_CC2E;
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	f043 0310 	orr.w	r3, r3, #16
 800030e:	617b      	str	r3, [r7, #20]
	}

	float maxVal = (float)htim1.Instance->ARR*MAX_SERVO_SPEED_GAIN/1000.0f;
 8000310:	4b27      	ldr	r3, [pc, #156]	; (80003b0 <WriteMotorsSpeed+0x118>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000316:	ee07 3a90 	vmov	s15, r3
 800031a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800031e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000322:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000326:	eddf 6a23 	vldr	s13, [pc, #140]	; 80003b4 <WriteMotorsSpeed+0x11c>
 800032a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800032e:	edc7 7a04 	vstr	s15, [r7, #16]
	if (MotorValue> MOTOR_OUT_DEADBAND)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	2b32      	cmp	r3, #50	; 0x32
 8000336:	d914      	bls.n	8000362 <WriteMotorsSpeed+0xca>
	{
		MotorValue = (uint32_t)((float)MotorValue*maxVal);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	ee07 3a90 	vmov	s15, r3
 800033e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000342:	edd7 7a04 	vldr	s15, [r7, #16]
 8000346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800034a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800034e:	ee17 3a90 	vmov	r3, s15
 8000352:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin, 1);
 8000354:	2201      	movs	r2, #1
 8000356:	2120      	movs	r1, #32
 8000358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035c:	f002 fede 	bl	800311c <HAL_GPIO_WritePin>
 8000360:	e007      	b.n	8000372 <WriteMotorsSpeed+0xda>
	}
	else
	{
		MotorValue = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(Motor1_EN_GPIO_Port, Motor1_EN_Pin, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	2120      	movs	r1, #32
 800036a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036e:	f002 fed5 	bl	800311c <HAL_GPIO_WritePin>
	}

	ServoValue = (uint32_t)((float)ServoValue*maxVal);
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	ee07 3a90 	vmov	s15, r3
 8000378:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800037c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000388:	ee17 3a90 	vmov	r3, s15
 800038c:	60fb      	str	r3, [r7, #12]

	htim1.Instance->CCER = tmpccer;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <WriteMotorsSpeed+0x118>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	697a      	ldr	r2, [r7, #20]
 8000394:	621a      	str	r2, [r3, #32]
	htim1.Instance->CCR1 = MotorValue;
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <WriteMotorsSpeed+0x118>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = ServoValue;
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <WriteMotorsSpeed+0x118>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80003a6:	bf00      	nop
 80003a8:	3718      	adds	r7, #24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000224 	.word	0x20000224
 80003b4:	447a0000 	.word	0x447a0000

080003b8 <UpdateServoPID>:

void UpdateServoPID(uint32_t *speed, uint8_t *dir)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b087      	sub	sp, #28
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	float Servo_Target = ServoValue;
 80003c2:	4b51      	ldr	r3, [pc, #324]	; (8000508 <UpdateServoPID+0x150>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	ee07 3a90 	vmov	s15, r3
 80003ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003ce:	edc7 7a05 	vstr	s15, [r7, #20]
	Servo_Feedback = analogCapture1[1];
 80003d2:	4b4e      	ldr	r3, [pc, #312]	; (800050c <UpdateServoPID+0x154>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	ee07 3a90 	vmov	s15, r3
 80003da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003de:	4b4c      	ldr	r3, [pc, #304]	; (8000510 <UpdateServoPID+0x158>)
 80003e0:	edc3 7a00 	vstr	s15, [r3]

	static uint32_t previousPosition;
	static float Iterm;

	if (FirstLoop)
 80003e4:	4b4b      	ldr	r3, [pc, #300]	; (8000514 <UpdateServoPID+0x15c>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d00f      	beq.n	800040c <UpdateServoPID+0x54>
	{
		FirstLoop = 0;
 80003ec:	4b49      	ldr	r3, [pc, #292]	; (8000514 <UpdateServoPID+0x15c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
		previousPosition =Servo_Feedback;
 80003f2:	4b47      	ldr	r3, [pc, #284]	; (8000510 <UpdateServoPID+0x158>)
 80003f4:	edd3 7a00 	vldr	s15, [r3]
 80003f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003fc:	ee17 2a90 	vmov	r2, s15
 8000400:	4b45      	ldr	r3, [pc, #276]	; (8000518 <UpdateServoPID+0x160>)
 8000402:	601a      	str	r2, [r3, #0]
		Iterm = 0;
 8000404:	4b45      	ldr	r3, [pc, #276]	; (800051c <UpdateServoPID+0x164>)
 8000406:	f04f 0200 	mov.w	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
	}

	float error = Servo_Target - Servo_Feedback;
 800040c:	4b40      	ldr	r3, [pc, #256]	; (8000510 <UpdateServoPID+0x158>)
 800040e:	edd3 7a00 	vldr	s15, [r3]
 8000412:	ed97 7a05 	vldr	s14, [r7, #20]
 8000416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800041a:	edc7 7a04 	vstr	s15, [r7, #16]

	float Dterm = (Servo_Feedback - previousPosition)/SERVO_LOOPDURATION;
 800041e:	4b3c      	ldr	r3, [pc, #240]	; (8000510 <UpdateServoPID+0x158>)
 8000420:	ed93 7a00 	vldr	s14, [r3]
 8000424:	4b3c      	ldr	r3, [pc, #240]	; (8000518 <UpdateServoPID+0x160>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	ee07 3a90 	vmov	s15, r3
 800042c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000430:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000434:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8000520 <UpdateServoPID+0x168>
 8000438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800043c:	edc7 7a03 	vstr	s15, [r7, #12]
	Iterm += error;
 8000440:	4b36      	ldr	r3, [pc, #216]	; (800051c <UpdateServoPID+0x164>)
 8000442:	ed93 7a00 	vldr	s14, [r3]
 8000446:	edd7 7a04 	vldr	s15, [r7, #16]
 800044a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800044e:	4b33      	ldr	r3, [pc, #204]	; (800051c <UpdateServoPID+0x164>)
 8000450:	edc3 7a00 	vstr	s15, [r3]

	if (Iterm > SERVO_ITERM_CAPVALUE) Iterm = SERVO_ITERM_CAPVALUE;
 8000454:	4b31      	ldr	r3, [pc, #196]	; (800051c <UpdateServoPID+0x164>)
 8000456:	edd3 7a00 	vldr	s15, [r3]
 800045a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000524 <UpdateServoPID+0x16c>
 800045e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000466:	dd03      	ble.n	8000470 <UpdateServoPID+0xb8>
 8000468:	4b2c      	ldr	r3, [pc, #176]	; (800051c <UpdateServoPID+0x164>)
 800046a:	4a2f      	ldr	r2, [pc, #188]	; (8000528 <UpdateServoPID+0x170>)
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	e00c      	b.n	800048a <UpdateServoPID+0xd2>
	else if (Iterm < -SERVO_ITERM_CAPVALUE) Iterm = SERVO_ITERM_CAPVALUE;
 8000470:	4b2a      	ldr	r3, [pc, #168]	; (800051c <UpdateServoPID+0x164>)
 8000472:	edd3 7a00 	vldr	s15, [r3]
 8000476:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800052c <UpdateServoPID+0x174>
 800047a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800047e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000482:	d502      	bpl.n	800048a <UpdateServoPID+0xd2>
 8000484:	4b25      	ldr	r3, [pc, #148]	; (800051c <UpdateServoPID+0x164>)
 8000486:	4a28      	ldr	r2, [pc, #160]	; (8000528 <UpdateServoPID+0x170>)
 8000488:	601a      	str	r2, [r3, #0]

	float out = error * SERVO_KP + Dterm * SERVO_KD + Iterm * SERVO_KI ;
 800048a:	edd7 7a04 	vldr	s15, [r7, #16]
 800048e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000492:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000496:	edd7 7a03 	vldr	s15, [r7, #12]
 800049a:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000530 <UpdateServoPID+0x178>
 800049e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80004a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80004a6:	4b1d      	ldr	r3, [pc, #116]	; (800051c <UpdateServoPID+0x164>)
 80004a8:	edd3 7a00 	vldr	s15, [r3]
 80004ac:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000534 <UpdateServoPID+0x17c>
 80004b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80004b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004b8:	edc7 7a02 	vstr	s15, [r7, #8]

	if (out < 0)
 80004bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80004c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80004c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004c8:	d50d      	bpl.n	80004e6 <UpdateServoPID+0x12e>
	{
		*dir = 1;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	2201      	movs	r2, #1
 80004ce:	701a      	strb	r2, [r3, #0]
		*speed = -out;
 80004d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80004d4:	eef1 7a67 	vneg.f32	s15, s15
 80004d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004dc:	ee17 2a90 	vmov	r2, s15
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	601a      	str	r2, [r3, #0]
	else
	{
		*dir = 0;
		*speed = out;
	}
}
 80004e4:	e00a      	b.n	80004fc <UpdateServoPID+0x144>
		*dir = 0;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
		*speed = out;
 80004ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80004f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004f4:	ee17 2a90 	vmov	r2, s15
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	601a      	str	r2, [r3, #0]
}
 80004fc:	bf00      	nop
 80004fe:	371c      	adds	r7, #28
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	20000004 	.word	0x20000004
 800050c:	20000030 	.word	0x20000030
 8000510:	20000050 	.word	0x20000050
 8000514:	20000000 	.word	0x20000000
 8000518:	20000044 	.word	0x20000044
 800051c:	20000048 	.word	0x20000048
 8000520:	3a83126f 	.word	0x3a83126f
 8000524:	453b8000 	.word	0x453b8000
 8000528:	453b8000 	.word	0x453b8000
 800052c:	c53b8000 	.word	0xc53b8000
 8000530:	00000000 	.word	0x00000000
 8000534:	3d4ccccd 	.word	0x3d4ccccd

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 ff61 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f897 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 fbc3 	bl	8000cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 800054a:	f000 fb9b 	bl	8000c84 <MX_DMA_Init>
  MX_ADC1_Init();
 800054e:	f000 f8ef 	bl	8000730 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000552:	f000 f9cd 	bl	80008f0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000556:	f000 fb25 	bl	8000ba4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800055a:	f000 fb53 	bl	8000c04 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800055e:	f000 f967 	bl	8000830 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000562:	f000 fa83 	bl	8000a6c <MX_TIM3_Init>
  MX_TIM16_Init();
 8000566:	f000 faf7 	bl	8000b58 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, analogCapture1, 2);
 800056a:	2202      	movs	r2, #2
 800056c:	4935      	ldr	r1, [pc, #212]	; (8000644 <main+0x10c>)
 800056e:	4836      	ldr	r0, [pc, #216]	; (8000648 <main+0x110>)
 8000570:	f001 f968 	bl	8001844 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, analogCapture2, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	4935      	ldr	r1, [pc, #212]	; (800064c <main+0x114>)
 8000578:	4835      	ldr	r0, [pc, #212]	; (8000650 <main+0x118>)
 800057a:	f001 f963 	bl	8001844 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim3);
 800057e:	4835      	ldr	r0, [pc, #212]	; (8000654 <main+0x11c>)
 8000580:	f004 f8f4 	bl	800476c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000584:	2100      	movs	r1, #0
 8000586:	4833      	ldr	r0, [pc, #204]	; (8000654 <main+0x11c>)
 8000588:	f004 fa9a 	bl	8004ac0 <HAL_TIM_PWM_Start_IT>
  HAL_UART_Receive_IT(&huart2, &gSBUSByte, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	4932      	ldr	r1, [pc, #200]	; (8000658 <main+0x120>)
 8000590:	4832      	ldr	r0, [pc, #200]	; (800065c <main+0x124>)
 8000592:	f005 fc1b 	bl	8005dcc <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000596:	4832      	ldr	r0, [pc, #200]	; (8000660 <main+0x128>)
 8000598:	f004 f8e8 	bl	800476c <HAL_TIM_Base_Start_IT>

  HAL_TIM_Base_Start(&htim1);
 800059c:	4831      	ldr	r0, [pc, #196]	; (8000664 <main+0x12c>)
 800059e:	f004 f891 	bl	80046c4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005a2:	2100      	movs	r1, #0
 80005a4:	482f      	ldr	r0, [pc, #188]	; (8000664 <main+0x12c>)
 80005a6:	f004 f99f 	bl	80048e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005aa:	2104      	movs	r1, #4
 80005ac:	482d      	ldr	r0, [pc, #180]	; (8000664 <main+0x12c>)
 80005ae:	f004 f99b 	bl	80048e8 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(Motor2_EN_GPIO_Port, Motor2_EN_Pin, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2140      	movs	r1, #64	; 0x40
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f002 fdaf 	bl	800311c <HAL_GPIO_WritePin>
  WriteMotorsSpeed(0, 0, 0, 0);
 80005be:	2300      	movs	r3, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	2100      	movs	r1, #0
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff fe67 	bl	8000298 <WriteMotorsSpeed>

  uint32_t counter = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (UpdateOutput ==1)
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <main+0x130>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d1fb      	bne.n	80005ce <main+0x96>
	  {
		  counter++;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3301      	adds	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
		  if (counter <1000)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005e2:	d204      	bcs.n	80005ee <main+0xb6>
		  {
			  ServoValue = 1850;
 80005e4:	4b21      	ldr	r3, [pc, #132]	; (800066c <main+0x134>)
 80005e6:	f240 723a 	movw	r2, #1850	; 0x73a
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	e00a      	b.n	8000604 <main+0xcc>

		  }
		  else if (counter >2000)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80005f4:	d902      	bls.n	80005fc <main+0xc4>
		  {
			  counter = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e003      	b.n	8000604 <main+0xcc>
		  }
		  else ServoValue = 2350;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <main+0x134>)
 80005fe:	f640 122e 	movw	r2, #2350	; 0x92e
 8000602:	601a      	str	r2, [r3, #0]

		  UpdateOutput=0;
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <main+0x130>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		  uint32_t ServoSpeed = (uint32_t)((float)analogCapture2[0]/4.096f);
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <main+0x114>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	ee07 3a90 	vmov	s15, r3
 8000612:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000616:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000670 <main+0x138>
 800061a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800061e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000622:	ee17 3a90 	vmov	r3, s15
 8000626:	60bb      	str	r3, [r7, #8]
		  uint8_t ServoDdir;
		  UpdateServoPID(&ServoSpeed, &ServoDdir);
 8000628:	1dfa      	adds	r2, r7, #7
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	4611      	mov	r1, r2
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fec1 	bl	80003b8 <UpdateServoPID>
		  WriteMotorsSpeed(ServoSpeed, ServoDdir, 0, 0);
 8000636:	68b8      	ldr	r0, [r7, #8]
 8000638:	79f9      	ldrb	r1, [r7, #7]
 800063a:	2300      	movs	r3, #0
 800063c:	2200      	movs	r2, #0
 800063e:	f7ff fe2b 	bl	8000298 <WriteMotorsSpeed>
	  if (UpdateOutput ==1)
 8000642:	e7c4      	b.n	80005ce <main+0x96>
 8000644:	20000030 	.word	0x20000030
 8000648:	2000010c 	.word	0x2000010c
 800064c:	20000038 	.word	0x20000038
 8000650:	20000054 	.word	0x20000054
 8000654:	200000a8 	.word	0x200000a8
 8000658:	200000a4 	.word	0x200000a4
 800065c:	20000270 	.word	0x20000270
 8000660:	2000033c 	.word	0x2000033c
 8000664:	20000224 	.word	0x20000224
 8000668:	20000040 	.word	0x20000040
 800066c:	20000004 	.word	0x20000004
 8000670:	4083126f 	.word	0x4083126f

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b096      	sub	sp, #88	; 0x58
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800067e:	2228      	movs	r2, #40	; 0x28
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f006 fcbc 	bl	8007000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
 80006a6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80006bc:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80006c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fd40 	bl	800314c <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006d2:	f000 fb3d 	bl	8000d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2101      	movs	r1, #1
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fc33 	bl	8003f5c <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006fc:	f000 fb28 	bl	8000d50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8000700:	f241 0381 	movw	r3, #4225	; 0x1081
 8000704:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800070a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fe56 	bl	80043c8 <HAL_RCCEx_PeriphCLKConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000722:	f000 fb15 	bl	8000d50 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3758      	adds	r7, #88	; 0x58
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000752:	4b36      	ldr	r3, [pc, #216]	; (800082c <MX_ADC1_Init+0xfc>)
 8000754:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000758:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800075a:	4b34      	ldr	r3, [pc, #208]	; (800082c <MX_ADC1_Init+0xfc>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000760:	4b32      	ldr	r3, [pc, #200]	; (800082c <MX_ADC1_Init+0xfc>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000766:	4b31      	ldr	r3, [pc, #196]	; (800082c <MX_ADC1_Init+0xfc>)
 8000768:	2201      	movs	r2, #1
 800076a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800076c:	4b2f      	ldr	r3, [pc, #188]	; (800082c <MX_ADC1_Init+0xfc>)
 800076e:	2200      	movs	r2, #0
 8000770:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <MX_ADC1_Init+0xfc>)
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_ADC1_Init+0xfc>)
 800077c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000782:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_ADC1_Init+0xfc>)
 8000784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_ADC1_Init+0xfc>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_ADC1_Init+0xfc>)
 8000792:	2202      	movs	r2, #2
 8000794:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <MX_ADC1_Init+0xfc>)
 8000798:	2201      	movs	r2, #1
 800079a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_ADC1_Init+0xfc>)
 80007a0:	2204      	movs	r2, #4
 80007a2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_ADC1_Init+0xfc>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_ADC1_Init+0xfc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b0:	481e      	ldr	r0, [pc, #120]	; (800082c <MX_ADC1_Init+0xfc>)
 80007b2:	f000 feb5 	bl	8001520 <HAL_ADC_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007bc:	f000 fac8 	bl	8000d50 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4818      	ldr	r0, [pc, #96]	; (800082c <MX_ADC1_Init+0xfc>)
 80007cc:	f001 fe1e 	bl	800240c <HAL_ADCEx_MultiModeConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80007d6:	f000 fabb 	bl	8000d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007da:	2301      	movs	r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007de:	2301      	movs	r3, #1
 80007e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80007e6:	2303      	movs	r3, #3
 80007e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_ADC1_Init+0xfc>)
 80007f8:	f001 fb46 	bl	8001e88 <HAL_ADC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000802:	f000 faa5 	bl	8000d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000806:	2302      	movs	r3, #2
 8000808:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800080a:	2302      	movs	r3, #2
 800080c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_ADC1_Init+0xfc>)
 8000814:	f001 fb38 	bl	8001e88 <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800081e:	f000 fa97 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	; 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000010c 	.word	0x2000010c

08000830 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
 8000844:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_ADC2_Init+0xb8>)
 8000848:	4a28      	ldr	r2, [pc, #160]	; (80008ec <MX_ADC2_Init+0xbc>)
 800084a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <MX_ADC2_Init+0xb8>)
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <MX_ADC2_Init+0xb8>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <MX_ADC2_Init+0xb8>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_ADC2_Init+0xb8>)
 8000860:	2200      	movs	r2, #0
 8000862:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_ADC2_Init+0xb8>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800086c:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <MX_ADC2_Init+0xb8>)
 800086e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_ADC2_Init+0xb8>)
 8000876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_ADC2_Init+0xb8>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_ADC2_Init+0xb8>)
 8000884:	2201      	movs	r2, #1
 8000886:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_ADC2_Init+0xb8>)
 800088a:	2201      	movs	r2, #1
 800088c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_ADC2_Init+0xb8>)
 8000892:	2204      	movs	r2, #4
 8000894:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_ADC2_Init+0xb8>)
 8000898:	2200      	movs	r2, #0
 800089a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_ADC2_Init+0xb8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008a2:	4811      	ldr	r0, [pc, #68]	; (80008e8 <MX_ADC2_Init+0xb8>)
 80008a4:	f000 fe3c 	bl	8001520 <HAL_ADC_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 80008ae:	f000 fa4f 	bl	8000d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80008be:	2303      	movs	r3, #3
 80008c0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ca:	463b      	mov	r3, r7
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <MX_ADC2_Init+0xb8>)
 80008d0:	f001 fada 	bl	8001e88 <HAL_ADC_ConfigChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 80008da:	f000 fa39 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000054 	.word	0x20000054
 80008ec:	50000100 	.word	0x50000100

080008f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09a      	sub	sp, #104	; 0x68
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000910:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]
 8000922:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	222c      	movs	r2, #44	; 0x2c
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f006 fb68 	bl	8007000 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000930:	4b4c      	ldr	r3, [pc, #304]	; (8000a64 <MX_TIM1_Init+0x174>)
 8000932:	4a4d      	ldr	r2, [pc, #308]	; (8000a68 <MX_TIM1_Init+0x178>)
 8000934:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000936:	4b4b      	ldr	r3, [pc, #300]	; (8000a64 <MX_TIM1_Init+0x174>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b49      	ldr	r3, [pc, #292]	; (8000a64 <MX_TIM1_Init+0x174>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000942:	4b48      	ldr	r3, [pc, #288]	; (8000a64 <MX_TIM1_Init+0x174>)
 8000944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000948:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b46      	ldr	r3, [pc, #280]	; (8000a64 <MX_TIM1_Init+0x174>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000950:	4b44      	ldr	r3, [pc, #272]	; (8000a64 <MX_TIM1_Init+0x174>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b43      	ldr	r3, [pc, #268]	; (8000a64 <MX_TIM1_Init+0x174>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800095c:	4841      	ldr	r0, [pc, #260]	; (8000a64 <MX_TIM1_Init+0x174>)
 800095e:	f003 fe59 	bl	8004614 <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000968:	f000 f9f2 	bl	8000d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000970:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000972:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000976:	4619      	mov	r1, r3
 8000978:	483a      	ldr	r0, [pc, #232]	; (8000a64 <MX_TIM1_Init+0x174>)
 800097a:	f004 fc0f 	bl	800519c <HAL_TIM_ConfigClockSource>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000984:	f000 f9e4 	bl	8000d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000988:	4836      	ldr	r0, [pc, #216]	; (8000a64 <MX_TIM1_Init+0x174>)
 800098a:	f003 ff4b 	bl	8004824 <HAL_TIM_PWM_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000994:	f000 f9dc 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009a8:	4619      	mov	r1, r3
 80009aa:	482e      	ldr	r0, [pc, #184]	; (8000a64 <MX_TIM1_Init+0x174>)
 80009ac:	f005 f8bc 	bl	8005b28 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009b6:	f000 f9cb 	bl	8000d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	; 0x60
 80009bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80009d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009dc:	2200      	movs	r2, #0
 80009de:	4619      	mov	r1, r3
 80009e0:	4820      	ldr	r0, [pc, #128]	; (8000a64 <MX_TIM1_Init+0x174>)
 80009e2:	f004 fac7 	bl	8004f74 <HAL_TIM_PWM_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80009ec:	f000 f9b0 	bl	8000d50 <Error_Handler>
  }
  sConfigOC.Pulse = 250;
 80009f0:	23fa      	movs	r3, #250	; 0xfa
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009fc:	2204      	movs	r2, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4818      	ldr	r0, [pc, #96]	; (8000a64 <MX_TIM1_Init+0x174>)
 8000a02:	f004 fab7 	bl	8004f74 <HAL_TIM_PWM_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000a0c:	f000 f9a0 	bl	8000d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <MX_TIM1_Init+0x174>)
 8000a46:	f005 f8dd 	bl	8005c04 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000a50:	f000 f97e 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <MX_TIM1_Init+0x174>)
 8000a56:	f000 fb59 	bl	800110c <HAL_TIM_MspPostInit>

}
 8000a5a:	bf00      	nop
 8000a5c:	3768      	adds	r7, #104	; 0x68
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000224 	.word	0x20000224
 8000a68:	40012c00 	.word	0x40012c00

08000a6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <MX_TIM3_Init+0xe4>)
 8000aa0:	4a2c      	ldr	r2, [pc, #176]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000aa2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <MX_TIM3_Init+0xe4>)
 8000aa6:	221f      	movs	r2, #31
 8000aa8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <MX_TIM3_Init+0xe4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <MX_TIM3_Init+0xe4>)
 8000ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ab6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab8:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <MX_TIM3_Init+0xe4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abe:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <MX_TIM3_Init+0xe4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ac4:	4822      	ldr	r0, [pc, #136]	; (8000b50 <MX_TIM3_Init+0xe4>)
 8000ac6:	f003 fda5 	bl	8004614 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ad0:	f000 f93e 	bl	8000d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481b      	ldr	r0, [pc, #108]	; (8000b50 <MX_TIM3_Init+0xe4>)
 8000ae2:	f004 fb5b 	bl	800519c <HAL_TIM_ConfigClockSource>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000aec:	f000 f930 	bl	8000d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000af0:	4817      	ldr	r0, [pc, #92]	; (8000b50 <MX_TIM3_Init+0xe4>)
 8000af2:	f003 fe97 	bl	8004824 <HAL_TIM_PWM_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000afc:	f000 f928 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b00:	2320      	movs	r3, #32
 8000b02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4810      	ldr	r0, [pc, #64]	; (8000b50 <MX_TIM3_Init+0xe4>)
 8000b10:	f005 f80a 	bl	8005b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b1a:	f000 f919 	bl	8000d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1e:	2360      	movs	r3, #96	; 0x60
 8000b20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000b22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	4806      	ldr	r0, [pc, #24]	; (8000b50 <MX_TIM3_Init+0xe4>)
 8000b38:	f004 fa1c 	bl	8004f74 <HAL_TIM_PWM_ConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b42:	f000 f905 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	3738      	adds	r7, #56	; 0x38
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000a8 	.word	0x200000a8
 8000b54:	40000400 	.word	0x40000400

08000b58 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <MX_TIM16_Init+0x48>)
 8000b60:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b64:	221f      	movs	r2, #31
 8000b66:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b74:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_TIM16_Init+0x44>)
 8000b8a:	f003 fd43 	bl	8004614 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000b94:	f000 f8dc 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000033c 	.word	0x2000033c
 8000ba0:	40014400 	.word	0x40014400

08000ba4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART1_UART_Init+0x58>)
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <MX_USART1_UART_Init+0x5c>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART1_UART_Init+0x58>)
 8000bb0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART1_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_USART1_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART1_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART1_UART_Init+0x58>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART1_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART1_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART1_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART1_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART1_UART_Init+0x58>)
 8000be8:	f005 f8a2 	bl	8005d30 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f000 f8ad 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000015c 	.word	0x2000015c
 8000c00:	40013800 	.word	0x40013800

08000c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <MX_USART2_UART_Init+0x78>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c10:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <MX_USART2_UART_Init+0x7c>)
 8000c12:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c22:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c46:	2232      	movs	r2, #50	; 0x32
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
                              |UART_ADVFEATURE_DMADISABLEONERROR_INIT;
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c58:	639a      	str	r2, [r3, #56]	; 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c60:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_USART2_UART_Init+0x74>)
 8000c64:	f005 f864 	bl	8005d30 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000c6e:	f000 f86f 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000270 	.word	0x20000270
 8000c7c:	40004400 	.word	0x40004400
 8000c80:	000186a0 	.word	0x000186a0

08000c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_DMA_Init+0x48>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <MX_DMA_Init+0x48>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <MX_DMA_Init+0x48>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	200b      	movs	r0, #11
 8000ca8:	f001 fe81 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cac:	200b      	movs	r0, #11
 8000cae:	f001 fe9a 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	200c      	movs	r0, #12
 8000cb8:	f001 fe79 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000cbc:	200c      	movs	r0, #12
 8000cbe:	f001 fe92 	bl	80029e6 <HAL_NVIC_EnableIRQ>

}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_GPIO_Init+0x7c>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <MX_GPIO_Init+0x7c>)
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	6153      	str	r3, [r2, #20]
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_GPIO_Init+0x7c>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_GPIO_Init+0x7c>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_GPIO_Init+0x7c>)
 8000d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d08:	6153      	str	r3, [r2, #20]
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <MX_GPIO_Init+0x7c>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor1_EN_Pin|Motor2_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f002 f9fc 	bl	800311c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor1_EN_Pin Motor2_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = Motor1_EN_Pin|Motor2_EN_Pin|LED_Pin;
 8000d24:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8000d28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d40:	f002 f87a 	bl	8002e38 <HAL_GPIO_Init>

}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <Error_Handler+0x8>
	...

08000d5c <SBUS_AddByte>:
	return 0;
}


uint32_t SBUS_AddByte(uint8_t Byte)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	if (gByteBufferIndex < SBUS_FRAME_SIZE)
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <SBUS_AddByte+0x38>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b18      	cmp	r3, #24
 8000d6c:	d809      	bhi.n	8000d82 <SBUS_AddByte+0x26>
		gByteBuffer[gByteBufferIndex++] = Byte;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <SBUS_AddByte+0x38>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	b2d1      	uxtb	r1, r2
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <SBUS_AddByte+0x38>)
 8000d78:	7011      	strb	r1, [r2, #0]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <SBUS_AddByte+0x3c>)
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	5453      	strb	r3, [r2, r1]

	return gByteBufferIndex;
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SBUS_AddByte+0x38>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000388 	.word	0x20000388
 8000d98:	2000038c 	.word	0x2000038c

08000d9c <SBUS_GetChannel>:


uint32_t SBUS_GetChannel(struct sbuschannels *pChannels)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	if (NULL == pChannels)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <SBUS_GetChannel+0x12>
		return FRAME_PENDING;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e030      	b.n	8000e10 <SBUS_GetChannel+0x74>

	// Enough byte received
	if (gByteBufferIndex == SBUS_FRAME_SIZE)
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <SBUS_GetChannel+0x7c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b19      	cmp	r3, #25
 8000db4:	d12b      	bne.n	8000e0e <SBUS_GetChannel+0x72>
	{
		// Frame with Header and Footer?
		struct sbusframe *pFrame = (struct sbusframe *) gByteBuffer;
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <SBUS_GetChannel+0x80>)
 8000db8:	60bb      	str	r3, [r7, #8]

		if (pFrame->Header == SBUS_HEADER && pFrame->Footer == SBUS_FOOTER)
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b0f      	cmp	r3, #15
 8000dc0:	d125      	bne.n	8000e0e <SBUS_GetChannel+0x72>
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	7e1b      	ldrb	r3, [r3, #24]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d121      	bne.n	8000e0e <SBUS_GetChannel+0x72>
		{
			uint32_t ret = FRAME_COMPLETE;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]

			// Return the frame
			memcpy(&pChannels[0], &gByteBuffer[1], sizeof(struct sbuschannels));
 8000dce:	2217      	movs	r2, #23
 8000dd0:	4913      	ldr	r1, [pc, #76]	; (8000e20 <SBUS_GetChannel+0x84>)
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f006 f906 	bl	8006fe4 <memcpy>

			// Check for frame errors
			if (pChannels->FrameLost)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7d9b      	ldrb	r3, [r3, #22]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <SBUS_GetChannel+0x52>
				ret |= FRAME_DROPPED;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	60fb      	str	r3, [r7, #12]

			if (pChannels->FailSafe)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7d9b      	ldrb	r3, [r3, #22]
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <SBUS_GetChannel+0x68>
				ret |= FRAME_FAILSAFE;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	60fb      	str	r3, [r7, #12]
//					pChannels->FailSafe,
//					pChannels->FrameLost);
//			CDC_Transmit_FS((uint8_t *)Str, strlen(Str));

			// Reset byte buffer
			gByteBufferIndex = 0;
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SBUS_GetChannel+0x7c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]

			return ret;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	e000      	b.n	8000e10 <SBUS_GetChannel+0x74>
		}
	}

	return FRAME_PENDING;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000388 	.word	0x20000388
 8000e1c:	2000038c 	.word	0x2000038c
 8000e20:	2000038d 	.word	0x2000038d

08000e24 <SBUS_TimeoutCallback>:

	return ((int32_t) ChannelValue * ScaleA + ScaleB) / ScaleD;
}

void SBUS_TimeoutCallback(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
	// Reset byte buffer
	gByteBufferIndex = 0;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <SBUS_TimeoutCallback+0x14>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	20000388 	.word	0x20000388

08000e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_MspInit+0x44>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_MspInit+0x44>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_MspInit+0x44>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_MspInit+0x44>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_MspInit+0x44>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_MspInit+0x44>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08c      	sub	sp, #48	; 0x30
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ea4:	d15e      	bne.n	8000f64 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ea6:	4b63      	ldr	r3, [pc, #396]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a61      	ldr	r2, [pc, #388]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000eae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eb0:	4b60      	ldr	r3, [pc, #384]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d10b      	bne.n	8000ed0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000eb8:	4b5f      	ldr	r3, [pc, #380]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	4a5e      	ldr	r2, [pc, #376]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	6153      	str	r3, [r2, #20]
 8000ec4:	4b5c      	ldr	r3, [pc, #368]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	61bb      	str	r3, [r7, #24]
 8000ece:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b59      	ldr	r3, [pc, #356]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	4a58      	ldr	r2, [pc, #352]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eda:	6153      	str	r3, [r2, #20]
 8000edc:	4b56      	ldr	r3, [pc, #344]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Servo_FB_Pin|Vbat_Meas_Pin;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f001 ff9b 	bl	8002e38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f02:	4b4e      	ldr	r3, [pc, #312]	; (800103c <HAL_ADC_MspInit+0x1b8>)
 8000f04:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <HAL_ADC_MspInit+0x1bc>)
 8000f06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f08:	4b4c      	ldr	r3, [pc, #304]	; (800103c <HAL_ADC_MspInit+0x1b8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0e:	4b4b      	ldr	r3, [pc, #300]	; (800103c <HAL_ADC_MspInit+0x1b8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f14:	4b49      	ldr	r3, [pc, #292]	; (800103c <HAL_ADC_MspInit+0x1b8>)
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f1a:	4b48      	ldr	r3, [pc, #288]	; (800103c <HAL_ADC_MspInit+0x1b8>)
 8000f1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f22:	4b46      	ldr	r3, [pc, #280]	; (800103c <HAL_ADC_MspInit+0x1b8>)
 8000f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f2a:	4b44      	ldr	r3, [pc, #272]	; (800103c <HAL_ADC_MspInit+0x1b8>)
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f30:	4b42      	ldr	r3, [pc, #264]	; (800103c <HAL_ADC_MspInit+0x1b8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f36:	4841      	ldr	r0, [pc, #260]	; (800103c <HAL_ADC_MspInit+0x1b8>)
 8000f38:	f001 fd6f 	bl	8002a1a <HAL_DMA_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000f42:	f7ff ff05 	bl	8000d50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a3c      	ldr	r2, [pc, #240]	; (800103c <HAL_ADC_MspInit+0x1b8>)
 8000f4a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f4c:	4a3b      	ldr	r2, [pc, #236]	; (800103c <HAL_ADC_MspInit+0x1b8>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	2012      	movs	r0, #18
 8000f58:	f001 fd29 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f5c:	2012      	movs	r0, #18
 8000f5e:	f001 fd42 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f62:	e062      	b.n	800102a <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a36      	ldr	r2, [pc, #216]	; (8001044 <HAL_ADC_MspInit+0x1c0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d15d      	bne.n	800102a <HAL_ADC_MspInit+0x1a6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f6e:	4b31      	ldr	r3, [pc, #196]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000f76:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f78:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <HAL_ADC_MspInit+0x1b0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d10b      	bne.n	8000f98 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	4a2c      	ldr	r2, [pc, #176]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	6153      	str	r3, [r2, #20]
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b27      	ldr	r3, [pc, #156]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	4a26      	ldr	r2, [pc, #152]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa2:	6153      	str	r3, [r2, #20]
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <HAL_ADC_MspInit+0x1b4>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Trim_Pin;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo_Trim_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f001 ff37 	bl	8002e38 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <HAL_ADC_MspInit+0x1c4>)
 8000fcc:	4a1f      	ldr	r2, [pc, #124]	; (800104c <HAL_ADC_MspInit+0x1c8>)
 8000fce:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_ADC_MspInit+0x1c4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_ADC_MspInit+0x1c4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_ADC_MspInit+0x1c4>)
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_ADC_MspInit+0x1c4>)
 8000fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_ADC_MspInit+0x1c4>)
 8000fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_ADC_MspInit+0x1c4>)
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_ADC_MspInit+0x1c4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ffe:	4812      	ldr	r0, [pc, #72]	; (8001048 <HAL_ADC_MspInit+0x1c4>)
 8001000:	f001 fd0b 	bl	8002a1a <HAL_DMA_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 800100a:	f7ff fea1 	bl	8000d50 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <HAL_ADC_MspInit+0x1c4>)
 8001012:	639a      	str	r2, [r3, #56]	; 0x38
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <HAL_ADC_MspInit+0x1c4>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	2012      	movs	r0, #18
 8001020:	f001 fcc5 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001024:	2012      	movs	r0, #18
 8001026:	f001 fcde 	bl	80029e6 <HAL_NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3730      	adds	r7, #48	; 0x30
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000004c 	.word	0x2000004c
 8001038:	40021000 	.word	0x40021000
 800103c:	200001e0 	.word	0x200001e0
 8001040:	40020008 	.word	0x40020008
 8001044:	50000100 	.word	0x50000100
 8001048:	200002f4 	.word	0x200002f4
 800104c:	4002001c 	.word	0x4002001c

08001050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a27      	ldr	r2, [pc, #156]	; (80010fc <HAL_TIM_Base_MspInit+0xac>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d114      	bne.n	800108c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <HAL_TIM_Base_MspInit+0xb0>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	4a26      	ldr	r2, [pc, #152]	; (8001100 <HAL_TIM_Base_MspInit+0xb0>)
 8001068:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800106c:	6193      	str	r3, [r2, #24]
 800106e:	4b24      	ldr	r3, [pc, #144]	; (8001100 <HAL_TIM_Base_MspInit+0xb0>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2019      	movs	r0, #25
 8001080:	f001 fc95 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001084:	2019      	movs	r0, #25
 8001086:	f001 fcae 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800108a:	e032      	b.n	80010f2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <HAL_TIM_Base_MspInit+0xb4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d114      	bne.n	80010c0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_TIM_Base_MspInit+0xb0>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_TIM_Base_MspInit+0xb0>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	61d3      	str	r3, [r2, #28]
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_TIM_Base_MspInit+0xb0>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	201d      	movs	r0, #29
 80010b4:	f001 fc7b 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010b8:	201d      	movs	r0, #29
 80010ba:	f001 fc94 	bl	80029e6 <HAL_NVIC_EnableIRQ>
}
 80010be:	e018      	b.n	80010f2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a10      	ldr	r2, [pc, #64]	; (8001108 <HAL_TIM_Base_MspInit+0xb8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d113      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_TIM_Base_MspInit+0xb0>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_TIM_Base_MspInit+0xb0>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	6193      	str	r3, [r2, #24]
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_TIM_Base_MspInit+0xb0>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2019      	movs	r0, #25
 80010e8:	f001 fc61 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80010ec:	2019      	movs	r0, #25
 80010ee:	f001 fc7a 	bl	80029e6 <HAL_NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40012c00 	.word	0x40012c00
 8001100:	40021000 	.word	0x40021000
 8001104:	40000400 	.word	0x40000400
 8001108:	40014400 	.word	0x40014400

0800110c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a20      	ldr	r2, [pc, #128]	; (80011ac <HAL_TIM_MspPostInit+0xa0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d139      	bne.n	80011a2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <HAL_TIM_MspPostInit+0xa4>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <HAL_TIM_MspPostInit+0xa4>)
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	6153      	str	r3, [r2, #20]
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_TIM_MspPostInit+0xa4>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_TIM_MspPostInit+0xa4>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <HAL_TIM_MspPostInit+0xa4>)
 800114c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001150:	6153      	str	r3, [r2, #20]
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_TIM_MspPostInit+0xa4>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor1_2_Pin|Motor1_1_Pin|GPIO_PIN_9;
 800115e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001170:	2306      	movs	r3, #6
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f001 fe5b 	bl	8002e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001182:	2301      	movs	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001192:	2306      	movs	r3, #6
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_TIM_MspPostInit+0xa8>)
 800119e:	f001 fe4b 	bl	8002e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012c00 	.word	0x40012c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000400 	.word	0x48000400

080011b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a32      	ldr	r2, [pc, #200]	; (80012a0 <HAL_UART_MspInit+0xe8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d128      	bne.n	800122c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011da:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <HAL_UART_MspInit+0xec>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4a31      	ldr	r2, [pc, #196]	; (80012a4 <HAL_UART_MspInit+0xec>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6193      	str	r3, [r2, #24]
 80011e6:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <HAL_UART_MspInit+0xec>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <HAL_UART_MspInit+0xec>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <HAL_UART_MspInit+0xec>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fc:	6153      	str	r3, [r2, #20]
 80011fe:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <HAL_UART_MspInit+0xec>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800120a:	23c0      	movs	r3, #192	; 0xc0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800121a:	2307      	movs	r3, #7
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4820      	ldr	r0, [pc, #128]	; (80012a8 <HAL_UART_MspInit+0xf0>)
 8001226:	f001 fe07 	bl	8002e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800122a:	e035      	b.n	8001298 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_UART_MspInit+0xf4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d130      	bne.n	8001298 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_UART_MspInit+0xec>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <HAL_UART_MspInit+0xec>)
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_UART_MspInit+0xec>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_UART_MspInit+0xec>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <HAL_UART_MspInit+0xec>)
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	6153      	str	r3, [r2, #20]
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_UART_MspInit+0xec>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001266:	230c      	movs	r3, #12
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001276:	2307      	movs	r3, #7
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001284:	f001 fdd8 	bl	8002e38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	2026      	movs	r0, #38	; 0x26
 800128e:	f001 fb8e 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001292:	2026      	movs	r0, #38	; 0x26
 8001294:	f001 fba7 	bl	80029e6 <HAL_NVIC_EnableIRQ>
}
 8001298:	bf00      	nop
 800129a:	3730      	adds	r7, #48	; 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40021000 	.word	0x40021000
 80012a8:	48000400 	.word	0x48000400
 80012ac:	40004400 	.word	0x40004400

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fc:	f000 f8c8 	bl	8001490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <DMA1_Channel1_IRQHandler+0x10>)
 800130a:	f001 fca3 	bl	8002c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200001e0 	.word	0x200001e0

08001318 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <DMA1_Channel2_IRQHandler+0x10>)
 800131e:	f001 fc99 	bl	8002c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200002f4 	.word	0x200002f4

0800132c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001330:	4803      	ldr	r0, [pc, #12]	; (8001340 <ADC1_2_IRQHandler+0x14>)
 8001332:	f000 fb61 	bl	80019f8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <ADC1_2_IRQHandler+0x18>)
 8001338:	f000 fb5e 	bl	80019f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000010c 	.word	0x2000010c
 8001344:	20000054 	.word	0x20000054

08001348 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800134e:	f003 fcf1 	bl	8004d34 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001354:	f003 fcee 	bl	8004d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000224 	.word	0x20000224
 8001360:	2000033c 	.word	0x2000033c

08001364 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <TIM3_IRQHandler+0x10>)
 800136a:	f003 fce3 	bl	8004d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200000a8 	.word	0x200000a8

08001378 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <USART2_IRQHandler+0x10>)
 800137e:	f004 fd73 	bl	8005e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000270 	.word	0x20000270

0800138c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <LoopForever+0x6>)
  ldr r1, =_edata
 80013b6:	490e      	ldr	r1, [pc, #56]	; (80013f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <LoopForever+0xe>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013cc:	4c0b      	ldr	r4, [pc, #44]	; (80013fc <LoopForever+0x16>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013da:	f7ff ffd7 	bl	800138c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f005 fddd 	bl	8006f9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013e2:	f7ff f8a9 	bl	8000538 <main>

080013e6 <LoopForever>:

LoopForever:
    b LoopForever
 80013e6:	e7fe      	b.n	80013e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013e8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80013f4:	08007068 	.word	0x08007068
  ldr r2, =_sbss
 80013f8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80013fc:	200003ac 	.word	0x200003ac

08001400 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <CAN_RX0_IRQHandler>
	...

08001404 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_Init+0x28>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_Init+0x28>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001414:	2003      	movs	r0, #3
 8001416:	f001 fabf 	bl	8002998 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141a:	2000      	movs	r0, #0
 800141c:	f000 f808 	bl	8001430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001420:	f7ff fd0c 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40022000 	.word	0x40022000

08001430 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x54>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x58>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fad7 	bl	8002a02 <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e00e      	b.n	800147c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d80a      	bhi.n	800147a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f001 fa9f 	bl	80029ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <HAL_InitTick+0x5c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000008 	.word	0x20000008
 8001488:	20000010 	.word	0x20000010
 800148c:	2000000c 	.word	0x2000000c

08001490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x20>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x24>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <HAL_IncTick+0x24>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000010 	.word	0x20000010
 80014b4:	200003a8 	.word	0x200003a8

080014b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_GetTick+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200003a8 	.word	0x200003a8

080014d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b09a      	sub	sp, #104	; 0x68
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e172      	b.n	8001826 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	2b00      	cmp	r3, #0
 8001550:	d176      	bne.n	8001640 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	2b00      	cmp	r3, #0
 8001558:	d152      	bne.n	8001600 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fc85 	bl	8000e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d13b      	bne.n	8001600 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f001 f8cf 	bl	800272c <ADC_Disable>
 800158e:	4603      	mov	r3, r0
 8001590:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	2b00      	cmp	r3, #0
 800159e:	d12f      	bne.n	8001600 <HAL_ADC_Init+0xe0>
 80015a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d12b      	bne.n	8001600 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015b0:	f023 0302 	bic.w	r3, r3, #2
 80015b4:	f043 0202 	orr.w	r2, r3, #2
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015ca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015da:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015dc:	4b94      	ldr	r3, [pc, #592]	; (8001830 <HAL_ADC_Init+0x310>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a94      	ldr	r2, [pc, #592]	; (8001834 <HAL_ADC_Init+0x314>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0c9a      	lsrs	r2, r3, #18
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015f2:	e002      	b.n	80015fa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f9      	bne.n	80015f4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800161c:	d110      	bne.n	8001640 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f023 0312 	bic.w	r3, r3, #18
 8001626:	f043 0210 	orr.w	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f043 0201 	orr.w	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	2b00      	cmp	r3, #0
 800164a:	f040 80df 	bne.w	800180c <HAL_ADC_Init+0x2ec>
 800164e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001652:	2b00      	cmp	r3, #0
 8001654:	f040 80da 	bne.w	800180c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 80d2 	bne.w	800180c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001670:	f043 0202 	orr.w	r2, r3, #2
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001678:	4b6f      	ldr	r3, [pc, #444]	; (8001838 <HAL_ADC_Init+0x318>)
 800167a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001684:	d102      	bne.n	800168c <HAL_ADC_Init+0x16c>
 8001686:	4b6d      	ldr	r3, [pc, #436]	; (800183c <HAL_ADC_Init+0x31c>)
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	e002      	b.n	8001692 <HAL_ADC_Init+0x172>
 800168c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001690:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d108      	bne.n	80016b2 <HAL_ADC_Init+0x192>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_Init+0x192>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_ADC_Init+0x194>
 80016b2:	2300      	movs	r3, #0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d11c      	bne.n	80016f2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016b8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d010      	beq.n	80016e0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d107      	bne.n	80016da <HAL_ADC_Init+0x1ba>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_ADC_Init+0x1ba>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_ADC_Init+0x1bc>
 80016da:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d108      	bne.n	80016f2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80016e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016f0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7e5b      	ldrb	r3, [r3, #25]
 80016f6:	035b      	lsls	r3, r3, #13
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016fc:	2a01      	cmp	r2, #1
 80016fe:	d002      	beq.n	8001706 <HAL_ADC_Init+0x1e6>
 8001700:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001704:	e000      	b.n	8001708 <HAL_ADC_Init+0x1e8>
 8001706:	2200      	movs	r2, #0
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4313      	orrs	r3, r2
 8001716:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001718:	4313      	orrs	r3, r2
 800171a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d11b      	bne.n	800175e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7e5b      	ldrb	r3, [r3, #25]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	045a      	lsls	r2, r3, #17
 8001736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001738:	4313      	orrs	r3, r2
 800173a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173e:	663b      	str	r3, [r7, #96]	; 0x60
 8001740:	e00d      	b.n	800175e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800174a:	f043 0220 	orr.w	r2, r3, #32
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f043 0201 	orr.w	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	2b01      	cmp	r3, #1
 8001764:	d007      	beq.n	8001776 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	4313      	orrs	r3, r2
 8001770:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001772:	4313      	orrs	r3, r2
 8001774:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b00      	cmp	r3, #0
 8001782:	d114      	bne.n	80017ae <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001792:	f023 0302 	bic.w	r3, r3, #2
 8001796:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7e1b      	ldrb	r3, [r3, #24]
 800179c:	039a      	lsls	r2, r3, #14
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4313      	orrs	r3, r2
 80017a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017aa:	4313      	orrs	r3, r2
 80017ac:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	4b22      	ldr	r3, [pc, #136]	; (8001840 <HAL_ADC_Init+0x320>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80017be:	430b      	orrs	r3, r1
 80017c0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d10c      	bne.n	80017e4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f023 010f 	bic.w	r1, r3, #15
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	1e5a      	subs	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30
 80017e2:	e007      	b.n	80017f4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 020f 	bic.w	r2, r2, #15
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	f043 0201 	orr.w	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
 800180a:	e00a      	b.n	8001822 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f023 0312 	bic.w	r3, r3, #18
 8001814:	f043 0210 	orr.w	r2, r3, #16
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800181c:	2301      	movs	r3, #1
 800181e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001822:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001826:	4618      	mov	r0, r3
 8001828:	3768      	adds	r7, #104	; 0x68
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008
 8001834:	431bde83 	.word	0x431bde83
 8001838:	50000300 	.word	0x50000300
 800183c:	50000100 	.word	0x50000100
 8001840:	fff0c007 	.word	0xfff0c007

08001844 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 80b9 	bne.w	80019d6 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_ADC_Start_DMA+0x2e>
 800186e:	2302      	movs	r3, #2
 8001870:	e0b4      	b.n	80019dc <HAL_ADC_Start_DMA+0x198>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800187a:	4b5a      	ldr	r3, [pc, #360]	; (80019e4 <HAL_ADC_Start_DMA+0x1a0>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	2b00      	cmp	r3, #0
 8001884:	f040 80a0 	bne.w	80019c8 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 feeb 	bl	8002664 <ADC_Enable>
 800188e:	4603      	mov	r3, r0
 8001890:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 8092 	bne.w	80019be <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018ae:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <HAL_ADC_Start_DMA+0x1a0>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <HAL_ADC_Start_DMA+0x80>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018c2:	d115      	bne.n	80018f0 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d027      	beq.n	800192e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80018ee:	e01e      	b.n	800192e <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001904:	d004      	beq.n	8001910 <HAL_ADC_Start_DMA+0xcc>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a37      	ldr	r2, [pc, #220]	; (80019e8 <HAL_ADC_Start_DMA+0x1a4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d10e      	bne.n	800192e <HAL_ADC_Start_DMA+0xea>
 8001910:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001926:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800193a:	d106      	bne.n	800194a <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	f023 0206 	bic.w	r2, r3, #6
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	645a      	str	r2, [r3, #68]	; 0x44
 8001948:	e002      	b.n	8001950 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195c:	4a23      	ldr	r2, [pc, #140]	; (80019ec <HAL_ADC_Start_DMA+0x1a8>)
 800195e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <HAL_ADC_Start_DMA+0x1ac>)
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196c:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <HAL_ADC_Start_DMA+0x1b0>)
 800196e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	221c      	movs	r2, #28
 8001976:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0210 	orr.w	r2, r2, #16
 8001986:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3340      	adds	r3, #64	; 0x40
 80019a2:	4619      	mov	r1, r3
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f001 f87e 	bl	8002aa8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0204 	orr.w	r2, r2, #4
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	e00d      	b.n	80019da <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80019c6:	e008      	b.n	80019da <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80019d4:	e001      	b.n	80019da <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
 80019d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019da:	7dfb      	ldrb	r3, [r7, #23]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	50000300 	.word	0x50000300
 80019e8:	50000100 	.word	0x50000100
 80019ec:	08002599 	.word	0x08002599
 80019f0:	08002613 	.word	0x08002613
 80019f4:	0800262f 	.word	0x0800262f

080019f8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d106      	bne.n	8001a28 <HAL_ADC_IRQHandler+0x30>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d00d      	beq.n	8001a44 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d17a      	bne.n	8001b2c <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d173      	bne.n	8001b2c <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d105      	bne.n	8001a5c <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001a5c:	4b88      	ldr	r3, [pc, #544]	; (8001c80 <HAL_ADC_IRQHandler+0x288>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <HAL_ADC_IRQHandler+0x92>
 8001a68:	4b85      	ldr	r3, [pc, #532]	; (8001c80 <HAL_ADC_IRQHandler+0x288>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	2b05      	cmp	r3, #5
 8001a72:	d00a      	beq.n	8001a8a <HAL_ADC_IRQHandler+0x92>
 8001a74:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <HAL_ADC_IRQHandler+0x288>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	2b09      	cmp	r3, #9
 8001a7e:	d004      	beq.n	8001a8a <HAL_ADC_IRQHandler+0x92>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a88:	d104      	bne.n	8001a94 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	e003      	b.n	8001a9c <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d139      	bne.n	8001b1e <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d134      	bne.n	8001b1e <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d12d      	bne.n	8001b1e <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d11a      	bne.n	8001b06 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 020c 	bic.w	r2, r2, #12
 8001ade:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d112      	bne.n	8001b1e <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
 8001b04:	e00b      	b.n	8001b1e <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f043 0210 	orr.w	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fcd6 	bl	80014d0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	220c      	movs	r2, #12
 8001b2a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0320 	and.w	r3, r3, #32
 8001b36:	2b20      	cmp	r3, #32
 8001b38:	d106      	bne.n	8001b48 <HAL_ADC_IRQHandler+0x150>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d00f      	beq.n	8001b68 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001b52:	2b40      	cmp	r3, #64	; 0x40
 8001b54:	f040 80a9 	bne.w	8001caa <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b62:	2b40      	cmp	r3, #64	; 0x40
 8001b64:	f040 80a1 	bne.w	8001caa <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001b74:	4b42      	ldr	r3, [pc, #264]	; (8001c80 <HAL_ADC_IRQHandler+0x288>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d010      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x1aa>
 8001b80:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <HAL_ADC_IRQHandler+0x288>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x1aa>
 8001b8c:	4b3c      	ldr	r3, [pc, #240]	; (8001c80 <HAL_ADC_IRQHandler+0x288>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2b09      	cmp	r3, #9
 8001b96:	d004      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x1aa>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ba0:	d104      	bne.n	8001bac <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	e003      	b.n	8001bb4 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001bac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d16c      	bne.n	8001c9c <HAL_ADC_IRQHandler+0x2a4>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00b      	beq.n	8001be4 <HAL_ADC_IRQHandler+0x1ec>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d160      	bne.n	8001c9c <HAL_ADC_IRQHandler+0x2a4>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d15b      	bne.n	8001c9c <HAL_ADC_IRQHandler+0x2a4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	2b40      	cmp	r3, #64	; 0x40
 8001bf0:	d154      	bne.n	8001c9c <HAL_ADC_IRQHandler+0x2a4>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <HAL_ADC_IRQHandler+0x288>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d010      	beq.n	8001c20 <HAL_ADC_IRQHandler+0x228>
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_ADC_IRQHandler+0x288>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d00a      	beq.n	8001c20 <HAL_ADC_IRQHandler+0x228>
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_ADC_IRQHandler+0x288>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2b07      	cmp	r3, #7
 8001c14:	d004      	beq.n	8001c20 <HAL_ADC_IRQHandler+0x228>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c1e:	d104      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x232>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e003      	b.n	8001c32 <HAL_ADC_IRQHandler+0x23a>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001c2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d12f      	bne.n	8001c9c <HAL_ADC_IRQHandler+0x2a4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d11c      	bne.n	8001c84 <HAL_ADC_IRQHandler+0x28c>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c58:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d114      	bne.n	8001c9c <HAL_ADC_IRQHandler+0x2a4>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0201 	orr.w	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c7e:	e00d      	b.n	8001c9c <HAL_ADC_IRQHandler+0x2a4>
 8001c80:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	f043 0210 	orr.w	r2, r3, #16
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f8cb 	bl	8001e38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2260      	movs	r2, #96	; 0x60
 8001ca8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb4:	2b80      	cmp	r3, #128	; 0x80
 8001cb6:	d113      	bne.n	8001ce0 <HAL_ADC_IRQHandler+0x2e8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc2:	2b80      	cmp	r3, #128	; 0x80
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fc10 	bl	80014f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cee:	d115      	bne.n	8001d1c <HAL_ADC_IRQHandler+0x324>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfe:	d10d      	bne.n	8001d1c <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f8a7 	bl	8001e60 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d1a:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d2a:	d115      	bne.n	8001d58 <HAL_ADC_IRQHandler+0x360>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3a:	d10d      	bne.n	8001d58 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f893 	bl	8001e74 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d56:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b10      	cmp	r3, #16
 8001d64:	d13d      	bne.n	8001de2 <HAL_ADC_IRQHandler+0x3ea>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b10      	cmp	r3, #16
 8001d72:	d136      	bne.n	8001de2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d102      	bne.n	8001d82 <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e019      	b.n	8001db6 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <HAL_ADC_IRQHandler+0x43c>)
 8001d84:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10a      	bne.n	8001db6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8001da0:	2301      	movs	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e007      	b.n	8001db6 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 8001db2:	2301      	movs	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10e      	bne.n	8001dda <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dcc:	f043 0202 	orr.w	r2, r3, #2
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff fb99 	bl	800150c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2210      	movs	r2, #16
 8001de0:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df0:	d11b      	bne.n	8001e2a <HAL_ADC_IRQHandler+0x432>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e00:	d113      	bne.n	8001e2a <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f043 0208 	orr.w	r2, r3, #8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e22:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f811 	bl	8001e4c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	50000300 	.word	0x50000300

08001e38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b09b      	sub	sp, #108	; 0x6c
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x22>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e2a5      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x56e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f040 8289 	bne.w	80023d4 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d81c      	bhi.n	8001f04 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	461a      	mov	r2, r3
 8001ede:	231f      	movs	r3, #31
 8001ee0:	4093      	lsls	r3, r2
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	4019      	ands	r1, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
 8001f02:	e063      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	d81e      	bhi.n	8001f4a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	3b1e      	subs	r3, #30
 8001f20:	221f      	movs	r2, #31
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	4019      	ands	r1, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	3b1e      	subs	r3, #30
 8001f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	635a      	str	r2, [r3, #52]	; 0x34
 8001f48:	e040      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b0e      	cmp	r3, #14
 8001f50:	d81e      	bhi.n	8001f90 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	3b3c      	subs	r3, #60	; 0x3c
 8001f66:	221f      	movs	r2, #31
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4019      	ands	r1, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	3b3c      	subs	r3, #60	; 0x3c
 8001f82:	fa00 f203 	lsl.w	r2, r0, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	639a      	str	r2, [r3, #56]	; 0x38
 8001f8e:	e01d      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	3b5a      	subs	r3, #90	; 0x5a
 8001fa4:	221f      	movs	r2, #31
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	4019      	ands	r1, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	3b5a      	subs	r3, #90	; 0x5a
 8001fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 80e5 	bne.w	80021a6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b09      	cmp	r3, #9
 8001fe2:	d91c      	bls.n	800201e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6999      	ldr	r1, [r3, #24]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b1e      	subs	r3, #30
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	4019      	ands	r1, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6898      	ldr	r0, [r3, #8]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	3b1e      	subs	r3, #30
 8002010:	fa00 f203 	lsl.w	r2, r0, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	619a      	str	r2, [r3, #24]
 800201c:	e019      	b.n	8002052 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6959      	ldr	r1, [r3, #20]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	2207      	movs	r2, #7
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	4019      	ands	r1, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6898      	ldr	r0, [r3, #8]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	fa00 f203 	lsl.w	r2, r0, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	08db      	lsrs	r3, r3, #3
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	3b01      	subs	r3, #1
 8002070:	2b03      	cmp	r3, #3
 8002072:	d84f      	bhi.n	8002114 <HAL_ADC_ConfigChannel+0x28c>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <HAL_ADC_ConfigChannel+0x1f4>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	0800208d 	.word	0x0800208d
 8002080:	080020af 	.word	0x080020af
 8002084:	080020d1 	.word	0x080020d1
 8002088:	080020f3 	.word	0x080020f3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002092:	4b9e      	ldr	r3, [pc, #632]	; (800230c <HAL_ADC_ConfigChannel+0x484>)
 8002094:	4013      	ands	r3, r2
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	0691      	lsls	r1, r2, #26
 800209c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800209e:	430a      	orrs	r2, r1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020aa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020ac:	e07e      	b.n	80021ac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020b4:	4b95      	ldr	r3, [pc, #596]	; (800230c <HAL_ADC_ConfigChannel+0x484>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	0691      	lsls	r1, r2, #26
 80020be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020c0:	430a      	orrs	r2, r1
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020cc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020ce:	e06d      	b.n	80021ac <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020d6:	4b8d      	ldr	r3, [pc, #564]	; (800230c <HAL_ADC_ConfigChannel+0x484>)
 80020d8:	4013      	ands	r3, r2
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	0691      	lsls	r1, r2, #26
 80020e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020e2:	430a      	orrs	r2, r1
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020ee:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80020f0:	e05c      	b.n	80021ac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020f8:	4b84      	ldr	r3, [pc, #528]	; (800230c <HAL_ADC_ConfigChannel+0x484>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	0691      	lsls	r1, r2, #26
 8002102:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002104:	430a      	orrs	r2, r1
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002110:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002112:	e04b      	b.n	80021ac <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	069b      	lsls	r3, r3, #26
 8002124:	429a      	cmp	r2, r3
 8002126:	d107      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002136:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800213e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	069b      	lsls	r3, r3, #26
 8002148:	429a      	cmp	r2, r3
 800214a:	d107      	bne.n	800215c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800215a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	069b      	lsls	r3, r3, #26
 800216c:	429a      	cmp	r2, r3
 800216e:	d107      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800217e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002186:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	069b      	lsls	r3, r3, #26
 8002190:	429a      	cmp	r2, r3
 8002192:	d10a      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021a2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80021a4:	e001      	b.n	80021aa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80021a6:	bf00      	nop
 80021a8:	e000      	b.n	80021ac <HAL_ADC_ConfigChannel+0x324>
      break;
 80021aa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x344>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x344>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <HAL_ADC_ConfigChannel+0x346>
 80021cc:	2300      	movs	r3, #0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f040 810b 	bne.w	80023ea <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d00f      	beq.n	80021fc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	400a      	ands	r2, r1
 80021f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80021fa:	e049      	b.n	8002290 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	409a      	lsls	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b09      	cmp	r3, #9
 800221c:	d91c      	bls.n	8002258 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6999      	ldr	r1, [r3, #24]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	3b1b      	subs	r3, #27
 8002230:	2207      	movs	r2, #7
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	4019      	ands	r1, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6898      	ldr	r0, [r3, #8]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	3b1b      	subs	r3, #27
 800224a:	fa00 f203 	lsl.w	r2, r0, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	619a      	str	r2, [r3, #24]
 8002256:	e01b      	b.n	8002290 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6959      	ldr	r1, [r3, #20]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	2207      	movs	r2, #7
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	4019      	ands	r1, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6898      	ldr	r0, [r3, #8]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	fa00 f203 	lsl.w	r2, r0, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <HAL_ADC_ConfigChannel+0x488>)
 8002292:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b10      	cmp	r3, #16
 800229a:	d105      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800229c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022ac:	2b11      	cmp	r3, #17
 80022ae:	d105      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80022c0:	2b12      	cmp	r3, #18
 80022c2:	f040 8092 	bne.w	80023ea <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80022c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 808b 	bne.w	80023ea <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022dc:	d102      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x45c>
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_ADC_ConfigChannel+0x48c>)
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e002      	b.n	80022ea <HAL_ADC_ConfigChannel+0x462>
 80022e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022e8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10f      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x490>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d108      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x490>
 8002306:	2301      	movs	r3, #1
 8002308:	e007      	b.n	800231a <HAL_ADC_ConfigChannel+0x492>
 800230a:	bf00      	nop
 800230c:	83fff000 	.word	0x83fff000
 8002310:	50000300 	.word	0x50000300
 8002314:	50000100 	.word	0x50000100
 8002318:	2300      	movs	r3, #0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d150      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800231e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002320:	2b00      	cmp	r3, #0
 8002322:	d010      	beq.n	8002346 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d107      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x4b8>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x4b8>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_ADC_ConfigChannel+0x4ba>
 8002340:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002342:	2b00      	cmp	r3, #0
 8002344:	d13c      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b10      	cmp	r3, #16
 800234c:	d11d      	bne.n	800238a <HAL_ADC_ConfigChannel+0x502>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002356:	d118      	bne.n	800238a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002362:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_ADC_ConfigChannel+0x57c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a27      	ldr	r2, [pc, #156]	; (8002408 <HAL_ADC_ConfigChannel+0x580>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0c9a      	lsrs	r2, r3, #18
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800237a:	e002      	b.n	8002382 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	3b01      	subs	r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f9      	bne.n	800237c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002388:	e02e      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b11      	cmp	r3, #17
 8002390:	d10b      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x522>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800239a:	d106      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800239c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80023a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023a8:	e01e      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d11a      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80023b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023bc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023be:	e013      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80023d2:	e00a      	b.n	80023ea <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f043 0220 	orr.w	r2, r3, #32
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80023e6:	e000      	b.n	80023ea <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80023e8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	376c      	adds	r7, #108	; 0x6c
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000008 	.word	0x20000008
 8002408:	431bde83 	.word	0x431bde83

0800240c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800240c:	b480      	push	{r7}
 800240e:	b099      	sub	sp, #100	; 0x64
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002424:	d102      	bne.n	800242c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002426:	4b5a      	ldr	r3, [pc, #360]	; (8002590 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	e002      	b.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800242c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002430:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0a2      	b.n	8002582 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002446:	2302      	movs	r3, #2
 8002448:	e09b      	b.n	8002582 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d17f      	bne.n	8002560 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d179      	bne.n	8002560 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800246c:	4b49      	ldr	r3, [pc, #292]	; (8002594 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800246e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d040      	beq.n	80024fa <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800248a:	035b      	lsls	r3, r3, #13
 800248c:	430b      	orrs	r3, r1
 800248e:	431a      	orrs	r2, r3
 8002490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002492:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d108      	bne.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80024b4:	2300      	movs	r3, #0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d15c      	bne.n	8002574 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d107      	bne.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80024d6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d14b      	bne.n	8002574 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80024dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024e4:	f023 030f 	bic.w	r3, r3, #15
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	6811      	ldr	r1, [r2, #0]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	6892      	ldr	r2, [r2, #8]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	431a      	orrs	r2, r3
 80024f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024f8:	e03c      	b.n	8002574 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002504:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b01      	cmp	r3, #1
 8002512:	d108      	bne.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002526:	2300      	movs	r3, #0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d123      	bne.n	8002574 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002548:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800254a:	2b00      	cmp	r3, #0
 800254c:	d112      	bne.n	8002574 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800254e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002556:	f023 030f 	bic.w	r3, r3, #15
 800255a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800255c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800255e:	e009      	b.n	8002574 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f043 0220 	orr.w	r2, r3, #32
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002572:	e000      	b.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002574:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800257e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002582:	4618      	mov	r0, r3
 8002584:	3764      	adds	r7, #100	; 0x64
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	50000100 	.word	0x50000100
 8002594:	50000300 	.word	0x50000300

08002598 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d126      	bne.n	8002600 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d115      	bne.n	80025f8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d111      	bne.n	80025f8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7fe ff69 	bl	80014d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80025fe:	e004      	b.n	800260a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7fe ff5f 	bl	80014e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	f043 0204 	orr.w	r2, r3, #4
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7fe ff59 	bl	800150c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d108      	bne.n	8002690 <ADC_Enable+0x2c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <ADC_Enable+0x2c>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <ADC_Enable+0x2e>
 8002690:	2300      	movs	r3, #0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d143      	bne.n	800271e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	4b22      	ldr	r3, [pc, #136]	; (8002728 <ADC_Enable+0xc4>)
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00d      	beq.n	80026c0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f043 0210 	orr.w	r2, r3, #16
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	f043 0201 	orr.w	r2, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e02f      	b.n	8002720 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80026d0:	f7fe fef2 	bl	80014b8 <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026d6:	e01b      	b.n	8002710 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026d8:	f7fe feee 	bl	80014b8 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d914      	bls.n	8002710 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d00d      	beq.n	8002710 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f043 0210 	orr.w	r2, r3, #16
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f043 0201 	orr.w	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e007      	b.n	8002720 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d1dc      	bne.n	80026d8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	8000003f 	.word	0x8000003f

0800272c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d108      	bne.n	8002758 <ADC_Disable+0x2c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <ADC_Disable+0x2c>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <ADC_Disable+0x2e>
 8002758:	2300      	movs	r3, #0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d047      	beq.n	80027ee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030d 	and.w	r3, r3, #13
 8002768:	2b01      	cmp	r3, #1
 800276a:	d10f      	bne.n	800278c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0202 	orr.w	r2, r2, #2
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2203      	movs	r2, #3
 8002782:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002784:	f7fe fe98 	bl	80014b8 <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800278a:	e029      	b.n	80027e0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f043 0210 	orr.w	r2, r3, #16
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279c:	f043 0201 	orr.w	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e023      	b.n	80027f0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027a8:	f7fe fe86 	bl	80014b8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d914      	bls.n	80027e0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d10d      	bne.n	80027e0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f043 0210 	orr.w	r2, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e007      	b.n	80027f0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d0dc      	beq.n	80027a8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282a:	4a04      	ldr	r2, [pc, #16]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0307 	and.w	r3, r3, #7
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db0b      	blt.n	8002886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	4907      	ldr	r1, [pc, #28]	; (8002894 <__NVIC_EnableIRQ+0x38>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2001      	movs	r0, #1
 800287e:	fa00 f202 	lsl.w	r2, r0, r2
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	; (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002964:	d301      	bcc.n	800296a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002966:	2301      	movs	r3, #1
 8002968:	e00f      	b.n	800298a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <SysTick_Config+0x40>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002972:	210f      	movs	r1, #15
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	f7ff ff8e 	bl	8002898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <SysTick_Config+0x40>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <SysTick_Config+0x40>)
 8002984:	2207      	movs	r2, #7
 8002986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000e010 	.word	0xe000e010

08002998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff29 	bl	80027f8 <__NVIC_SetPriorityGrouping>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c0:	f7ff ff3e 	bl	8002840 <__NVIC_GetPriorityGrouping>
 80029c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff ff8e 	bl	80028ec <NVIC_EncodePriority>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff5d 	bl	8002898 <__NVIC_SetPriority>
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff31 	bl	800285c <__NVIC_EnableIRQ>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffa2 	bl	8002954 <SysTick_Config>
 8002a10:	4603      	mov	r3, r0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e037      	b.n	8002aa0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f9b8 	bl	8002df8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}  
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_DMA_Start_IT+0x20>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e04a      	b.n	8002b5e <HAL_DMA_Start_IT+0xb6>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d13a      	bne.n	8002b50 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f94b 	bl	8002d9a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 020e 	orr.w	r2, r2, #14
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e00f      	b.n	8002b3e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 020a 	orr.w	r2, r2, #10
 8002b2c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0204 	bic.w	r2, r2, #4
 8002b3c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e005      	b.n	8002b5c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d008      	beq.n	8002b8a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e020      	b.n	8002bcc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 020e 	bic.w	r2, r2, #14
 8002b98:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d005      	beq.n	8002bfa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	e027      	b.n	8002c4a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 020e 	bic.w	r2, r2, #14
 8002c08:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	2101      	movs	r1, #1
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
    } 
  }
  return status;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	2204      	movs	r2, #4
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d024      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x72>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01f      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d107      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0204 	bic.w	r2, r2, #4
 8002ca2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cac:	2104      	movs	r1, #4
 8002cae:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d06a      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002cc4:	e065      	b.n	8002d92 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2202      	movs	r2, #2
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d02c      	beq.n	8002d30 <HAL_DMA_IRQHandler+0xdc>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d027      	beq.n	8002d30 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10b      	bne.n	8002d06 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 020a 	bic.w	r2, r2, #10
 8002cfc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	2102      	movs	r1, #2
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d035      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002d2e:	e030      	b.n	8002d92 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	2208      	movs	r2, #8
 8002d36:	409a      	lsls	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d028      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x13e>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d023      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 020e 	bic.w	r2, r2, #14
 8002d58:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	2101      	movs	r1, #1
 8002d64:	fa01 f202 	lsl.w	r2, r1, r2
 8002d68:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
    }
  }
}  
 8002d90:	e7ff      	b.n	8002d92 <HAL_DMA_IRQHandler+0x13e>
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f202 	lsl.w	r2, r1, r2
 8002db6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d108      	bne.n	8002dda <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dd8:	e007      	b.n	8002dea <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	60da      	str	r2, [r3, #12]
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <DMA_CalcBaseAndBitshift+0x34>)
 8002e08:	4413      	add	r3, r2
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <DMA_CalcBaseAndBitshift+0x38>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	009a      	lsls	r2, r3, #2
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <DMA_CalcBaseAndBitshift+0x3c>)
 8002e1c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	bffdfff8 	.word	0xbffdfff8
 8002e30:	cccccccd 	.word	0xcccccccd
 8002e34:	40020000 	.word	0x40020000

08002e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e46:	e14e      	b.n	80030e6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	4013      	ands	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8140 	beq.w	80030e0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d005      	beq.n	8002e78 <HAL_GPIO_Init+0x40>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d130      	bne.n	8002eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eae:	2201      	movs	r2, #1
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f003 0201 	and.w	r2, r3, #1
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d017      	beq.n	8002f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d123      	bne.n	8002f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	08da      	lsrs	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3208      	adds	r2, #8
 8002f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	220f      	movs	r2, #15
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	08da      	lsrs	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3208      	adds	r2, #8
 8002f64:	6939      	ldr	r1, [r7, #16]
 8002f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	2203      	movs	r2, #3
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0203 	and.w	r2, r3, #3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 809a 	beq.w	80030e0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fac:	4b55      	ldr	r3, [pc, #340]	; (8003104 <HAL_GPIO_Init+0x2cc>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	4a54      	ldr	r2, [pc, #336]	; (8003104 <HAL_GPIO_Init+0x2cc>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6193      	str	r3, [r2, #24]
 8002fb8:	4b52      	ldr	r3, [pc, #328]	; (8003104 <HAL_GPIO_Init+0x2cc>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fc4:	4a50      	ldr	r2, [pc, #320]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	089b      	lsrs	r3, r3, #2
 8002fca:	3302      	adds	r3, #2
 8002fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	220f      	movs	r2, #15
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fee:	d013      	beq.n	8003018 <HAL_GPIO_Init+0x1e0>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a46      	ldr	r2, [pc, #280]	; (800310c <HAL_GPIO_Init+0x2d4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00d      	beq.n	8003014 <HAL_GPIO_Init+0x1dc>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a45      	ldr	r2, [pc, #276]	; (8003110 <HAL_GPIO_Init+0x2d8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d007      	beq.n	8003010 <HAL_GPIO_Init+0x1d8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a44      	ldr	r2, [pc, #272]	; (8003114 <HAL_GPIO_Init+0x2dc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d101      	bne.n	800300c <HAL_GPIO_Init+0x1d4>
 8003008:	2303      	movs	r3, #3
 800300a:	e006      	b.n	800301a <HAL_GPIO_Init+0x1e2>
 800300c:	2305      	movs	r3, #5
 800300e:	e004      	b.n	800301a <HAL_GPIO_Init+0x1e2>
 8003010:	2302      	movs	r3, #2
 8003012:	e002      	b.n	800301a <HAL_GPIO_Init+0x1e2>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <HAL_GPIO_Init+0x1e2>
 8003018:	2300      	movs	r3, #0
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	f002 0203 	and.w	r2, r2, #3
 8003020:	0092      	lsls	r2, r2, #2
 8003022:	4093      	lsls	r3, r2
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800302a:	4937      	ldr	r1, [pc, #220]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	3302      	adds	r3, #2
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003038:	4b37      	ldr	r3, [pc, #220]	; (8003118 <HAL_GPIO_Init+0x2e0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800305c:	4a2e      	ldr	r2, [pc, #184]	; (8003118 <HAL_GPIO_Init+0x2e0>)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003062:	4b2d      	ldr	r3, [pc, #180]	; (8003118 <HAL_GPIO_Init+0x2e0>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003086:	4a24      	ldr	r2, [pc, #144]	; (8003118 <HAL_GPIO_Init+0x2e0>)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800308c:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_GPIO_Init+0x2e0>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43db      	mvns	r3, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030b0:	4a19      	ldr	r2, [pc, #100]	; (8003118 <HAL_GPIO_Init+0x2e0>)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b6:	4b18      	ldr	r3, [pc, #96]	; (8003118 <HAL_GPIO_Init+0x2e0>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030da:	4a0f      	ldr	r2, [pc, #60]	; (8003118 <HAL_GPIO_Init+0x2e0>)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	3301      	adds	r3, #1
 80030e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f47f aea9 	bne.w	8002e48 <HAL_GPIO_Init+0x10>
  }
}
 80030f6:	bf00      	nop
 80030f8:	bf00      	nop
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40021000 	.word	0x40021000
 8003108:	40010000 	.word	0x40010000
 800310c:	48000400 	.word	0x48000400
 8003110:	48000800 	.word	0x48000800
 8003114:	48000c00 	.word	0x48000c00
 8003118:	40010400 	.word	0x40010400

0800311c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	807b      	strh	r3, [r7, #2]
 8003128:	4613      	mov	r3, r2
 800312a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800312c:	787b      	ldrb	r3, [r7, #1]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003132:	887a      	ldrh	r2, [r7, #2]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003138:	e002      	b.n	8003140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003152:	af00      	add	r7, sp, #0
 8003154:	1d3b      	adds	r3, r7, #4
 8003156:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003158:	1d3b      	adds	r3, r7, #4
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	f000 bef4 	b.w	8003f4e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	1d3b      	adds	r3, r7, #4
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 816a 	beq.w	800344a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003176:	4bb3      	ldr	r3, [pc, #716]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b04      	cmp	r3, #4
 8003180:	d00c      	beq.n	800319c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003182:	4bb0      	ldr	r3, [pc, #704]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b08      	cmp	r3, #8
 800318c:	d159      	bne.n	8003242 <HAL_RCC_OscConfig+0xf6>
 800318e:	4bad      	ldr	r3, [pc, #692]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319a:	d152      	bne.n	8003242 <HAL_RCC_OscConfig+0xf6>
 800319c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031a0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d102      	bne.n	80031ce <HAL_RCC_OscConfig+0x82>
 80031c8:	4b9e      	ldr	r3, [pc, #632]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	e015      	b.n	80031fa <HAL_RCC_OscConfig+0xae>
 80031ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031d2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80031e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80031ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80031f6:	4b93      	ldr	r3, [pc, #588]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031fe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003202:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003206:	fa92 f2a2 	rbit	r2, r2
 800320a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800320e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003212:	fab2 f282 	clz	r2, r2
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f042 0220 	orr.w	r2, r2, #32
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	f002 021f 	and.w	r2, r2, #31
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f202 	lsl.w	r2, r1, r2
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 810c 	beq.w	8003448 <HAL_RCC_OscConfig+0x2fc>
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	f040 8106 	bne.w	8003448 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f000 be86 	b.w	8003f4e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d106      	bne.n	800325c <HAL_RCC_OscConfig+0x110>
 800324e:	4b7d      	ldr	r3, [pc, #500]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a7c      	ldr	r2, [pc, #496]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e030      	b.n	80032be <HAL_RCC_OscConfig+0x172>
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x134>
 8003266:	4b77      	ldr	r3, [pc, #476]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a76      	ldr	r2, [pc, #472]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 800326c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b74      	ldr	r3, [pc, #464]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a73      	ldr	r2, [pc, #460]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 8003278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e01e      	b.n	80032be <HAL_RCC_OscConfig+0x172>
 8003280:	1d3b      	adds	r3, r7, #4
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800328a:	d10c      	bne.n	80032a6 <HAL_RCC_OscConfig+0x15a>
 800328c:	4b6d      	ldr	r3, [pc, #436]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a6c      	ldr	r2, [pc, #432]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 8003292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	4b6a      	ldr	r3, [pc, #424]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a69      	ldr	r2, [pc, #420]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 800329e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	e00b      	b.n	80032be <HAL_RCC_OscConfig+0x172>
 80032a6:	4b67      	ldr	r3, [pc, #412]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a66      	ldr	r2, [pc, #408]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 80032ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b64      	ldr	r3, [pc, #400]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a63      	ldr	r2, [pc, #396]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 80032b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032be:	4b61      	ldr	r3, [pc, #388]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	f023 020f 	bic.w	r2, r3, #15
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	495d      	ldr	r1, [pc, #372]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d059      	beq.n	8003390 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe f8ec 	bl	80014b8 <HAL_GetTick>
 80032e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e6:	f7fe f8e7 	bl	80014b8 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d902      	bls.n	80032fc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	f000 be29 	b.w	8003f4e <HAL_RCC_OscConfig+0xe02>
 80032fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003300:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003310:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d102      	bne.n	800332e <HAL_RCC_OscConfig+0x1e2>
 8003328:	4b46      	ldr	r3, [pc, #280]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	e015      	b.n	800335a <HAL_RCC_OscConfig+0x20e>
 800332e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003332:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003342:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003346:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800334a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800335e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003362:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003366:	fa92 f2a2 	rbit	r2, r2
 800336a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800336e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003372:	fab2 f282 	clz	r2, r2
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	f042 0220 	orr.w	r2, r2, #32
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	f002 021f 	and.w	r2, r2, #31
 8003382:	2101      	movs	r1, #1
 8003384:	fa01 f202 	lsl.w	r2, r1, r2
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0ab      	beq.n	80032e6 <HAL_RCC_OscConfig+0x19a>
 800338e:	e05c      	b.n	800344a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fe f892 	bl	80014b8 <HAL_GetTick>
 8003394:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800339a:	f7fe f88d 	bl	80014b8 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	; 0x64
 80033a8:	d902      	bls.n	80033b0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	f000 bdcf 	b.w	8003f4e <HAL_RCC_OscConfig+0xe02>
 80033b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80033c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d102      	bne.n	80033e2 <HAL_RCC_OscConfig+0x296>
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	e015      	b.n	800340e <HAL_RCC_OscConfig+0x2c2>
 80033e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80033f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033fe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800340a:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <HAL_RCC_OscConfig+0x2f8>)
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003412:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003416:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800341a:	fa92 f2a2 	rbit	r2, r2
 800341e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003422:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003426:	fab2 f282 	clz	r2, r2
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f042 0220 	orr.w	r2, r2, #32
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f002 021f 	and.w	r2, r2, #31
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1ab      	bne.n	800339a <HAL_RCC_OscConfig+0x24e>
 8003442:	e002      	b.n	800344a <HAL_RCC_OscConfig+0x2fe>
 8003444:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 816f 	beq.w	8003738 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800345a:	4bd0      	ldr	r3, [pc, #832]	; (800379c <HAL_RCC_OscConfig+0x650>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003466:	4bcd      	ldr	r3, [pc, #820]	; (800379c <HAL_RCC_OscConfig+0x650>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b08      	cmp	r3, #8
 8003470:	d16c      	bne.n	800354c <HAL_RCC_OscConfig+0x400>
 8003472:	4bca      	ldr	r3, [pc, #808]	; (800379c <HAL_RCC_OscConfig+0x650>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d166      	bne.n	800354c <HAL_RCC_OscConfig+0x400>
 800347e:	2302      	movs	r3, #2
 8003480:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003490:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003494:	fab3 f383 	clz	r3, r3
 8003498:	b2db      	uxtb	r3, r3
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <HAL_RCC_OscConfig+0x362>
 80034a8:	4bbc      	ldr	r3, [pc, #752]	; (800379c <HAL_RCC_OscConfig+0x650>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	e013      	b.n	80034d6 <HAL_RCC_OscConfig+0x38a>
 80034ae:	2302      	movs	r3, #2
 80034b0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80034c0:	2302      	movs	r3, #2
 80034c2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80034c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80034d2:	4bb2      	ldr	r3, [pc, #712]	; (800379c <HAL_RCC_OscConfig+0x650>)
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	2202      	movs	r2, #2
 80034d8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80034dc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80034e0:	fa92 f2a2 	rbit	r2, r2
 80034e4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80034e8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80034ec:	fab2 f282 	clz	r2, r2
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	f042 0220 	orr.w	r2, r2, #32
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	f002 021f 	and.w	r2, r2, #31
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_RCC_OscConfig+0x3cc>
 8003508:	1d3b      	adds	r3, r7, #4
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d002      	beq.n	8003518 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f000 bd1b 	b.w	8003f4e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003518:	4ba0      	ldr	r3, [pc, #640]	; (800379c <HAL_RCC_OscConfig+0x650>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003520:	1d3b      	adds	r3, r7, #4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	21f8      	movs	r1, #248	; 0xf8
 8003528:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003530:	fa91 f1a1 	rbit	r1, r1
 8003534:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003538:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800353c:	fab1 f181 	clz	r1, r1
 8003540:	b2c9      	uxtb	r1, r1
 8003542:	408b      	lsls	r3, r1
 8003544:	4995      	ldr	r1, [pc, #596]	; (800379c <HAL_RCC_OscConfig+0x650>)
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	e0f5      	b.n	8003738 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8085 	beq.w	8003662 <HAL_RCC_OscConfig+0x516>
 8003558:	2301      	movs	r3, #1
 800355a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800356a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003578:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	461a      	mov	r2, r3
 8003580:	2301      	movs	r3, #1
 8003582:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fd ff98 	bl	80014b8 <HAL_GetTick>
 8003588:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358e:	f7fd ff93 	bl	80014b8 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d902      	bls.n	80035a4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	f000 bcd5 	b.w	8003f4e <HAL_RCC_OscConfig+0xe02>
 80035a4:	2302      	movs	r3, #2
 80035a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80035b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d102      	bne.n	80035d4 <HAL_RCC_OscConfig+0x488>
 80035ce:	4b73      	ldr	r3, [pc, #460]	; (800379c <HAL_RCC_OscConfig+0x650>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	e013      	b.n	80035fc <HAL_RCC_OscConfig+0x4b0>
 80035d4:	2302      	movs	r3, #2
 80035d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035e6:	2302      	movs	r3, #2
 80035e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80035f8:	4b68      	ldr	r3, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x650>)
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	2202      	movs	r2, #2
 80035fe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003602:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003606:	fa92 f2a2 	rbit	r2, r2
 800360a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800360e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003612:	fab2 f282 	clz	r2, r2
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f042 0220 	orr.w	r2, r2, #32
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	f002 021f 	and.w	r2, r2, #31
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f202 	lsl.w	r2, r1, r2
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0af      	beq.n	800358e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x650>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	21f8      	movs	r1, #248	; 0xf8
 800363e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003646:	fa91 f1a1 	rbit	r1, r1
 800364a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800364e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003652:	fab1 f181 	clz	r1, r1
 8003656:	b2c9      	uxtb	r1, r1
 8003658:	408b      	lsls	r3, r1
 800365a:	4950      	ldr	r1, [pc, #320]	; (800379c <HAL_RCC_OscConfig+0x650>)
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
 8003660:	e06a      	b.n	8003738 <HAL_RCC_OscConfig+0x5ec>
 8003662:	2301      	movs	r3, #1
 8003664:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003674:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003682:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	461a      	mov	r2, r3
 800368a:	2300      	movs	r3, #0
 800368c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fd ff13 	bl	80014b8 <HAL_GetTick>
 8003692:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003698:	f7fd ff0e 	bl	80014b8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d902      	bls.n	80036ae <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	f000 bc50 	b.w	8003f4e <HAL_RCC_OscConfig+0xe02>
 80036ae:	2302      	movs	r3, #2
 80036b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80036c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c4:	fab3 f383 	clz	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d102      	bne.n	80036de <HAL_RCC_OscConfig+0x592>
 80036d8:	4b30      	ldr	r3, [pc, #192]	; (800379c <HAL_RCC_OscConfig+0x650>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	e013      	b.n	8003706 <HAL_RCC_OscConfig+0x5ba>
 80036de:	2302      	movs	r3, #2
 80036e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036f0:	2302      	movs	r3, #2
 80036f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003702:	4b26      	ldr	r3, [pc, #152]	; (800379c <HAL_RCC_OscConfig+0x650>)
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2202      	movs	r2, #2
 8003708:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800370c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003710:	fa92 f2a2 	rbit	r2, r2
 8003714:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003718:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800371c:	fab2 f282 	clz	r2, r2
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f042 0220 	orr.w	r2, r2, #32
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	f002 021f 	and.w	r2, r2, #31
 800372c:	2101      	movs	r1, #1
 800372e:	fa01 f202 	lsl.w	r2, r1, r2
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1af      	bne.n	8003698 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80da 	beq.w	80038fc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d069      	beq.n	8003826 <HAL_RCC_OscConfig+0x6da>
 8003752:	2301      	movs	r3, #1
 8003754:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_OscConfig+0x654>)
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	461a      	mov	r2, r3
 8003778:	2301      	movs	r3, #1
 800377a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377c:	f7fd fe9c 	bl	80014b8 <HAL_GetTick>
 8003780:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003784:	e00e      	b.n	80037a4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003786:	f7fd fe97 	bl	80014b8 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d906      	bls.n	80037a4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e3d9      	b.n	8003f4e <HAL_RCC_OscConfig+0xe02>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
 80037a0:	10908120 	.word	0x10908120
 80037a4:	2302      	movs	r3, #2
 80037a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80037ba:	2202      	movs	r2, #2
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	fa93 f2a3 	rbit	r2, r3
 80037c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80037d2:	2202      	movs	r2, #2
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	fa93 f2a3 	rbit	r2, r3
 80037e0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80037e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e6:	4ba5      	ldr	r3, [pc, #660]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80037e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80037ee:	2102      	movs	r1, #2
 80037f0:	6019      	str	r1, [r3, #0]
 80037f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	fa93 f1a3 	rbit	r1, r3
 80037fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003800:	6019      	str	r1, [r3, #0]
  return result;
 8003802:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0b0      	beq.n	8003786 <HAL_RCC_OscConfig+0x63a>
 8003824:	e06a      	b.n	80038fc <HAL_RCC_OscConfig+0x7b0>
 8003826:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	fa93 f2a3 	rbit	r2, r3
 8003838:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800383c:	601a      	str	r2, [r3, #0]
  return result;
 800383e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003842:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	4b8c      	ldr	r3, [pc, #560]	; (8003a80 <HAL_RCC_OscConfig+0x934>)
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	461a      	mov	r2, r3
 8003854:	2300      	movs	r3, #0
 8003856:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003858:	f7fd fe2e 	bl	80014b8 <HAL_GetTick>
 800385c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003860:	e009      	b.n	8003876 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003862:	f7fd fe29 	bl	80014b8 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e36b      	b.n	8003f4e <HAL_RCC_OscConfig+0xe02>
 8003876:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800387a:	2202      	movs	r2, #2
 800387c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	fa93 f2a3 	rbit	r2, r3
 8003888:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003892:	2202      	movs	r2, #2
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	fa93 f2a3 	rbit	r2, r3
 80038a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80038aa:	2202      	movs	r2, #2
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	fa93 f2a3 	rbit	r2, r3
 80038b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038be:	4b6f      	ldr	r3, [pc, #444]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80038c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80038c6:	2102      	movs	r1, #2
 80038c8:	6019      	str	r1, [r3, #0]
 80038ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	fa93 f1a3 	rbit	r1, r3
 80038d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80038d8:	6019      	str	r1, [r3, #0]
  return result;
 80038da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fab3 f383 	clz	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	2101      	movs	r1, #1
 80038f2:	fa01 f303 	lsl.w	r3, r1, r3
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1b2      	bne.n	8003862 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fc:	1d3b      	adds	r3, r7, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8158 	beq.w	8003bbc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390c:	2300      	movs	r3, #0
 800390e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003912:	4b5a      	ldr	r3, [pc, #360]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d112      	bne.n	8003944 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	4b57      	ldr	r3, [pc, #348]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	4a56      	ldr	r2, [pc, #344]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	61d3      	str	r3, [r2, #28]
 800392a:	4b54      	ldr	r3, [pc, #336]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003932:	f107 0308 	add.w	r3, r7, #8
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f107 0308 	add.w	r3, r7, #8
 800393c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4b4f      	ldr	r3, [pc, #316]	; (8003a84 <HAL_RCC_OscConfig+0x938>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11a      	bne.n	8003986 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003950:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <HAL_RCC_OscConfig+0x938>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a4b      	ldr	r2, [pc, #300]	; (8003a84 <HAL_RCC_OscConfig+0x938>)
 8003956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395c:	f7fd fdac 	bl	80014b8 <HAL_GetTick>
 8003960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003964:	e009      	b.n	800397a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003966:	f7fd fda7 	bl	80014b8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e2e9      	b.n	8003f4e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397a:	4b42      	ldr	r3, [pc, #264]	; (8003a84 <HAL_RCC_OscConfig+0x938>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0ef      	beq.n	8003966 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003986:	1d3b      	adds	r3, r7, #4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d106      	bne.n	800399e <HAL_RCC_OscConfig+0x852>
 8003990:	4b3a      	ldr	r3, [pc, #232]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4a39      	ldr	r2, [pc, #228]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6213      	str	r3, [r2, #32]
 800399c:	e02f      	b.n	80039fe <HAL_RCC_OscConfig+0x8b2>
 800399e:	1d3b      	adds	r3, r7, #4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10c      	bne.n	80039c2 <HAL_RCC_OscConfig+0x876>
 80039a8:	4b34      	ldr	r3, [pc, #208]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4a33      	ldr	r2, [pc, #204]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	6213      	str	r3, [r2, #32]
 80039b4:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	4a30      	ldr	r2, [pc, #192]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80039ba:	f023 0304 	bic.w	r3, r3, #4
 80039be:	6213      	str	r3, [r2, #32]
 80039c0:	e01d      	b.n	80039fe <HAL_RCC_OscConfig+0x8b2>
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d10c      	bne.n	80039e6 <HAL_RCC_OscConfig+0x89a>
 80039cc:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80039d2:	f043 0304 	orr.w	r3, r3, #4
 80039d6:	6213      	str	r3, [r2, #32]
 80039d8:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4a27      	ldr	r2, [pc, #156]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6213      	str	r3, [r2, #32]
 80039e4:	e00b      	b.n	80039fe <HAL_RCC_OscConfig+0x8b2>
 80039e6:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a24      	ldr	r2, [pc, #144]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	6213      	str	r3, [r2, #32]
 80039f2:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4a21      	ldr	r2, [pc, #132]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d06b      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a08:	f7fd fd56 	bl	80014b8 <HAL_GetTick>
 8003a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a10:	e00b      	b.n	8003a2a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f7fd fd51 	bl	80014b8 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e291      	b.n	8003f4e <HAL_RCC_OscConfig+0xe02>
 8003a2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003a2e:	2202      	movs	r2, #2
 8003a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	fa93 f2a3 	rbit	r2, r3
 8003a3c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003a46:	2202      	movs	r2, #2
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	fa93 f2a3 	rbit	r2, r3
 8003a54:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003a58:	601a      	str	r2, [r3, #0]
  return result;
 8003a5a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003a5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f043 0302 	orr.w	r3, r3, #2
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d109      	bne.n	8003a88 <HAL_RCC_OscConfig+0x93c>
 8003a74:	4b01      	ldr	r3, [pc, #4]	; (8003a7c <HAL_RCC_OscConfig+0x930>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	e014      	b.n	8003aa4 <HAL_RCC_OscConfig+0x958>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	10908120 	.word	0x10908120
 8003a84:	40007000 	.word	0x40007000
 8003a88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	fa93 f2a3 	rbit	r2, r3
 8003a9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	4bbb      	ldr	r3, [pc, #748]	; (8003d90 <HAL_RCC_OscConfig+0xc44>)
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	6011      	str	r1, [r2, #0]
 8003aac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	fa92 f1a2 	rbit	r1, r2
 8003ab6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003aba:	6011      	str	r1, [r2, #0]
  return result;
 8003abc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	fab2 f282 	clz	r2, r2
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	f002 021f 	and.w	r2, r2, #31
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d099      	beq.n	8003a12 <HAL_RCC_OscConfig+0x8c6>
 8003ade:	e063      	b.n	8003ba8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae0:	f7fd fcea 	bl	80014b8 <HAL_GetTick>
 8003ae4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae8:	e00b      	b.n	8003b02 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aea:	f7fd fce5 	bl	80014b8 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e225      	b.n	8003f4e <HAL_RCC_OscConfig+0xe02>
 8003b02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b06:	2202      	movs	r2, #2
 8003b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	fa93 f2a3 	rbit	r2, r3
 8003b14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b1e:	2202      	movs	r2, #2
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	fa93 f2a3 	rbit	r2, r3
 8003b2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b30:	601a      	str	r2, [r3, #0]
  return result;
 8003b32:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b38:	fab3 f383 	clz	r3, r3
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	f043 0302 	orr.w	r3, r3, #2
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d102      	bne.n	8003b52 <HAL_RCC_OscConfig+0xa06>
 8003b4c:	4b90      	ldr	r3, [pc, #576]	; (8003d90 <HAL_RCC_OscConfig+0xc44>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	e00d      	b.n	8003b6e <HAL_RCC_OscConfig+0xa22>
 8003b52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003b56:	2202      	movs	r2, #2
 8003b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	fa93 f2a3 	rbit	r2, r3
 8003b64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	4b89      	ldr	r3, [pc, #548]	; (8003d90 <HAL_RCC_OscConfig+0xc44>)
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003b72:	2102      	movs	r1, #2
 8003b74:	6011      	str	r1, [r2, #0]
 8003b76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	fa92 f1a2 	rbit	r1, r2
 8003b80:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003b84:	6011      	str	r1, [r2, #0]
  return result;
 8003b86:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	fab2 f282 	clz	r2, r2
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f002 021f 	and.w	r2, r2, #31
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1a0      	bne.n	8003aea <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ba8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d105      	bne.n	8003bbc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb0:	4b77      	ldr	r3, [pc, #476]	; (8003d90 <HAL_RCC_OscConfig+0xc44>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	4a76      	ldr	r2, [pc, #472]	; (8003d90 <HAL_RCC_OscConfig+0xc44>)
 8003bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bbc:	1d3b      	adds	r3, r7, #4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 81c2 	beq.w	8003f4c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bc8:	4b71      	ldr	r3, [pc, #452]	; (8003d90 <HAL_RCC_OscConfig+0xc44>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	f000 819c 	beq.w	8003f0e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	f040 8114 	bne.w	8003e0a <HAL_RCC_OscConfig+0xcbe>
 8003be2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003be6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	fa93 f2a3 	rbit	r2, r3
 8003bf6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003bfa:	601a      	str	r2, [r3, #0]
  return result;
 8003bfc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c00:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	461a      	mov	r2, r3
 8003c14:	2300      	movs	r3, #0
 8003c16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fd fc4e 	bl	80014b8 <HAL_GetTick>
 8003c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c20:	e009      	b.n	8003c36 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fd fc49 	bl	80014b8 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e18b      	b.n	8003f4e <HAL_RCC_OscConfig+0xe02>
 8003c36:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	fa93 f2a3 	rbit	r2, r3
 8003c4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003c4e:	601a      	str	r2, [r3, #0]
  return result;
 8003c50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003c54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d102      	bne.n	8003c70 <HAL_RCC_OscConfig+0xb24>
 8003c6a:	4b49      	ldr	r3, [pc, #292]	; (8003d90 <HAL_RCC_OscConfig+0xc44>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	e01b      	b.n	8003ca8 <HAL_RCC_OscConfig+0xb5c>
 8003c70:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f2a3 	rbit	r2, r3
 8003c84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003c8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	fa93 f2a3 	rbit	r2, r3
 8003c9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	4b3a      	ldr	r3, [pc, #232]	; (8003d90 <HAL_RCC_OscConfig+0xc44>)
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003cac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cb0:	6011      	str	r1, [r2, #0]
 8003cb2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	fa92 f1a2 	rbit	r1, r2
 8003cbc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003cc0:	6011      	str	r1, [r2, #0]
  return result;
 8003cc2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	fab2 f282 	clz	r2, r2
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	f042 0220 	orr.w	r2, r2, #32
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	f002 021f 	and.w	r2, r2, #31
 8003cd8:	2101      	movs	r1, #1
 8003cda:	fa01 f202 	lsl.w	r2, r1, r2
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d19e      	bne.n	8003c22 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce4:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <HAL_RCC_OscConfig+0xc44>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cec:	1d3b      	adds	r3, r7, #4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cf2:	1d3b      	adds	r3, r7, #4
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	4925      	ldr	r1, [pc, #148]	; (8003d90 <HAL_RCC_OscConfig+0xc44>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]
 8003d00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	fa93 f2a3 	rbit	r2, r3
 8003d14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d18:	601a      	str	r2, [r3, #0]
  return result;
 8003d1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d1e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	461a      	mov	r2, r3
 8003d32:	2301      	movs	r3, #1
 8003d34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fd fbbf 	bl	80014b8 <HAL_GetTick>
 8003d3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d3e:	e009      	b.n	8003d54 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fd fbba 	bl	80014b8 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e0fc      	b.n	8003f4e <HAL_RCC_OscConfig+0xe02>
 8003d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	fa93 f2a3 	rbit	r2, r3
 8003d68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d6c:	601a      	str	r2, [r3, #0]
  return result;
 8003d6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d74:	fab3 f383 	clz	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d105      	bne.n	8003d94 <HAL_RCC_OscConfig+0xc48>
 8003d88:	4b01      	ldr	r3, [pc, #4]	; (8003d90 <HAL_RCC_OscConfig+0xc44>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	e01e      	b.n	8003dcc <HAL_RCC_OscConfig+0xc80>
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	fa93 f2a3 	rbit	r2, r3
 8003da8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	fa93 f2a3 	rbit	r2, r3
 8003dc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	4b63      	ldr	r3, [pc, #396]	; (8003f58 <HAL_RCC_OscConfig+0xe0c>)
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003dd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dd4:	6011      	str	r1, [r2, #0]
 8003dd6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	fa92 f1a2 	rbit	r1, r2
 8003de0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003de4:	6011      	str	r1, [r2, #0]
  return result;
 8003de6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	fab2 f282 	clz	r2, r2
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	f042 0220 	orr.w	r2, r2, #32
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	f002 021f 	and.w	r2, r2, #31
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d09b      	beq.n	8003d40 <HAL_RCC_OscConfig+0xbf4>
 8003e08:	e0a0      	b.n	8003f4c <HAL_RCC_OscConfig+0xe00>
 8003e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	fa93 f2a3 	rbit	r2, r3
 8003e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e22:	601a      	str	r2, [r3, #0]
  return result;
 8003e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e28:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2a:	fab3 f383 	clz	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fd fb3a 	bl	80014b8 <HAL_GetTick>
 8003e44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e48:	e009      	b.n	8003e5e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4a:	f7fd fb35 	bl	80014b8 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e077      	b.n	8003f4e <HAL_RCC_OscConfig+0xe02>
 8003e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	fa93 f2a3 	rbit	r2, r3
 8003e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e76:	601a      	str	r2, [r3, #0]
  return result;
 8003e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e7e:	fab3 f383 	clz	r3, r3
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d102      	bne.n	8003e98 <HAL_RCC_OscConfig+0xd4c>
 8003e92:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <HAL_RCC_OscConfig+0xe0c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	e01b      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd84>
 8003e98:	f107 0320 	add.w	r3, r7, #32
 8003e9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea2:	f107 0320 	add.w	r3, r7, #32
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	fa93 f2a3 	rbit	r2, r3
 8003eac:	f107 031c 	add.w	r3, r7, #28
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	f107 0318 	add.w	r3, r7, #24
 8003eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	f107 0318 	add.w	r3, r7, #24
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	fa93 f2a3 	rbit	r2, r3
 8003ec6:	f107 0314 	add.w	r3, r7, #20
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <HAL_RCC_OscConfig+0xe0c>)
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f107 0210 	add.w	r2, r7, #16
 8003ed4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ed8:	6011      	str	r1, [r2, #0]
 8003eda:	f107 0210 	add.w	r2, r7, #16
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	fa92 f1a2 	rbit	r1, r2
 8003ee4:	f107 020c 	add.w	r2, r7, #12
 8003ee8:	6011      	str	r1, [r2, #0]
  return result;
 8003eea:	f107 020c 	add.w	r2, r7, #12
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	fab2 f282 	clz	r2, r2
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	f042 0220 	orr.w	r2, r2, #32
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	f002 021f 	and.w	r2, r2, #31
 8003f00:	2101      	movs	r1, #1
 8003f02:	fa01 f202 	lsl.w	r2, r1, r2
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d19e      	bne.n	8003e4a <HAL_RCC_OscConfig+0xcfe>
 8003f0c:	e01e      	b.n	8003f4c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f0e:	1d3b      	adds	r3, r7, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e018      	b.n	8003f4e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f1c:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <HAL_RCC_OscConfig+0xe0c>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f24:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f2c:	1d3b      	adds	r3, r7, #4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d108      	bne.n	8003f48 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003f36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000

08003f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b09e      	sub	sp, #120	; 0x78
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e162      	b.n	800423a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f74:	4b90      	ldr	r3, [pc, #576]	; (80041b8 <HAL_RCC_ClockConfig+0x25c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d910      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b8d      	ldr	r3, [pc, #564]	; (80041b8 <HAL_RCC_ClockConfig+0x25c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 0207 	bic.w	r2, r3, #7
 8003f8a:	498b      	ldr	r1, [pc, #556]	; (80041b8 <HAL_RCC_ClockConfig+0x25c>)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b89      	ldr	r3, [pc, #548]	; (80041b8 <HAL_RCC_ClockConfig+0x25c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e14a      	b.n	800423a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb0:	4b82      	ldr	r3, [pc, #520]	; (80041bc <HAL_RCC_ClockConfig+0x260>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	497f      	ldr	r1, [pc, #508]	; (80041bc <HAL_RCC_ClockConfig+0x260>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80dc 	beq.w	8004188 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d13c      	bne.n	8004052 <HAL_RCC_ClockConfig+0xf6>
 8003fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fdc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe0:	fa93 f3a3 	rbit	r3, r3
 8003fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe8:	fab3 f383 	clz	r3, r3
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d102      	bne.n	8004002 <HAL_RCC_ClockConfig+0xa6>
 8003ffc:	4b6f      	ldr	r3, [pc, #444]	; (80041bc <HAL_RCC_ClockConfig+0x260>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	e00f      	b.n	8004022 <HAL_RCC_ClockConfig+0xc6>
 8004002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004006:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	667b      	str	r3, [r7, #100]	; 0x64
 8004010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004014:	663b      	str	r3, [r7, #96]	; 0x60
 8004016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800401e:	4b67      	ldr	r3, [pc, #412]	; (80041bc <HAL_RCC_ClockConfig+0x260>)
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004026:	65ba      	str	r2, [r7, #88]	; 0x58
 8004028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800402a:	fa92 f2a2 	rbit	r2, r2
 800402e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004032:	fab2 f282 	clz	r2, r2
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	f042 0220 	orr.w	r2, r2, #32
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	f002 021f 	and.w	r2, r2, #31
 8004042:	2101      	movs	r1, #1
 8004044:	fa01 f202 	lsl.w	r2, r1, r2
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d17b      	bne.n	8004146 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e0f3      	b.n	800423a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d13c      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x178>
 800405a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800405e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004062:	fa93 f3a3 	rbit	r3, r3
 8004066:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d102      	bne.n	8004084 <HAL_RCC_ClockConfig+0x128>
 800407e:	4b4f      	ldr	r3, [pc, #316]	; (80041bc <HAL_RCC_ClockConfig+0x260>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	e00f      	b.n	80040a4 <HAL_RCC_ClockConfig+0x148>
 8004084:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004088:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	647b      	str	r3, [r7, #68]	; 0x44
 8004092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004096:	643b      	str	r3, [r7, #64]	; 0x40
 8004098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a0:	4b46      	ldr	r3, [pc, #280]	; (80041bc <HAL_RCC_ClockConfig+0x260>)
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80040aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ac:	fa92 f2a2 	rbit	r2, r2
 80040b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80040b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b4:	fab2 f282 	clz	r2, r2
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	f042 0220 	orr.w	r2, r2, #32
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	f002 021f 	and.w	r2, r2, #31
 80040c4:	2101      	movs	r1, #1
 80040c6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d13a      	bne.n	8004146 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0b2      	b.n	800423a <HAL_RCC_ClockConfig+0x2de>
 80040d4:	2302      	movs	r3, #2
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	fab3 f383 	clz	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d102      	bne.n	80040fc <HAL_RCC_ClockConfig+0x1a0>
 80040f6:	4b31      	ldr	r3, [pc, #196]	; (80041bc <HAL_RCC_ClockConfig+0x260>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	e00d      	b.n	8004118 <HAL_RCC_ClockConfig+0x1bc>
 80040fc:	2302      	movs	r3, #2
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	fa93 f3a3 	rbit	r3, r3
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
 8004108:	2302      	movs	r3, #2
 800410a:	623b      	str	r3, [r7, #32]
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	4b29      	ldr	r3, [pc, #164]	; (80041bc <HAL_RCC_ClockConfig+0x260>)
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2202      	movs	r2, #2
 800411a:	61ba      	str	r2, [r7, #24]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	fa92 f2a2 	rbit	r2, r2
 8004122:	617a      	str	r2, [r7, #20]
  return result;
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	fab2 f282 	clz	r2, r2
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	f042 0220 	orr.w	r2, r2, #32
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	f002 021f 	and.w	r2, r2, #31
 8004136:	2101      	movs	r1, #1
 8004138:	fa01 f202 	lsl.w	r2, r1, r2
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e079      	b.n	800423a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004146:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <HAL_RCC_ClockConfig+0x260>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	491a      	ldr	r1, [pc, #104]	; (80041bc <HAL_RCC_ClockConfig+0x260>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004158:	f7fd f9ae 	bl	80014b8 <HAL_GetTick>
 800415c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fd f9aa 	bl	80014b8 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e061      	b.n	800423a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	4b11      	ldr	r3, [pc, #68]	; (80041bc <HAL_RCC_ClockConfig+0x260>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 020c 	and.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	429a      	cmp	r2, r3
 8004186:	d1eb      	bne.n	8004160 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_ClockConfig+0x25c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d214      	bcs.n	80041c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <HAL_RCC_ClockConfig+0x25c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 0207 	bic.w	r2, r3, #7
 800419e:	4906      	ldr	r1, [pc, #24]	; (80041b8 <HAL_RCC_ClockConfig+0x25c>)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <HAL_RCC_ClockConfig+0x25c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e040      	b.n	800423a <HAL_RCC_ClockConfig+0x2de>
 80041b8:	40022000 	.word	0x40022000
 80041bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041cc:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <HAL_RCC_ClockConfig+0x2e8>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	491a      	ldr	r1, [pc, #104]	; (8004244 <HAL_RCC_ClockConfig+0x2e8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ea:	4b16      	ldr	r3, [pc, #88]	; (8004244 <HAL_RCC_ClockConfig+0x2e8>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4912      	ldr	r1, [pc, #72]	; (8004244 <HAL_RCC_ClockConfig+0x2e8>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80041fe:	f000 f829 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004202:	4601      	mov	r1, r0
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <HAL_RCC_ClockConfig+0x2e8>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800420c:	22f0      	movs	r2, #240	; 0xf0
 800420e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	fa92 f2a2 	rbit	r2, r2
 8004216:	60fa      	str	r2, [r7, #12]
  return result;
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	fab2 f282 	clz	r2, r2
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	40d3      	lsrs	r3, r2
 8004222:	4a09      	ldr	r2, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x2ec>)
 8004224:	5cd3      	ldrb	r3, [r2, r3]
 8004226:	fa21 f303 	lsr.w	r3, r1, r3
 800422a:	4a08      	ldr	r2, [pc, #32]	; (800424c <HAL_RCC_ClockConfig+0x2f0>)
 800422c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800422e:	4b08      	ldr	r3, [pc, #32]	; (8004250 <HAL_RCC_ClockConfig+0x2f4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fd f8fc 	bl	8001430 <HAL_InitTick>
  
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3778      	adds	r7, #120	; 0x78
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	08007028 	.word	0x08007028
 800424c:	20000008 	.word	0x20000008
 8004250:	2000000c 	.word	0x2000000c

08004254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	b08b      	sub	sp, #44	; 0x2c
 8004258:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	2300      	movs	r3, #0
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800426e:	4b29      	ldr	r3, [pc, #164]	; (8004314 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b04      	cmp	r3, #4
 800427c:	d002      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x30>
 800427e:	2b08      	cmp	r3, #8
 8004280:	d003      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0x36>
 8004282:	e03c      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004284:	4b24      	ldr	r3, [pc, #144]	; (8004318 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004286:	623b      	str	r3, [r7, #32]
      break;
 8004288:	e03c      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004290:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004294:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	fa92 f2a2 	rbit	r2, r2
 800429c:	607a      	str	r2, [r7, #4]
  return result;
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	fab2 f282 	clz	r2, r2
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	40d3      	lsrs	r3, r2
 80042a8:	4a1c      	ldr	r2, [pc, #112]	; (800431c <HAL_RCC_GetSysClockFreq+0xc8>)
 80042aa:	5cd3      	ldrb	r3, [r2, r3]
 80042ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80042ae:	4b19      	ldr	r3, [pc, #100]	; (8004314 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	220f      	movs	r2, #15
 80042b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	fa92 f2a2 	rbit	r2, r2
 80042c0:	60fa      	str	r2, [r7, #12]
  return result;
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	fab2 f282 	clz	r2, r2
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	40d3      	lsrs	r3, r2
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <HAL_RCC_GetSysClockFreq+0xcc>)
 80042ce:	5cd3      	ldrb	r3, [r2, r3]
 80042d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042dc:	4a0e      	ldr	r2, [pc, #56]	; (8004318 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
 80042ec:	e004      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	4a0c      	ldr	r2, [pc, #48]	; (8004324 <HAL_RCC_GetSysClockFreq+0xd0>)
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	623b      	str	r3, [r7, #32]
      break;
 80042fc:	e002      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004300:	623b      	str	r3, [r7, #32]
      break;
 8004302:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004304:	6a3b      	ldr	r3, [r7, #32]
}
 8004306:	4618      	mov	r0, r3
 8004308:	372c      	adds	r7, #44	; 0x2c
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	007a1200 	.word	0x007a1200
 800431c:	08007040 	.word	0x08007040
 8004320:	08007050 	.word	0x08007050
 8004324:	003d0900 	.word	0x003d0900

08004328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <HAL_RCC_GetHCLKFreq+0x14>)
 800432e:	681b      	ldr	r3, [r3, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000008 	.word	0x20000008

08004340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004346:	f7ff ffef 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 800434a:	4601      	mov	r1, r0
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004354:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004358:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	fa92 f2a2 	rbit	r2, r2
 8004360:	603a      	str	r2, [r7, #0]
  return result;
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	fab2 f282 	clz	r2, r2
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	40d3      	lsrs	r3, r2
 800436c:	4a04      	ldr	r2, [pc, #16]	; (8004380 <HAL_RCC_GetPCLK1Freq+0x40>)
 800436e:	5cd3      	ldrb	r3, [r2, r3]
 8004370:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	08007038 	.word	0x08007038

08004384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800438a:	f7ff ffcd 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 800438e:	4601      	mov	r1, r0
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004398:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800439c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	fa92 f2a2 	rbit	r2, r2
 80043a4:	603a      	str	r2, [r7, #0]
  return result;
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	fab2 f282 	clz	r2, r2
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	40d3      	lsrs	r3, r2
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80043b2:	5cd3      	ldrb	r3, [r2, r3]
 80043b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40021000 	.word	0x40021000
 80043c4:	08007038 	.word	0x08007038

080043c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b092      	sub	sp, #72	; 0x48
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80043d8:	2300      	movs	r3, #0
 80043da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80cd 	beq.w	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ec:	4b86      	ldr	r3, [pc, #536]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10e      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f8:	4b83      	ldr	r3, [pc, #524]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	4a82      	ldr	r2, [pc, #520]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004402:	61d3      	str	r3, [r2, #28]
 8004404:	4b80      	ldr	r3, [pc, #512]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004410:	2301      	movs	r3, #1
 8004412:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004416:	4b7d      	ldr	r3, [pc, #500]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d118      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004422:	4b7a      	ldr	r3, [pc, #488]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a79      	ldr	r2, [pc, #484]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800442e:	f7fd f843 	bl	80014b8 <HAL_GetTick>
 8004432:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004434:	e008      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004436:	f7fd f83f 	bl	80014b8 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b64      	cmp	r3, #100	; 0x64
 8004442:	d901      	bls.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e0db      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	4b70      	ldr	r3, [pc, #448]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004454:	4b6c      	ldr	r3, [pc, #432]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800445e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d07d      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800446e:	429a      	cmp	r2, r3
 8004470:	d076      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004472:	4b65      	ldr	r3, [pc, #404]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800447c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004480:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800448c:	fab3 f383 	clz	r3, r3
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	4b5e      	ldr	r3, [pc, #376]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	461a      	mov	r2, r3
 800449c:	2301      	movs	r3, #1
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80044ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044b0:	fab3 f383 	clz	r3, r3
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	4b55      	ldr	r3, [pc, #340]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	461a      	mov	r2, r3
 80044c0:	2300      	movs	r3, #0
 80044c2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044c4:	4a50      	ldr	r2, [pc, #320]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d045      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fc fff0 	bl	80014b8 <HAL_GetTick>
 80044d8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044da:	e00a      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044dc:	f7fc ffec 	bl	80014b8 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e086      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80044f2:	2302      	movs	r3, #2
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	fa93 f3a3 	rbit	r3, r3
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
 80044fe:	2302      	movs	r3, #2
 8004500:	623b      	str	r3, [r7, #32]
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	fa93 f3a3 	rbit	r3, r3
 8004508:	61fb      	str	r3, [r7, #28]
  return result;
 800450a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	fab3 f383 	clz	r3, r3
 8004510:	b2db      	uxtb	r3, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f043 0302 	orr.w	r3, r3, #2
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d102      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004520:	4b39      	ldr	r3, [pc, #228]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	e007      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004526:	2302      	movs	r3, #2
 8004528:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	fa93 f3a3 	rbit	r3, r3
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	4b35      	ldr	r3, [pc, #212]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	2202      	movs	r2, #2
 8004538:	613a      	str	r2, [r7, #16]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	fa92 f2a2 	rbit	r2, r2
 8004540:	60fa      	str	r2, [r7, #12]
  return result;
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	fab2 f282 	clz	r2, r2
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	f002 021f 	and.w	r2, r2, #31
 8004554:	2101      	movs	r1, #1
 8004556:	fa01 f202 	lsl.w	r2, r1, r2
 800455a:	4013      	ands	r3, r2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0bd      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004560:	4b29      	ldr	r3, [pc, #164]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4926      	ldr	r1, [pc, #152]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800456e:	4313      	orrs	r3, r2
 8004570:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004572:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800457a:	4b23      	ldr	r3, [pc, #140]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	4a22      	ldr	r2, [pc, #136]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004584:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004592:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	f023 0203 	bic.w	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	491a      	ldr	r1, [pc, #104]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045b0:	4b15      	ldr	r3, [pc, #84]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	f023 0210 	bic.w	r2, r3, #16
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4912      	ldr	r1, [pc, #72]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045ce:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	490b      	ldr	r1, [pc, #44]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	4903      	ldr	r1, [pc, #12]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3748      	adds	r7, #72	; 0x48
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000
 800460c:	40007000 	.word	0x40007000
 8004610:	10908100 	.word	0x10908100

08004614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e049      	b.n	80046ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fc fd08 	bl	8001050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f000 fe8a 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d001      	beq.n	80046dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e038      	b.n	800474e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1c      	ldr	r2, [pc, #112]	; (800475c <HAL_TIM_Base_Start+0x98>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00e      	beq.n	800470c <HAL_TIM_Base_Start+0x48>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f6:	d009      	beq.n	800470c <HAL_TIM_Base_Start+0x48>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a18      	ldr	r2, [pc, #96]	; (8004760 <HAL_TIM_Base_Start+0x9c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d004      	beq.n	800470c <HAL_TIM_Base_Start+0x48>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a17      	ldr	r2, [pc, #92]	; (8004764 <HAL_TIM_Base_Start+0xa0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d115      	bne.n	8004738 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	4b15      	ldr	r3, [pc, #84]	; (8004768 <HAL_TIM_Base_Start+0xa4>)
 8004714:	4013      	ands	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b06      	cmp	r3, #6
 800471c:	d015      	beq.n	800474a <HAL_TIM_Base_Start+0x86>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004724:	d011      	beq.n	800474a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004736:	e008      	b.n	800474a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	e000      	b.n	800474c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40000400 	.word	0x40000400
 8004764:	40014000 	.word	0x40014000
 8004768:	00010007 	.word	0x00010007

0800476c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d001      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e040      	b.n	8004806 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1c      	ldr	r2, [pc, #112]	; (8004814 <HAL_TIM_Base_Start_IT+0xa8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00e      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x58>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ae:	d009      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x58>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a18      	ldr	r2, [pc, #96]	; (8004818 <HAL_TIM_Base_Start_IT+0xac>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x58>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a17      	ldr	r2, [pc, #92]	; (800481c <HAL_TIM_Base_Start_IT+0xb0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d115      	bne.n	80047f0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	4b15      	ldr	r3, [pc, #84]	; (8004820 <HAL_TIM_Base_Start_IT+0xb4>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b06      	cmp	r3, #6
 80047d4:	d015      	beq.n	8004802 <HAL_TIM_Base_Start_IT+0x96>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047dc:	d011      	beq.n	8004802 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ee:	e008      	b.n	8004802 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	e000      	b.n	8004804 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004802:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40012c00 	.word	0x40012c00
 8004818:	40000400 	.word	0x40000400
 800481c:	40014000 	.word	0x40014000
 8004820:	00010007 	.word	0x00010007

08004824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e049      	b.n	80048ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f841 	bl	80048d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3304      	adds	r3, #4
 8004860:	4619      	mov	r1, r3
 8004862:	4610      	mov	r0, r2
 8004864:	f000 fd82 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <HAL_TIM_PWM_Start+0x24>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	e03c      	b.n	8004986 <HAL_TIM_PWM_Start+0x9e>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b04      	cmp	r3, #4
 8004910:	d109      	bne.n	8004926 <HAL_TIM_PWM_Start+0x3e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b01      	cmp	r3, #1
 800491c:	bf14      	ite	ne
 800491e:	2301      	movne	r3, #1
 8004920:	2300      	moveq	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	e02f      	b.n	8004986 <HAL_TIM_PWM_Start+0x9e>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d109      	bne.n	8004940 <HAL_TIM_PWM_Start+0x58>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	bf14      	ite	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2300      	moveq	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	e022      	b.n	8004986 <HAL_TIM_PWM_Start+0x9e>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b0c      	cmp	r3, #12
 8004944:	d109      	bne.n	800495a <HAL_TIM_PWM_Start+0x72>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b01      	cmp	r3, #1
 8004950:	bf14      	ite	ne
 8004952:	2301      	movne	r3, #1
 8004954:	2300      	moveq	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	e015      	b.n	8004986 <HAL_TIM_PWM_Start+0x9e>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b10      	cmp	r3, #16
 800495e:	d109      	bne.n	8004974 <HAL_TIM_PWM_Start+0x8c>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	bf14      	ite	ne
 800496c:	2301      	movne	r3, #1
 800496e:	2300      	moveq	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	e008      	b.n	8004986 <HAL_TIM_PWM_Start+0x9e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e088      	b.n	8004aa0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d104      	bne.n	800499e <HAL_TIM_PWM_Start+0xb6>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800499c:	e023      	b.n	80049e6 <HAL_TIM_PWM_Start+0xfe>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_PWM_Start+0xc6>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ac:	e01b      	b.n	80049e6 <HAL_TIM_PWM_Start+0xfe>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d104      	bne.n	80049be <HAL_TIM_PWM_Start+0xd6>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049bc:	e013      	b.n	80049e6 <HAL_TIM_PWM_Start+0xfe>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	d104      	bne.n	80049ce <HAL_TIM_PWM_Start+0xe6>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049cc:	e00b      	b.n	80049e6 <HAL_TIM_PWM_Start+0xfe>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d104      	bne.n	80049de <HAL_TIM_PWM_Start+0xf6>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049dc:	e003      	b.n	80049e6 <HAL_TIM_PWM_Start+0xfe>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2202      	movs	r2, #2
 80049e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2201      	movs	r2, #1
 80049ec:	6839      	ldr	r1, [r7, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f001 f874 	bl	8005adc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a2b      	ldr	r2, [pc, #172]	; (8004aa8 <HAL_TIM_PWM_Start+0x1c0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00e      	beq.n	8004a1c <HAL_TIM_PWM_Start+0x134>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a2a      	ldr	r2, [pc, #168]	; (8004aac <HAL_TIM_PWM_Start+0x1c4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d009      	beq.n	8004a1c <HAL_TIM_PWM_Start+0x134>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a28      	ldr	r2, [pc, #160]	; (8004ab0 <HAL_TIM_PWM_Start+0x1c8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d004      	beq.n	8004a1c <HAL_TIM_PWM_Start+0x134>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <HAL_TIM_PWM_Start+0x1cc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIM_PWM_Start+0x138>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <HAL_TIM_PWM_Start+0x13a>
 8004a20:	2300      	movs	r3, #0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <HAL_TIM_PWM_Start+0x1c0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00e      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x176>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a48:	d009      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x176>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1a      	ldr	r2, [pc, #104]	; (8004ab8 <HAL_TIM_PWM_Start+0x1d0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x176>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a14      	ldr	r2, [pc, #80]	; (8004aac <HAL_TIM_PWM_Start+0x1c4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d115      	bne.n	8004a8a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <HAL_TIM_PWM_Start+0x1d4>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d015      	beq.n	8004a9c <HAL_TIM_PWM_Start+0x1b4>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a76:	d011      	beq.n	8004a9c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a88:	e008      	b.n	8004a9c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e000      	b.n	8004a9e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	00010007 	.word	0x00010007

08004ac0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <HAL_TIM_PWM_Start_IT+0x28>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e03c      	b.n	8004b62 <HAL_TIM_PWM_Start_IT+0xa2>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d109      	bne.n	8004b02 <HAL_TIM_PWM_Start_IT+0x42>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	bf14      	ite	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	2300      	moveq	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e02f      	b.n	8004b62 <HAL_TIM_PWM_Start_IT+0xa2>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d109      	bne.n	8004b1c <HAL_TIM_PWM_Start_IT+0x5c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e022      	b.n	8004b62 <HAL_TIM_PWM_Start_IT+0xa2>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	d109      	bne.n	8004b36 <HAL_TIM_PWM_Start_IT+0x76>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	bf14      	ite	ne
 8004b2e:	2301      	movne	r3, #1
 8004b30:	2300      	moveq	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	e015      	b.n	8004b62 <HAL_TIM_PWM_Start_IT+0xa2>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d109      	bne.n	8004b50 <HAL_TIM_PWM_Start_IT+0x90>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	bf14      	ite	ne
 8004b48:	2301      	movne	r3, #1
 8004b4a:	2300      	moveq	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e008      	b.n	8004b62 <HAL_TIM_PWM_Start_IT+0xa2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e0d3      	b.n	8004d12 <HAL_TIM_PWM_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_PWM_Start_IT+0xba>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b78:	e023      	b.n	8004bc2 <HAL_TIM_PWM_Start_IT+0x102>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_PWM_Start_IT+0xca>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b88:	e01b      	b.n	8004bc2 <HAL_TIM_PWM_Start_IT+0x102>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Start_IT+0xda>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b98:	e013      	b.n	8004bc2 <HAL_TIM_PWM_Start_IT+0x102>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start_IT+0xea>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ba8:	e00b      	b.n	8004bc2 <HAL_TIM_PWM_Start_IT+0x102>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_PWM_Start_IT+0xfa>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb8:	e003      	b.n	8004bc2 <HAL_TIM_PWM_Start_IT+0x102>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d841      	bhi.n	8004c4c <HAL_TIM_PWM_Start_IT+0x18c>
 8004bc8:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <HAL_TIM_PWM_Start_IT+0x110>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004c05 	.word	0x08004c05
 8004bd4:	08004c4d 	.word	0x08004c4d
 8004bd8:	08004c4d 	.word	0x08004c4d
 8004bdc:	08004c4d 	.word	0x08004c4d
 8004be0:	08004c17 	.word	0x08004c17
 8004be4:	08004c4d 	.word	0x08004c4d
 8004be8:	08004c4d 	.word	0x08004c4d
 8004bec:	08004c4d 	.word	0x08004c4d
 8004bf0:	08004c29 	.word	0x08004c29
 8004bf4:	08004c4d 	.word	0x08004c4d
 8004bf8:	08004c4d 	.word	0x08004c4d
 8004bfc:	08004c4d 	.word	0x08004c4d
 8004c00:	08004c3b 	.word	0x08004c3b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0202 	orr.w	r2, r2, #2
 8004c12:	60da      	str	r2, [r3, #12]
      break;
 8004c14:	e01d      	b.n	8004c52 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0204 	orr.w	r2, r2, #4
 8004c24:	60da      	str	r2, [r3, #12]
      break;
 8004c26:	e014      	b.n	8004c52 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0208 	orr.w	r2, r2, #8
 8004c36:	60da      	str	r2, [r3, #12]
      break;
 8004c38:	e00b      	b.n	8004c52 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0210 	orr.w	r2, r2, #16
 8004c48:	60da      	str	r2, [r3, #12]
      break;
 8004c4a:	e002      	b.n	8004c52 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c50:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d15b      	bne.n	8004d10 <HAL_TIM_PWM_Start_IT+0x250>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	6839      	ldr	r1, [r7, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 ff3b 	bl	8005adc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2c      	ldr	r2, [pc, #176]	; (8004d1c <HAL_TIM_PWM_Start_IT+0x25c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_TIM_PWM_Start_IT+0x1ce>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <HAL_TIM_PWM_Start_IT+0x260>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d009      	beq.n	8004c8e <HAL_TIM_PWM_Start_IT+0x1ce>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <HAL_TIM_PWM_Start_IT+0x264>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_TIM_PWM_Start_IT+0x1ce>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a27      	ldr	r2, [pc, #156]	; (8004d28 <HAL_TIM_PWM_Start_IT+0x268>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_PWM_Start_IT+0x1d2>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <HAL_TIM_PWM_Start_IT+0x1d4>
 8004c92:	2300      	movs	r3, #0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <HAL_TIM_PWM_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ca6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <HAL_TIM_PWM_Start_IT+0x25c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00e      	beq.n	8004cd0 <HAL_TIM_PWM_Start_IT+0x210>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cba:	d009      	beq.n	8004cd0 <HAL_TIM_PWM_Start_IT+0x210>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1a      	ldr	r2, [pc, #104]	; (8004d2c <HAL_TIM_PWM_Start_IT+0x26c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d004      	beq.n	8004cd0 <HAL_TIM_PWM_Start_IT+0x210>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <HAL_TIM_PWM_Start_IT+0x260>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d115      	bne.n	8004cfc <HAL_TIM_PWM_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	4b16      	ldr	r3, [pc, #88]	; (8004d30 <HAL_TIM_PWM_Start_IT+0x270>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b06      	cmp	r3, #6
 8004ce0:	d015      	beq.n	8004d0e <HAL_TIM_PWM_Start_IT+0x24e>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce8:	d011      	beq.n	8004d0e <HAL_TIM_PWM_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfa:	e008      	b.n	8004d0e <HAL_TIM_PWM_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	e000      	b.n	8004d10 <HAL_TIM_PWM_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	00010007 	.word	0x00010007

08004d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d122      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d11b      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0202 	mvn.w	r2, #2
 8004d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fae3 	bl	8005342 <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fad5 	bl	800532e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fb fa6d 	bl	8000264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d122      	bne.n	8004de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d11b      	bne.n	8004de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0204 	mvn.w	r2, #4
 8004db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fab9 	bl	8005342 <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 faab 	bl	800532e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7fb fa43 	bl	8000264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d122      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d11b      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0208 	mvn.w	r2, #8
 8004e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fa8f 	bl	8005342 <HAL_TIM_IC_CaptureCallback>
 8004e24:	e005      	b.n	8004e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fa81 	bl	800532e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fb fa19 	bl	8000264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d122      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d11b      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0210 	mvn.w	r2, #16
 8004e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2208      	movs	r2, #8
 8004e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa65 	bl	8005342 <HAL_TIM_IC_CaptureCallback>
 8004e78:	e005      	b.n	8004e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fa57 	bl	800532e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7fb f9ef 	bl	8000264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10e      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d107      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0201 	mvn.w	r2, #1
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fb f9b8 	bl	8000228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 ff12 	bl	8005d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef2:	d10e      	bne.n	8004f12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b80      	cmp	r3, #128	; 0x80
 8004f00:	d107      	bne.n	8004f12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 ff05 	bl	8005d1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d10e      	bne.n	8004f3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2a:	2b40      	cmp	r3, #64	; 0x40
 8004f2c:	d107      	bne.n	8004f3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fa0c 	bl	8005356 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d10e      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d107      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f06f 0220 	mvn.w	r2, #32
 8004f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fec5 	bl	8005cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e0ff      	b.n	8005192 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b14      	cmp	r3, #20
 8004f9e:	f200 80f0 	bhi.w	8005182 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	08005183 	.word	0x08005183
 8004fb0:	08005183 	.word	0x08005183
 8004fb4:	08005183 	.word	0x08005183
 8004fb8:	0800503d 	.word	0x0800503d
 8004fbc:	08005183 	.word	0x08005183
 8004fc0:	08005183 	.word	0x08005183
 8004fc4:	08005183 	.word	0x08005183
 8004fc8:	0800507f 	.word	0x0800507f
 8004fcc:	08005183 	.word	0x08005183
 8004fd0:	08005183 	.word	0x08005183
 8004fd4:	08005183 	.word	0x08005183
 8004fd8:	080050bf 	.word	0x080050bf
 8004fdc:	08005183 	.word	0x08005183
 8004fe0:	08005183 	.word	0x08005183
 8004fe4:	08005183 	.word	0x08005183
 8004fe8:	08005101 	.word	0x08005101
 8004fec:	08005183 	.word	0x08005183
 8004ff0:	08005183 	.word	0x08005183
 8004ff4:	08005183 	.word	0x08005183
 8004ff8:	08005141 	.word	0x08005141
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fa2a 	bl	800545c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0208 	orr.w	r2, r2, #8
 8005016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0204 	bic.w	r2, r2, #4
 8005026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6999      	ldr	r1, [r3, #24]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	619a      	str	r2, [r3, #24]
      break;
 800503a:	e0a5      	b.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fa90 	bl	8005568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6999      	ldr	r1, [r3, #24]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	021a      	lsls	r2, r3, #8
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	619a      	str	r2, [r3, #24]
      break;
 800507c:	e084      	b.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 faef 	bl	8005668 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0208 	orr.w	r2, r2, #8
 8005098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0204 	bic.w	r2, r2, #4
 80050a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69d9      	ldr	r1, [r3, #28]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	61da      	str	r2, [r3, #28]
      break;
 80050bc:	e064      	b.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fb4d 	bl	8005764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69d9      	ldr	r1, [r3, #28]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	021a      	lsls	r2, r3, #8
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	61da      	str	r2, [r3, #28]
      break;
 80050fe:	e043      	b.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fb90 	bl	800582c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0204 	bic.w	r2, r2, #4
 800512a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800513e:	e023      	b.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fbce 	bl	80058e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005180:	e002      	b.n	8005188 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	75fb      	strb	r3, [r7, #23]
      break;
 8005186:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop

0800519c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_TIM_ConfigClockSource+0x1c>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e0b6      	b.n	8005326 <HAL_TIM_ConfigClockSource+0x18a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f4:	d03e      	beq.n	8005274 <HAL_TIM_ConfigClockSource+0xd8>
 80051f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051fa:	f200 8087 	bhi.w	800530c <HAL_TIM_ConfigClockSource+0x170>
 80051fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005202:	f000 8086 	beq.w	8005312 <HAL_TIM_ConfigClockSource+0x176>
 8005206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520a:	d87f      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x170>
 800520c:	2b70      	cmp	r3, #112	; 0x70
 800520e:	d01a      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0xaa>
 8005210:	2b70      	cmp	r3, #112	; 0x70
 8005212:	d87b      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x170>
 8005214:	2b60      	cmp	r3, #96	; 0x60
 8005216:	d050      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x11e>
 8005218:	2b60      	cmp	r3, #96	; 0x60
 800521a:	d877      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x170>
 800521c:	2b50      	cmp	r3, #80	; 0x50
 800521e:	d03c      	beq.n	800529a <HAL_TIM_ConfigClockSource+0xfe>
 8005220:	2b50      	cmp	r3, #80	; 0x50
 8005222:	d873      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x170>
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	d058      	beq.n	80052da <HAL_TIM_ConfigClockSource+0x13e>
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d86f      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x170>
 800522c:	2b30      	cmp	r3, #48	; 0x30
 800522e:	d064      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x15e>
 8005230:	2b30      	cmp	r3, #48	; 0x30
 8005232:	d86b      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x170>
 8005234:	2b20      	cmp	r3, #32
 8005236:	d060      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x15e>
 8005238:	2b20      	cmp	r3, #32
 800523a:	d867      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x170>
 800523c:	2b00      	cmp	r3, #0
 800523e:	d05c      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x15e>
 8005240:	2b10      	cmp	r3, #16
 8005242:	d05a      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x15e>
 8005244:	e062      	b.n	800530c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6899      	ldr	r1, [r3, #8]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f000 fc21 	bl	8005a9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	609a      	str	r2, [r3, #8]
      break;
 8005272:	e04f      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	6899      	ldr	r1, [r3, #8]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f000 fc0a 	bl	8005a9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005296:	609a      	str	r2, [r3, #8]
      break;
 8005298:	e03c      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6859      	ldr	r1, [r3, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f000 fb7e 	bl	80059a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2150      	movs	r1, #80	; 0x50
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fbd7 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 80052b8:	e02c      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	6859      	ldr	r1, [r3, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	461a      	mov	r2, r3
 80052c8:	f000 fb9d 	bl	8005a06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2160      	movs	r1, #96	; 0x60
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fbc7 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 80052d8:	e01c      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6859      	ldr	r1, [r3, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f000 fb5e 	bl	80059a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2140      	movs	r1, #64	; 0x40
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fbb7 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 80052f8:	e00c      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4619      	mov	r1, r3
 8005304:	4610      	mov	r0, r2
 8005306:	f000 fbae 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 800530a:	e003      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
      break;
 8005310:	e000      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005324:	7bfb      	ldrb	r3, [r7, #15]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a32      	ldr	r2, [pc, #200]	; (8005448 <TIM_Base_SetConfig+0xdc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d007      	beq.n	8005394 <TIM_Base_SetConfig+0x28>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538a:	d003      	beq.n	8005394 <TIM_Base_SetConfig+0x28>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a2f      	ldr	r2, [pc, #188]	; (800544c <TIM_Base_SetConfig+0xe0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d108      	bne.n	80053a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a27      	ldr	r2, [pc, #156]	; (8005448 <TIM_Base_SetConfig+0xdc>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <TIM_Base_SetConfig+0x6a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b4:	d00f      	beq.n	80053d6 <TIM_Base_SetConfig+0x6a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a24      	ldr	r2, [pc, #144]	; (800544c <TIM_Base_SetConfig+0xe0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00b      	beq.n	80053d6 <TIM_Base_SetConfig+0x6a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a23      	ldr	r2, [pc, #140]	; (8005450 <TIM_Base_SetConfig+0xe4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d007      	beq.n	80053d6 <TIM_Base_SetConfig+0x6a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a22      	ldr	r2, [pc, #136]	; (8005454 <TIM_Base_SetConfig+0xe8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_Base_SetConfig+0x6a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a21      	ldr	r2, [pc, #132]	; (8005458 <TIM_Base_SetConfig+0xec>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d108      	bne.n	80053e8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a0e      	ldr	r2, [pc, #56]	; (8005448 <TIM_Base_SetConfig+0xdc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00b      	beq.n	800542c <TIM_Base_SetConfig+0xc0>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a0e      	ldr	r2, [pc, #56]	; (8005450 <TIM_Base_SetConfig+0xe4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d007      	beq.n	800542c <TIM_Base_SetConfig+0xc0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a0d      	ldr	r2, [pc, #52]	; (8005454 <TIM_Base_SetConfig+0xe8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_Base_SetConfig+0xc0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0c      	ldr	r2, [pc, #48]	; (8005458 <TIM_Base_SetConfig+0xec>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d103      	bne.n	8005434 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	615a      	str	r2, [r3, #20]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40000400 	.word	0x40000400
 8005450:	40014000 	.word	0x40014000
 8005454:	40014400 	.word	0x40014400
 8005458:	40014800 	.word	0x40014800

0800545c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0201 	bic.w	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0303 	bic.w	r3, r3, #3
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f023 0302 	bic.w	r3, r3, #2
 80054a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a28      	ldr	r2, [pc, #160]	; (8005558 <TIM_OC1_SetConfig+0xfc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00b      	beq.n	80054d4 <TIM_OC1_SetConfig+0x78>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a27      	ldr	r2, [pc, #156]	; (800555c <TIM_OC1_SetConfig+0x100>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <TIM_OC1_SetConfig+0x78>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a26      	ldr	r2, [pc, #152]	; (8005560 <TIM_OC1_SetConfig+0x104>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_OC1_SetConfig+0x78>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a25      	ldr	r2, [pc, #148]	; (8005564 <TIM_OC1_SetConfig+0x108>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10c      	bne.n	80054ee <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0308 	bic.w	r3, r3, #8
 80054da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f023 0304 	bic.w	r3, r3, #4
 80054ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a19      	ldr	r2, [pc, #100]	; (8005558 <TIM_OC1_SetConfig+0xfc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00b      	beq.n	800550e <TIM_OC1_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a18      	ldr	r2, [pc, #96]	; (800555c <TIM_OC1_SetConfig+0x100>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d007      	beq.n	800550e <TIM_OC1_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a17      	ldr	r2, [pc, #92]	; (8005560 <TIM_OC1_SetConfig+0x104>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_OC1_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a16      	ldr	r2, [pc, #88]	; (8005564 <TIM_OC1_SetConfig+0x108>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d111      	bne.n	8005532 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800551c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40014000 	.word	0x40014000
 8005560:	40014400 	.word	0x40014400
 8005564:	40014800 	.word	0x40014800

08005568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0210 	bic.w	r2, r3, #16
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0320 	bic.w	r3, r3, #32
 80055b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a24      	ldr	r2, [pc, #144]	; (8005658 <TIM_OC2_SetConfig+0xf0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d10d      	bne.n	80055e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a1b      	ldr	r2, [pc, #108]	; (8005658 <TIM_OC2_SetConfig+0xf0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00b      	beq.n	8005608 <TIM_OC2_SetConfig+0xa0>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a1a      	ldr	r2, [pc, #104]	; (800565c <TIM_OC2_SetConfig+0xf4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_OC2_SetConfig+0xa0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a19      	ldr	r2, [pc, #100]	; (8005660 <TIM_OC2_SetConfig+0xf8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_OC2_SetConfig+0xa0>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a18      	ldr	r2, [pc, #96]	; (8005664 <TIM_OC2_SetConfig+0xfc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d113      	bne.n	8005630 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800560e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005616:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	621a      	str	r2, [r3, #32]
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40014000 	.word	0x40014000
 8005660:	40014400 	.word	0x40014400
 8005664:	40014800 	.word	0x40014800

08005668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a23      	ldr	r2, [pc, #140]	; (8005754 <TIM_OC3_SetConfig+0xec>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d10d      	bne.n	80056e6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1a      	ldr	r2, [pc, #104]	; (8005754 <TIM_OC3_SetConfig+0xec>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <TIM_OC3_SetConfig+0x9e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a19      	ldr	r2, [pc, #100]	; (8005758 <TIM_OC3_SetConfig+0xf0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_OC3_SetConfig+0x9e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a18      	ldr	r2, [pc, #96]	; (800575c <TIM_OC3_SetConfig+0xf4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_OC3_SetConfig+0x9e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a17      	ldr	r2, [pc, #92]	; (8005760 <TIM_OC3_SetConfig+0xf8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d113      	bne.n	800572e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800570c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	621a      	str	r2, [r3, #32]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40014000 	.word	0x40014000
 800575c:	40014400 	.word	0x40014400
 8005760:	40014800 	.word	0x40014800

08005764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	021b      	lsls	r3, r3, #8
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	031b      	lsls	r3, r3, #12
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a16      	ldr	r2, [pc, #88]	; (800581c <TIM_OC4_SetConfig+0xb8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00b      	beq.n	80057e0 <TIM_OC4_SetConfig+0x7c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a15      	ldr	r2, [pc, #84]	; (8005820 <TIM_OC4_SetConfig+0xbc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d007      	beq.n	80057e0 <TIM_OC4_SetConfig+0x7c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a14      	ldr	r2, [pc, #80]	; (8005824 <TIM_OC4_SetConfig+0xc0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <TIM_OC4_SetConfig+0x7c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a13      	ldr	r2, [pc, #76]	; (8005828 <TIM_OC4_SetConfig+0xc4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d109      	bne.n	80057f4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	019b      	lsls	r3, r3, #6
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40012c00 	.word	0x40012c00
 8005820:	40014000 	.word	0x40014000
 8005824:	40014400 	.word	0x40014400
 8005828:	40014800 	.word	0x40014800

0800582c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005870:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <TIM_OC5_SetConfig+0xac>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00b      	beq.n	800589e <TIM_OC5_SetConfig+0x72>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <TIM_OC5_SetConfig+0xb0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d007      	beq.n	800589e <TIM_OC5_SetConfig+0x72>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <TIM_OC5_SetConfig+0xb4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d003      	beq.n	800589e <TIM_OC5_SetConfig+0x72>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a12      	ldr	r2, [pc, #72]	; (80058e4 <TIM_OC5_SetConfig+0xb8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d109      	bne.n	80058b2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	40014000 	.word	0x40014000
 80058e0:	40014400 	.word	0x40014400
 80058e4:	40014800 	.word	0x40014800

080058e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800592e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	051b      	lsls	r3, r3, #20
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a16      	ldr	r2, [pc, #88]	; (8005998 <TIM_OC6_SetConfig+0xb0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00b      	beq.n	800595c <TIM_OC6_SetConfig+0x74>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a15      	ldr	r2, [pc, #84]	; (800599c <TIM_OC6_SetConfig+0xb4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d007      	beq.n	800595c <TIM_OC6_SetConfig+0x74>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a14      	ldr	r2, [pc, #80]	; (80059a0 <TIM_OC6_SetConfig+0xb8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d003      	beq.n	800595c <TIM_OC6_SetConfig+0x74>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <TIM_OC6_SetConfig+0xbc>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d109      	bne.n	8005970 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005962:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	029b      	lsls	r3, r3, #10
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	621a      	str	r2, [r3, #32]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800

080059a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f023 0201 	bic.w	r2, r3, #1
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 030a 	bic.w	r3, r3, #10
 80059e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b087      	sub	sp, #28
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f023 0210 	bic.w	r2, r3, #16
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	031b      	lsls	r3, r3, #12
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	621a      	str	r2, [r3, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b085      	sub	sp, #20
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f043 0307 	orr.w	r3, r3, #7
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	609a      	str	r2, [r3, #8]
}
 8005a90:	bf00      	nop
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	021a      	lsls	r2, r3, #8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	609a      	str	r2, [r3, #8]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	2201      	movs	r2, #1
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1a      	ldr	r2, [r3, #32]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	43db      	mvns	r3, r3
 8005afe:	401a      	ands	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	fa01 f303 	lsl.w	r3, r1, r3
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e054      	b.n	8005bea <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a24      	ldr	r2, [pc, #144]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d108      	bne.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00e      	beq.n	8005bbe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba8:	d009      	beq.n	8005bbe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d004      	beq.n	8005bbe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40012c00 	.word	0x40012c00
 8005bfc:	40000400 	.word	0x40000400
 8005c00:	40014000 	.word	0x40014000

08005c04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e060      	b.n	8005ce2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	041b      	lsls	r3, r3, #16
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a14      	ldr	r2, [pc, #80]	; (8005cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d115      	bne.n	8005cd0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	051b      	lsls	r3, r3, #20
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00

08005cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e040      	b.n	8005dc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fb fa30 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2224      	movs	r2, #36	; 0x24
 8005d5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fb78 	bl	8006464 <UART_SetConfig>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e022      	b.n	8005dc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fca2 	bl	80066d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fd29 	bl	8006814 <UART_CheckIdleState>
 8005dc2:	4603      	mov	r3, r0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d13d      	bne.n	8005e5e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_UART_Receive_IT+0x22>
 8005de8:	88fb      	ldrh	r3, [r7, #6]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e036      	b.n	8005e60 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <HAL_UART_Receive_IT+0x34>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e02f      	b.n	8005e60 <HAL_UART_Receive_IT+0x94>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d018      	beq.n	8005e4e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	623b      	str	r3, [r7, #32]
 8005e3c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	69f9      	ldr	r1, [r7, #28]
 8005e40:	6a3a      	ldr	r2, [r7, #32]
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e6      	bne.n	8005e1c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	461a      	mov	r2, r3
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fdeb 	bl	8006a30 <UART_Start_Receive_IT>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	e000      	b.n	8005e60 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
  }
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3728      	adds	r7, #40	; 0x28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b0ba      	sub	sp, #232	; 0xe8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e92:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e96:	4013      	ands	r3, r2
 8005e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d115      	bne.n	8005ed0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00f      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d009      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 82a3 	beq.w	800640c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	4798      	blx	r3
      }
      return;
 8005ece:	e29d      	b.n	800640c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 8117 	beq.w	8006108 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ee6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005eea:	4b85      	ldr	r3, [pc, #532]	; (8006100 <HAL_UART_IRQHandler+0x298>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 810a 	beq.w	8006108 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d011      	beq.n	8005f24 <HAL_UART_IRQHandler+0xbc>
 8005f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00b      	beq.n	8005f24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2201      	movs	r2, #1
 8005f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f1a:	f043 0201 	orr.w	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d011      	beq.n	8005f54 <HAL_UART_IRQHandler+0xec>
 8005f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00b      	beq.n	8005f54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2202      	movs	r2, #2
 8005f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f4a:	f043 0204 	orr.w	r2, r3, #4
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d011      	beq.n	8005f84 <HAL_UART_IRQHandler+0x11c>
 8005f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2204      	movs	r2, #4
 8005f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f7a:	f043 0202 	orr.w	r2, r3, #2
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d017      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f94:	f003 0320 	and.w	r3, r3, #32
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d105      	bne.n	8005fa8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fa0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2208      	movs	r2, #8
 8005fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb6:	f043 0208 	orr.w	r2, r3, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x18a>
 8005fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00c      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fe8:	f043 0220 	orr.w	r2, r3, #32
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8209 	beq.w	8006410 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00d      	beq.n	8006026 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800600a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800602c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d005      	beq.n	800604a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800603e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006042:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006046:	2b00      	cmp	r3, #0
 8006048:	d04f      	beq.n	80060ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fd9c 	bl	8006b88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	d141      	bne.n	80060e2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3308      	adds	r3, #8
 8006086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800608a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800608e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1d9      	bne.n	800605e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d013      	beq.n	80060da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	4a13      	ldr	r2, [pc, #76]	; (8006104 <HAL_UART_IRQHandler+0x29c>)
 80060b8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fc fd8a 	bl	8002bd8 <HAL_DMA_Abort_IT>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d017      	beq.n	80060fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80060d4:	4610      	mov	r0, r2
 80060d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	e00f      	b.n	80060fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f9ac 	bl	8006438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	e00b      	b.n	80060fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f9a8 	bl	8006438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e8:	e007      	b.n	80060fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f9a4 	bl	8006438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80060f8:	e18a      	b.n	8006410 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fa:	bf00      	nop
    return;
 80060fc:	e188      	b.n	8006410 <HAL_UART_IRQHandler+0x5a8>
 80060fe:	bf00      	nop
 8006100:	04000120 	.word	0x04000120
 8006104:	08006c4f 	.word	0x08006c4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610c:	2b01      	cmp	r3, #1
 800610e:	f040 8143 	bne.w	8006398 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 813c 	beq.w	8006398 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8135 	beq.w	8006398 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2210      	movs	r2, #16
 8006134:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	f040 80b1 	bne.w	80062a8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006152:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 815c 	beq.w	8006414 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006166:	429a      	cmp	r2, r3
 8006168:	f080 8154 	bcs.w	8006414 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006172:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	2b20      	cmp	r3, #32
 800617e:	f000 8085 	beq.w	800628c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800619a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800619e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1da      	bne.n	8006182 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3308      	adds	r3, #8
 80061d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3308      	adds	r3, #8
 80061ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e1      	bne.n	80061cc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3308      	adds	r3, #8
 800620e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800621a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3308      	adds	r3, #8
 8006228:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800622c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800622e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006232:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800623a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e3      	bne.n	8006208 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800625a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800625c:	f023 0310 	bic.w	r3, r3, #16
 8006260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800626e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006270:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006274:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800627c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e4      	bne.n	800624c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	4618      	mov	r0, r3
 8006288:	f7fc fc6d 	bl	8002b66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006298:	b29b      	uxth	r3, r3
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	b29b      	uxth	r3, r3
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f8d3 	bl	800644c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062a6:	e0b5      	b.n	8006414 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80a7 	beq.w	8006418 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80062ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80a2 	beq.w	8006418 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062f6:	647b      	str	r3, [r7, #68]	; 0x44
 80062f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e4      	bne.n	80062d4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	623b      	str	r3, [r7, #32]
   return(result);
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3308      	adds	r3, #8
 800632a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800632e:	633a      	str	r2, [r7, #48]	; 0x30
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e3      	bne.n	800630a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	60fb      	str	r3, [r7, #12]
   return(result);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f023 0310 	bic.w	r3, r3, #16
 8006368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
 8006372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	69b9      	ldr	r1, [r7, #24]
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	617b      	str	r3, [r7, #20]
   return(result);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e4      	bne.n	8006354 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800638a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f85b 	bl	800644c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006396:	e03f      	b.n	8006418 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00e      	beq.n	80063c2 <HAL_UART_IRQHandler+0x55a>
 80063a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fde3 	bl	8006f86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063c0:	e02d      	b.n	800641e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00e      	beq.n	80063ec <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d008      	beq.n	80063ec <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01c      	beq.n	800641c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	4798      	blx	r3
    }
    return;
 80063ea:	e017      	b.n	800641c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d012      	beq.n	800641e <HAL_UART_IRQHandler+0x5b6>
 80063f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00c      	beq.n	800641e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fc38 	bl	8006c7a <UART_EndTransmit_IT>
    return;
 800640a:	e008      	b.n	800641e <HAL_UART_IRQHandler+0x5b6>
      return;
 800640c:	bf00      	nop
 800640e:	e006      	b.n	800641e <HAL_UART_IRQHandler+0x5b6>
    return;
 8006410:	bf00      	nop
 8006412:	e004      	b.n	800641e <HAL_UART_IRQHandler+0x5b6>
      return;
 8006414:	bf00      	nop
 8006416:	e002      	b.n	800641e <HAL_UART_IRQHandler+0x5b6>
      return;
 8006418:	bf00      	nop
 800641a:	e000      	b.n	800641e <HAL_UART_IRQHandler+0x5b6>
    return;
 800641c:	bf00      	nop
  }

}
 800641e:	37e8      	adds	r7, #232	; 0xe8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	4b8a      	ldr	r3, [pc, #552]	; (80066b8 <UART_SetConfig+0x254>)
 8006490:	4013      	ands	r3, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6812      	ldr	r2, [r2, #0]
 8006496:	6979      	ldr	r1, [r7, #20]
 8006498:	430b      	orrs	r3, r1
 800649a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a78      	ldr	r2, [pc, #480]	; (80066bc <UART_SetConfig+0x258>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d120      	bne.n	8006522 <UART_SetConfig+0xbe>
 80064e0:	4b77      	ldr	r3, [pc, #476]	; (80066c0 <UART_SetConfig+0x25c>)
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d817      	bhi.n	800651c <UART_SetConfig+0xb8>
 80064ec:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <UART_SetConfig+0x90>)
 80064ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f2:	bf00      	nop
 80064f4:	08006505 	.word	0x08006505
 80064f8:	08006511 	.word	0x08006511
 80064fc:	08006517 	.word	0x08006517
 8006500:	0800650b 	.word	0x0800650b
 8006504:	2300      	movs	r3, #0
 8006506:	77fb      	strb	r3, [r7, #31]
 8006508:	e01d      	b.n	8006546 <UART_SetConfig+0xe2>
 800650a:	2302      	movs	r3, #2
 800650c:	77fb      	strb	r3, [r7, #31]
 800650e:	e01a      	b.n	8006546 <UART_SetConfig+0xe2>
 8006510:	2304      	movs	r3, #4
 8006512:	77fb      	strb	r3, [r7, #31]
 8006514:	e017      	b.n	8006546 <UART_SetConfig+0xe2>
 8006516:	2308      	movs	r3, #8
 8006518:	77fb      	strb	r3, [r7, #31]
 800651a:	e014      	b.n	8006546 <UART_SetConfig+0xe2>
 800651c:	2310      	movs	r3, #16
 800651e:	77fb      	strb	r3, [r7, #31]
 8006520:	e011      	b.n	8006546 <UART_SetConfig+0xe2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a67      	ldr	r2, [pc, #412]	; (80066c4 <UART_SetConfig+0x260>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d102      	bne.n	8006532 <UART_SetConfig+0xce>
 800652c:	2300      	movs	r3, #0
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e009      	b.n	8006546 <UART_SetConfig+0xe2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a64      	ldr	r2, [pc, #400]	; (80066c8 <UART_SetConfig+0x264>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d102      	bne.n	8006542 <UART_SetConfig+0xde>
 800653c:	2300      	movs	r3, #0
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e001      	b.n	8006546 <UART_SetConfig+0xe2>
 8006542:	2310      	movs	r3, #16
 8006544:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654e:	d15b      	bne.n	8006608 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006550:	7ffb      	ldrb	r3, [r7, #31]
 8006552:	2b08      	cmp	r3, #8
 8006554:	d827      	bhi.n	80065a6 <UART_SetConfig+0x142>
 8006556:	a201      	add	r2, pc, #4	; (adr r2, 800655c <UART_SetConfig+0xf8>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	08006581 	.word	0x08006581
 8006560:	08006589 	.word	0x08006589
 8006564:	08006591 	.word	0x08006591
 8006568:	080065a7 	.word	0x080065a7
 800656c:	08006597 	.word	0x08006597
 8006570:	080065a7 	.word	0x080065a7
 8006574:	080065a7 	.word	0x080065a7
 8006578:	080065a7 	.word	0x080065a7
 800657c:	0800659f 	.word	0x0800659f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006580:	f7fd fede 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8006584:	61b8      	str	r0, [r7, #24]
        break;
 8006586:	e013      	b.n	80065b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006588:	f7fd fefc 	bl	8004384 <HAL_RCC_GetPCLK2Freq>
 800658c:	61b8      	str	r0, [r7, #24]
        break;
 800658e:	e00f      	b.n	80065b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006590:	4b4e      	ldr	r3, [pc, #312]	; (80066cc <UART_SetConfig+0x268>)
 8006592:	61bb      	str	r3, [r7, #24]
        break;
 8006594:	e00c      	b.n	80065b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006596:	f7fd fe5d 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 800659a:	61b8      	str	r0, [r7, #24]
        break;
 800659c:	e008      	b.n	80065b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800659e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a2:	61bb      	str	r3, [r7, #24]
        break;
 80065a4:	e004      	b.n	80065b0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	77bb      	strb	r3, [r7, #30]
        break;
 80065ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d074      	beq.n	80066a0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	005a      	lsls	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	441a      	add	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b0f      	cmp	r3, #15
 80065d2:	d916      	bls.n	8006602 <UART_SetConfig+0x19e>
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065da:	d212      	bcs.n	8006602 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f023 030f 	bic.w	r3, r3, #15
 80065e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	085b      	lsrs	r3, r3, #1
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	89fb      	ldrh	r3, [r7, #14]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	89fa      	ldrh	r2, [r7, #14]
 80065fe:	60da      	str	r2, [r3, #12]
 8006600:	e04e      	b.n	80066a0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	77bb      	strb	r3, [r7, #30]
 8006606:	e04b      	b.n	80066a0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006608:	7ffb      	ldrb	r3, [r7, #31]
 800660a:	2b08      	cmp	r3, #8
 800660c:	d827      	bhi.n	800665e <UART_SetConfig+0x1fa>
 800660e:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <UART_SetConfig+0x1b0>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006639 	.word	0x08006639
 8006618:	08006641 	.word	0x08006641
 800661c:	08006649 	.word	0x08006649
 8006620:	0800665f 	.word	0x0800665f
 8006624:	0800664f 	.word	0x0800664f
 8006628:	0800665f 	.word	0x0800665f
 800662c:	0800665f 	.word	0x0800665f
 8006630:	0800665f 	.word	0x0800665f
 8006634:	08006657 	.word	0x08006657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006638:	f7fd fe82 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 800663c:	61b8      	str	r0, [r7, #24]
        break;
 800663e:	e013      	b.n	8006668 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006640:	f7fd fea0 	bl	8004384 <HAL_RCC_GetPCLK2Freq>
 8006644:	61b8      	str	r0, [r7, #24]
        break;
 8006646:	e00f      	b.n	8006668 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006648:	4b20      	ldr	r3, [pc, #128]	; (80066cc <UART_SetConfig+0x268>)
 800664a:	61bb      	str	r3, [r7, #24]
        break;
 800664c:	e00c      	b.n	8006668 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664e:	f7fd fe01 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8006652:	61b8      	str	r0, [r7, #24]
        break;
 8006654:	e008      	b.n	8006668 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800665a:	61bb      	str	r3, [r7, #24]
        break;
 800665c:	e004      	b.n	8006668 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	77bb      	strb	r3, [r7, #30]
        break;
 8006666:	bf00      	nop
    }

    if (pclk != 0U)
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d018      	beq.n	80066a0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	085a      	lsrs	r2, r3, #1
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	441a      	add	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006680:	b29b      	uxth	r3, r3
 8006682:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2b0f      	cmp	r3, #15
 8006688:	d908      	bls.n	800669c <UART_SetConfig+0x238>
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006690:	d204      	bcs.n	800669c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	60da      	str	r2, [r3, #12]
 800669a:	e001      	b.n	80066a0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3720      	adds	r7, #32
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	efff69f3 	.word	0xefff69f3
 80066bc:	40013800 	.word	0x40013800
 80066c0:	40021000 	.word	0x40021000
 80066c4:	40004400 	.word	0x40004400
 80066c8:	40004800 	.word	0x40004800
 80066cc:	007a1200 	.word	0x007a1200

080066d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01a      	beq.n	80067e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ce:	d10a      	bne.n	80067e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	605a      	str	r2, [r3, #4]
  }
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af02      	add	r7, sp, #8
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006824:	f7fa fe48 	bl	80014b8 <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b08      	cmp	r3, #8
 8006836:	d10e      	bne.n	8006856 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f82d 	bl	80068a6 <UART_WaitOnFlagUntilTimeout>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e023      	b.n	800689e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b04      	cmp	r3, #4
 8006862:	d10e      	bne.n	8006882 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f817 	bl	80068a6 <UART_WaitOnFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e00d      	b.n	800689e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b09c      	sub	sp, #112	; 0x70
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	603b      	str	r3, [r7, #0]
 80068b2:	4613      	mov	r3, r2
 80068b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b6:	e0a5      	b.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068be:	f000 80a1 	beq.w	8006a04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c2:	f7fa fdf9 	bl	80014b8 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d302      	bcc.n	80068d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80068d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d13e      	bne.n	8006956 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068ec:	667b      	str	r3, [r7, #100]	; 0x64
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e6      	bne.n	80068d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3308      	adds	r3, #8
 8006910:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	f023 0301 	bic.w	r3, r3, #1
 8006920:	663b      	str	r3, [r7, #96]	; 0x60
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3308      	adds	r3, #8
 8006928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800692a:	64ba      	str	r2, [r7, #72]	; 0x48
 800692c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e5      	bne.n	800690a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e067      	b.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d04f      	beq.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006972:	d147      	bne.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800697c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006992:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
 800699e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e6      	bne.n	800697e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3308      	adds	r3, #8
 80069b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	613b      	str	r3, [r7, #16]
   return(result);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f023 0301 	bic.w	r3, r3, #1
 80069c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3308      	adds	r3, #8
 80069ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069d0:	623a      	str	r2, [r7, #32]
 80069d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	69f9      	ldr	r1, [r7, #28]
 80069d6:	6a3a      	ldr	r2, [r7, #32]
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e5      	bne.n	80069b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e010      	b.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	69da      	ldr	r2, [r3, #28]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	bf0c      	ite	eq
 8006a14:	2301      	moveq	r3, #1
 8006a16:	2300      	movne	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	f43f af4a 	beq.w	80068b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3770      	adds	r7, #112	; 0x70
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b091      	sub	sp, #68	; 0x44
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	88fa      	ldrh	r2, [r7, #6]
 8006a48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	88fa      	ldrh	r2, [r7, #6]
 8006a50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a62:	d10e      	bne.n	8006a82 <UART_Start_Receive_IT+0x52>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <UART_Start_Receive_IT+0x48>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a76:	e02d      	b.n	8006ad4 <UART_Start_Receive_IT+0xa4>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	22ff      	movs	r2, #255	; 0xff
 8006a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a80:	e028      	b.n	8006ad4 <UART_Start_Receive_IT+0xa4>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10d      	bne.n	8006aa6 <UART_Start_Receive_IT+0x76>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <UART_Start_Receive_IT+0x6c>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	22ff      	movs	r2, #255	; 0xff
 8006a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a9a:	e01b      	b.n	8006ad4 <UART_Start_Receive_IT+0xa4>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	227f      	movs	r2, #127	; 0x7f
 8006aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aa4:	e016      	b.n	8006ad4 <UART_Start_Receive_IT+0xa4>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aae:	d10d      	bne.n	8006acc <UART_Start_Receive_IT+0x9c>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <UART_Start_Receive_IT+0x92>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	227f      	movs	r2, #127	; 0x7f
 8006abc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ac0:	e008      	b.n	8006ad4 <UART_Start_Receive_IT+0xa4>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	223f      	movs	r2, #63	; 0x3f
 8006ac6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aca:	e003      	b.n	8006ad4 <UART_Start_Receive_IT+0xa4>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2222      	movs	r2, #34	; 0x22
 8006ae0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	f043 0301 	orr.w	r3, r3, #1
 8006af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b02:	637a      	str	r2, [r7, #52]	; 0x34
 8006b04:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e5      	bne.n	8006ae2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	d107      	bne.n	8006b30 <UART_Start_Receive_IT+0x100>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4a15      	ldr	r2, [pc, #84]	; (8006b80 <UART_Start_Receive_IT+0x150>)
 8006b2c:	665a      	str	r2, [r3, #100]	; 0x64
 8006b2e:	e002      	b.n	8006b36 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4a14      	ldr	r2, [pc, #80]	; (8006b84 <UART_Start_Receive_IT+0x154>)
 8006b34:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	623b      	str	r3, [r7, #32]
 8006b5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	69f9      	ldr	r1, [r7, #28]
 8006b62:	6a3a      	ldr	r2, [r7, #32]
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e6      	bne.n	8006b3e <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3744      	adds	r7, #68	; 0x44
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	08006e2b 	.word	0x08006e2b
 8006b84:	08006ccf 	.word	0x08006ccf

08006b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b095      	sub	sp, #84	; 0x54
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bae:	643b      	str	r3, [r7, #64]	; 0x40
 8006bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e6      	bne.n	8006b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f023 0301 	bic.w	r3, r3, #1
 8006bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3308      	adds	r3, #8
 8006be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006be4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e5      	bne.n	8006bc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d118      	bne.n	8006c30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f023 0310 	bic.w	r3, r3, #16
 8006c12:	647b      	str	r3, [r7, #68]	; 0x44
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6979      	ldr	r1, [r7, #20]
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e6      	bne.n	8006bfe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006c42:	bf00      	nop
 8006c44:	3754      	adds	r7, #84	; 0x54
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f7ff fbe3 	bl	8006438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c72:	bf00      	nop
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b088      	sub	sp, #32
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	6979      	ldr	r1, [r7, #20]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	613b      	str	r3, [r7, #16]
   return(result);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e6      	bne.n	8006c82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff fbaf 	bl	8006424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc6:	bf00      	nop
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b096      	sub	sp, #88	; 0x58
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cdc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ce4:	2b22      	cmp	r3, #34	; 0x22
 8006ce6:	f040 8094 	bne.w	8006e12 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006cf0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cf4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006cf8:	b2d9      	uxtb	r1, r3
 8006cfa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d04:	400a      	ands	r2, r1
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d177      	bne.n	8006e22 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d46:	653b      	str	r3, [r7, #80]	; 0x50
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d50:	647b      	str	r3, [r7, #68]	; 0x44
 8006d52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e6      	bne.n	8006d32 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3308      	adds	r3, #8
 8006d6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	623b      	str	r3, [r7, #32]
   return(result);
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d84:	633a      	str	r2, [r7, #48]	; 0x30
 8006d86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d12e      	bne.n	8006e0a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0310 	bic.w	r3, r3, #16
 8006dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dd0:	61fb      	str	r3, [r7, #28]
 8006dd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	69b9      	ldr	r1, [r7, #24]
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e6      	bne.n	8006db2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f003 0310 	and.w	r3, r3, #16
 8006dee:	2b10      	cmp	r3, #16
 8006df0:	d103      	bne.n	8006dfa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2210      	movs	r2, #16
 8006df8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fb22 	bl	800644c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e08:	e00b      	b.n	8006e22 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7f9 f9dc 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8006e10:	e007      	b.n	8006e22 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	699a      	ldr	r2, [r3, #24]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0208 	orr.w	r2, r2, #8
 8006e20:	619a      	str	r2, [r3, #24]
}
 8006e22:	bf00      	nop
 8006e24:	3758      	adds	r7, #88	; 0x58
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b096      	sub	sp, #88	; 0x58
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e38:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e40:	2b22      	cmp	r3, #34	; 0x22
 8006e42:	f040 8094 	bne.w	8006f6e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e4c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e54:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e56:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006e5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e5e:	4013      	ands	r3, r2
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e64:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6a:	1c9a      	adds	r2, r3, #2
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d177      	bne.n	8006f7e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	e853 3f00 	ldrex	r3, [r3]
 8006e9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eac:	643b      	str	r3, [r7, #64]	; 0x40
 8006eae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eb4:	e841 2300 	strex	r3, r2, [r1]
 8006eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e6      	bne.n	8006e8e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	e853 3f00 	ldrex	r3, [r3]
 8006ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	f023 0301 	bic.w	r3, r3, #1
 8006ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3308      	adds	r3, #8
 8006ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e5      	bne.n	8006ec0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d12e      	bne.n	8006f66 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f023 0310 	bic.w	r3, r3, #16
 8006f22:	647b      	str	r3, [r7, #68]	; 0x44
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6979      	ldr	r1, [r7, #20]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	613b      	str	r3, [r7, #16]
   return(result);
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e6      	bne.n	8006f0e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	f003 0310 	and.w	r3, r3, #16
 8006f4a:	2b10      	cmp	r3, #16
 8006f4c:	d103      	bne.n	8006f56 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2210      	movs	r2, #16
 8006f54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff fa74 	bl	800644c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f64:	e00b      	b.n	8006f7e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7f9 f92e 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8006f6c:	e007      	b.n	8006f7e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	699a      	ldr	r2, [r3, #24]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0208 	orr.w	r2, r2, #8
 8006f7c:	619a      	str	r2, [r3, #24]
}
 8006f7e:	bf00      	nop
 8006f80:	3758      	adds	r7, #88	; 0x58
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <__libc_init_array>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	4d0d      	ldr	r5, [pc, #52]	; (8006fd4 <__libc_init_array+0x38>)
 8006fa0:	4c0d      	ldr	r4, [pc, #52]	; (8006fd8 <__libc_init_array+0x3c>)
 8006fa2:	1b64      	subs	r4, r4, r5
 8006fa4:	10a4      	asrs	r4, r4, #2
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	42a6      	cmp	r6, r4
 8006faa:	d109      	bne.n	8006fc0 <__libc_init_array+0x24>
 8006fac:	4d0b      	ldr	r5, [pc, #44]	; (8006fdc <__libc_init_array+0x40>)
 8006fae:	4c0c      	ldr	r4, [pc, #48]	; (8006fe0 <__libc_init_array+0x44>)
 8006fb0:	f000 f82e 	bl	8007010 <_init>
 8006fb4:	1b64      	subs	r4, r4, r5
 8006fb6:	10a4      	asrs	r4, r4, #2
 8006fb8:	2600      	movs	r6, #0
 8006fba:	42a6      	cmp	r6, r4
 8006fbc:	d105      	bne.n	8006fca <__libc_init_array+0x2e>
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc4:	4798      	blx	r3
 8006fc6:	3601      	adds	r6, #1
 8006fc8:	e7ee      	b.n	8006fa8 <__libc_init_array+0xc>
 8006fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fce:	4798      	blx	r3
 8006fd0:	3601      	adds	r6, #1
 8006fd2:	e7f2      	b.n	8006fba <__libc_init_array+0x1e>
 8006fd4:	08007060 	.word	0x08007060
 8006fd8:	08007060 	.word	0x08007060
 8006fdc:	08007060 	.word	0x08007060
 8006fe0:	08007064 	.word	0x08007064

08006fe4 <memcpy>:
 8006fe4:	440a      	add	r2, r1
 8006fe6:	4291      	cmp	r1, r2
 8006fe8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fec:	d100      	bne.n	8006ff0 <memcpy+0xc>
 8006fee:	4770      	bx	lr
 8006ff0:	b510      	push	{r4, lr}
 8006ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ffa:	4291      	cmp	r1, r2
 8006ffc:	d1f9      	bne.n	8006ff2 <memcpy+0xe>
 8006ffe:	bd10      	pop	{r4, pc}

08007000 <memset>:
 8007000:	4402      	add	r2, r0
 8007002:	4603      	mov	r3, r0
 8007004:	4293      	cmp	r3, r2
 8007006:	d100      	bne.n	800700a <memset+0xa>
 8007008:	4770      	bx	lr
 800700a:	f803 1b01 	strb.w	r1, [r3], #1
 800700e:	e7f9      	b.n	8007004 <memset+0x4>

08007010 <_init>:
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	bf00      	nop
 8007014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007016:	bc08      	pop	{r3}
 8007018:	469e      	mov	lr, r3
 800701a:	4770      	bx	lr

0800701c <_fini>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	bf00      	nop
 8007020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007022:	bc08      	pop	{r3}
 8007024:	469e      	mov	lr, r3
 8007026:	4770      	bx	lr
